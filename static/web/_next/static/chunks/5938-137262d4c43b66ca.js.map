{"version":3,"file":"static/chunks/5938-137262d4c43b66ca.js","mappings":"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","sources":["webpack://_N_E/./node_modules/date-fns/esm/compareAsc/index.js","webpack://_N_E/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack://_N_E/./node_modules/date-fns/esm/endOfDay/index.js","webpack://_N_E/./node_modules/date-fns/esm/endOfMonth/index.js","webpack://_N_E/./node_modules/date-fns/esm/isLastDayOfMonth/index.js","webpack://_N_E/./node_modules/date-fns/esm/differenceInMonths/index.js","webpack://_N_E/./node_modules/date-fns/esm/_lib/assign/index.js","webpack://_N_E/./node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack://_N_E/./node_modules/date-fns/esm/formatDistance/index.js","webpack://_N_E/./node_modules/date-fns/esm/formatDistanceToNow/index.js","webpack://_N_E/<anon>"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","export default function assign(target, object) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  for (var property in object) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      ;\n      target[property] = object[property];\n    }\n  }\n\n  return target;\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(object) {\n  return assign({}, object);\n}","import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale;\n\n  requiredArgs(2, arguments);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = assign(cloneObject(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options !== null && options !== void 0 && options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import distanceInWords from \"../formatDistance/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport default function formatDistanceToNow(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), options);\n}"],"names":["compareAsc","dirtyDateLeft","dirtyDateRight","_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","Z","arguments","dateLeft","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","dateRight","diff","getTime","differenceInMonths","requiredArgs","result","toDate","sign","difference","Math","abs","differenceInCalendarMonths","yearDiff","getFullYear","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","isLastDayOfMonth","dirtyDate","date","endOfDay","setHours","endOfMonth","month","setFullYear","Number","assign_assign","target","object","property","Object","prototype","hasOwnProperty","call","formatDistanceToNow","options","formatDistance","dirtyBaseDate","_ref","_options$locale","months","defaultOptions","_lib_defaultOptions","j","locale","defaultLocale","comparison","isNaN","localizeOptions","addSuffix","Boolean","seconds","differenceInSeconds","minutes","round","getTimezoneOffsetInMilliseconds","includeSeconds","monthsSinceStartOfYear","years","floor","Date","now"],"sourceRoot":""}