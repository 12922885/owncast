{"version":3,"file":"static/chunks/1559.3b18423c6b87df59.js","mappings":"yLAGA,MAMaA,EAAqC,I,IAAA,cAAEC,EAAa,oBAAEC,GAAqB,EACtF,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACzCC,GAAMC,EAAAA,EAAAA,UAyCZ,OA5BAC,EAAAA,EAAAA,YAAU,KAXaC,WACrB,IACE,MAAMC,QAAiBC,MAZJ,cAabC,QAAcF,EAASG,OAC7BT,EAAeQ,GACf,MAAOE,GACPC,QAAQC,MAAM,4BAA6BF,KAM7CG,KACC,KAGHT,EAAAA,EAAAA,YAAU,KACR,MAAMM,EAAIX,EAAYe,KAAIN,IAAU,CAClCA,MAAOA,EAAMO,KACbC,MAAOR,EAAMO,KACbE,IAAKT,EAAMS,SAGEC,EAAAA,EAAAA,IAAa,CAC1BC,YAAajB,EAAIkB,QACjBC,OAAQX,EACRY,gBAAiB,SACjBC,aAAa,EACbC,aAAa,IAERC,iBAAiB,gBAAgBC,IAClCA,EAAMT,IACRnB,EAAoB4B,EAAMX,KAAMW,EAAMT,KAEtCpB,EAAc6B,EAAMlB,YAGvB,CAACT,KAEG,SAAC4B,MAAAA,CAAIzB,IAAKA","sources":["webpack://_N_E/./components/chat/ChatTextField/EmojiPicker.tsx"],"sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react';\nimport { createPicker } from 'picmo';\n\nconst CUSTOM_EMOJI_URL = '/api/emoji';\nexport type EmojiPickerProps = {\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (name: string, url: string) => void;\n};\n\nexport const EmojiPicker: FC<EmojiPickerProps> = ({ onEmojiSelect, onCustomEmojiSelect }) => {\n  const [customEmoji, setCustomEmoji] = useState([]);\n  const ref = useRef();\n\n  const getCustomEmoji = async () => {\n    try {\n      const response = await fetch(CUSTOM_EMOJI_URL);\n      const emoji = await response.json();\n      setCustomEmoji(emoji);\n    } catch (e) {\n      console.error('cannot fetch custom emoji', e);\n    }\n  };\n\n  // Fetch the custom emoji on component mount.\n  useEffect(() => {\n    getCustomEmoji();\n  }, []);\n\n  // Recreate the emoji picker when the custom emoji changes.\n  useEffect(() => {\n    const e = customEmoji.map(emoji => ({\n      emoji: emoji.name,\n      label: emoji.name,\n      url: emoji.url,\n    }));\n\n    const picker = createPicker({\n      rootElement: ref.current,\n      custom: e,\n      initialCategory: 'custom',\n      showPreview: false,\n      showRecents: true,\n    });\n    picker.addEventListener('emoji:select', event => {\n      if (event.url) {\n        onCustomEmojiSelect(event.name, event.url);\n      } else {\n        onEmojiSelect(event.emoji);\n      }\n    });\n  }, [customEmoji]);\n\n  return <div ref={ref} />;\n};\n"],"names":["EmojiPicker","onEmojiSelect","onCustomEmojiSelect","customEmoji","setCustomEmoji","useState","ref","useRef","useEffect","async","response","fetch","emoji","json","e","console","error","getCustomEmoji","map","name","label","url","createPicker","rootElement","current","custom","initialCategory","showPreview","showRecents","addEventListener","event","div"],"sourceRoot":""}