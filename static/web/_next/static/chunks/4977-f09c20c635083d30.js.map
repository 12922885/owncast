{"version":3,"file":"static/chunks/4977-f09c20c635083d30.js","mappings":"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","sources":["webpack://_N_E/./components/chat/ChatUserMessage/messageFmt.ts","webpack://_N_E/./components/chat/ChatUserBadge/ChatUserBadge.tsx","webpack://_N_E/./components/chat/ChatUserMessage/ChatUserMessage.tsx","webpack://_N_E/./components/chat/ChatTextField/ChatTextField.tsx","webpack://_N_E/./assets/images/moderator.svg","webpack://_N_E/./components/chat/ChatModeratorNotification/ChatModeratorNotification.tsx","webpack://_N_E/./components/chat/ChatSystemMessage/ChatSystemMessage.tsx","webpack://_N_E/./components/chat/ChatJoinMessage/ChatJoinMessage.tsx","webpack://_N_E/./components/chat/ChatContainer/ScrollToBotBtn.tsx","webpack://_N_E/./components/chat/ChatActionMessage/ChatActionMessage.tsx","webpack://_N_E/./components/chat/ChatContainer/ChatContainer.tsx","webpack://_N_E/./components/chat/ChatActionMessage/ChatActionMessage.module.scss","webpack://_N_E/./components/chat/ChatContainer/ChatContainer.module.scss","webpack://_N_E/./components/chat/ChatJoinMessage/ChatJoinMessage.module.scss","webpack://_N_E/./components/chat/ChatModeratorNotification/ChatModeratorNotification.module.scss","webpack://_N_E/./components/chat/ChatSystemMessage/ChatSystemMessage.module.scss","webpack://_N_E/./components/chat/ChatTextField/ChatTextField.module.scss","webpack://_N_E/./components/chat/ChatUserBadge/ChatUserBadge.module.scss","webpack://_N_E/./components/chat/ChatUserMessage/ChatUserMessage.module.scss"],"sourcesContent":["import { convertToText } from '../chat';\nimport { getDiffInDaysFromNow } from '../../../utils/helpers';\n\nconst stripTags = (str: string) => str && str.replace(/<\\/?[^>]+(>|$)/g, '');\nconst convertToMarkup = (str = '') => convertToText(str).replace(/\\n/g, '<p></p>');\n\nfunction getInstagramEmbedFromURL(url: string) {\n  const urlObject = new URL(url.replace(/\\/$/, ''));\n  urlObject.pathname += '/embed';\n  return `<iframe class=\"chat-embed instagram-embed\" src=\"${urlObject.href}\" frameborder=\"0\" allowfullscreen></iframe>`;\n}\n\nfunction isMessageJustAnchor(embedText: string, message: string, anchors: HTMLAnchorElement[]) {\n  if (embedText !== '' && anchors.length === 1) return false;\n  return stripTags(message) === stripTags(anchors[0]?.innerHTML);\n}\n\nfunction getMessageWithEmbeds(message: string) {\n  let embedText = '';\n  // Make a temporary element so we can actually parse the html and pull anchor tags from it.\n  // This is a better approach than regex.\n  const container = document.createElement('p');\n  container.innerHTML = message;\n\n  const anchors = Array.from(container.querySelectorAll('a'));\n  anchors.forEach(({ href }) => {\n    if (href.includes('instagram.com/p/')) embedText += getInstagramEmbedFromURL(href);\n  });\n\n  // If this message only consists of a single embeddable link\n  // then only return the embed and strip the link url from the text.\n  if (isMessageJustAnchor(embedText, message, anchors)) return embedText;\n  return message + embedText;\n}\n\nexport function formatTimestamp(sentAt: Date) {\n  const now = new Date(sentAt);\n  if (Number.isNaN(now)) return '';\n\n  const diffInDays = getDiffInDaysFromNow(sentAt);\n\n  if (diffInDays >= 1) {\n    const localeDate = now.toLocaleDateString('en-US', {\n      dateStyle: 'medium',\n    });\n    return `${localeDate} at ${now.toLocaleTimeString()}`;\n  }\n\n  return `${now.toLocaleTimeString()}`;\n}\n\n/*\n  You would call this when receiving a plain text\n  value back from an API, and before inserting the\n  text into the `contenteditable` area on a page.\n*/\n\nexport function formatMessageText(message: string) {\n  let formattedText = getMessageWithEmbeds(message);\n  formattedText = convertToMarkup(formattedText);\n  return formattedText;\n  // return await highlightUsername(formattedText, username);\n}\n","import React, { FC } from 'react';\nimport styles from './ChatUserBadge.module.scss';\n\nexport type ChatUserBadgeProps = {\n  badge: React.ReactNode;\n  userColor: number;\n};\n\nexport const ChatUserBadge: FC<ChatUserBadgeProps> = ({ badge, userColor }) => {\n  const color = `var(--theme-user-colors-${userColor})`;\n  const style = { color, borderColor: color };\n\n  return (\n    <span style={style} className={styles.badge}>\n      {badge}\n    </span>\n  );\n};\n","/* eslint-disable react/no-danger */\nimport { FC, ReactNode, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { LinkOutlined } from '@ant-design/icons';\nimport { useRecoilValue } from 'recoil';\nimport dynamic from 'next/dynamic';\nimport { decodeHTML } from 'entities';\nimport styles from './ChatUserMessage.module.scss';\nimport { formatTimestamp } from './messageFmt';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport { ChatUserBadge } from '../ChatUserBadge/ChatUserBadge';\nimport { accessTokenAtom } from '../../stores/ClientConfigStore';\nimport { User } from '../../../interfaces/user.model';\n\n// Lazy loaded components\n\nconst Tooltip = dynamic(() => import('antd').then(mod => mod.Tooltip), {\n  ssr: false,\n});\n\nconst ChatModerationActionMenu = dynamic(() =>\n  import('../ChatModerationActionMenu/ChatModerationActionMenu').then(\n    mod => mod.ChatModerationActionMenu,\n  ),\n);\n\nconst Highlight = dynamic(() => import('react-highlighter-ts').then(mod => mod.Highlight));\n\nexport type ChatUserMessageProps = {\n  message: ChatMessage;\n  showModeratorMenu: boolean;\n  highlightString: string;\n  sentBySelf: boolean;\n  sameUserAsLast: boolean;\n  isAuthorModerator: boolean;\n  isAuthorAuthenticated: boolean;\n};\n\nexport type UserTooltipProps = {\n  user: User;\n  children: ReactNode;\n};\n\nconst UserTooltip: FC<UserTooltipProps> = ({ children, user }) => {\n  const { displayName, createdAt } = user;\n  const content = `${displayName} first joined ${formatTimestamp(createdAt)}`;\n\n  return (\n    <Tooltip title={content} placement=\"topLeft\" mouseEnterDelay={1}>\n      {children}\n    </Tooltip>\n  );\n};\n\nexport const ChatUserMessage: FC<ChatUserMessageProps> = ({\n  message,\n  highlightString,\n  showModeratorMenu,\n  sentBySelf, // Move the border to the right and render a background\n  sameUserAsLast,\n  isAuthorModerator,\n  isAuthorAuthenticated,\n}) => {\n  const { id: messageId, body, user, timestamp } = message;\n  const { id: userId, displayName, displayColor } = user;\n  const accessToken = useRecoilValue<string>(accessTokenAtom);\n\n  const color = `var(--theme-color-users-${displayColor})`;\n  const formattedTimestamp = `Sent ${formatTimestamp(timestamp)}`;\n  const [formattedMessage, setFormattedMessage] = useState<string>(body);\n\n  const badgeNodes = [];\n  if (isAuthorModerator) {\n    badgeNodes.push(<ChatUserBadge key=\"mod\" badge=\"mod\" userColor={displayColor} />);\n  }\n  if (isAuthorAuthenticated) {\n    badgeNodes.push(\n      <ChatUserBadge\n        key=\"auth\"\n        badge={<LinkOutlined title=\"authenticated\" />}\n        userColor={displayColor}\n      />,\n    );\n  }\n\n  useEffect(() => {\n    setFormattedMessage(decodeHTML(body));\n  }, [message]);\n\n  return (\n    <div\n      className={cn(\n        styles.messagePadding,\n        sameUserAsLast && styles.messagePaddingCollapsed,\n        'chat-message_user',\n      )}\n    >\n      <div\n        className={cn(styles.root, {\n          [styles.ownMessage]: sentBySelf,\n        })}\n        style={{ borderColor: color }}\n      >\n        {!sameUserAsLast && (\n          <UserTooltip user={user}>\n            <div className={styles.user} style={{ color }}>\n              <span className={styles.userName}>{displayName}</span>\n              <span>{badgeNodes}</span>\n            </div>\n          </UserTooltip>\n        )}\n        <Tooltip title={formattedTimestamp} mouseEnterDelay={1}>\n          <Highlight search={highlightString}>\n            <div\n              className={styles.message}\n              dangerouslySetInnerHTML={{ __html: formattedMessage }}\n            />\n          </Highlight>\n        </Tooltip>\n\n        {showModeratorMenu && (\n          <div className={styles.modMenuWrapper}>\n            <ChatModerationActionMenu\n              messageID={messageId}\n              accessToken={accessToken}\n              userID={userId}\n              userDisplayName={displayName}\n            />\n          </div>\n        )}\n        <div className={styles.background} style={{ color }} />\n      </div>\n    </div>\n  );\n};\n","import { SendOutlined, SmileOutlined } from '@ant-design/icons';\nimport { Popover } from 'antd';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { Transforms, createEditor, BaseEditor, Text, Descendant, Editor, Node, Path } from 'slate';\nimport { Slate, Editable, withReact, ReactEditor, useSelected, useFocused } from 'slate-react';\nimport dynamic from 'next/dynamic';\nimport classNames from 'classnames';\nimport WebsocketService from '../../../services/websocket-service';\nimport { websocketServiceAtom } from '../../stores/ClientConfigStore';\nimport { MessageType } from '../../../interfaces/socket-events';\nimport styles from './ChatTextField.module.scss';\n\n// Lazy loaded components\n\nconst EmojiPicker = dynamic(() => import('./EmojiPicker').then(mod => mod.EmojiPicker));\n\ntype CustomElement = { type: 'paragraph' | 'span'; children: CustomText[] } | ImageNode;\ntype CustomText = { text: string };\n\ntype EmptyText = {\n  text: string;\n};\n\ntype ImageNode = {\n  type: 'image';\n  alt: string;\n  src: string;\n  name: string;\n  children: EmptyText[];\n};\n\ndeclare module 'slate' {\n  interface CustomTypes {\n    Editor: BaseEditor & ReactEditor;\n    Element: CustomElement;\n    Text: CustomText;\n  }\n}\n\nconst Image = p => {\n  const { attributes, element, children } = p;\n\n  const selected = useSelected();\n  const focused = useFocused();\n  return (\n    <span {...attributes} contentEditable={false}>\n      <img\n        alt={element.alt}\n        src={element.src}\n        title={element.name}\n        style={{\n          display: 'inline',\n          maxWidth: '50px',\n          maxHeight: '20px',\n          boxShadow: `${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'}`,\n        }}\n      />\n      {children}\n    </span>\n  );\n};\n\nconst withImages = editor => {\n  const { isVoid } = editor;\n\n  // eslint-disable-next-line no-param-reassign\n  editor.isVoid = element => (element.type === 'image' ? true : isVoid(element));\n  // eslint-disable-next-line no-param-reassign\n  editor.isInline = element => element.type === 'image';\n\n  return editor;\n};\n\nconst serialize = node => {\n  if (Text.isText(node)) {\n    const string = node.text;\n    return string;\n  }\n\n  let children;\n  if (node.children.length === 0) {\n    children = [{ text: '' }];\n  } else {\n    children = node.children?.map(n => serialize(n)).join('');\n  }\n\n  switch (node.type) {\n    case 'paragraph':\n      return `<p>${children}</p>`;\n    case 'image':\n      return `<img src=\"${node.src}\" alt=\"${node.alt}\" title=\"${node.name}\" class=\"emoji\"/>`;\n    default:\n      return children;\n  }\n};\n\nconst getCharacterCount = node => {\n  if (Text.isText(node)) {\n    return node.text.length;\n  }\n  if (node.type === 'image') {\n    return 5;\n  }\n\n  let count = 0;\n  node.children.forEach(child => {\n    count += getCharacterCount(child);\n  });\n\n  return count;\n};\n\nexport type ChatTextFieldProps = {\n  defaultText?: string;\n};\n\nconst characterLimit = 300;\n\nexport const ChatTextField: FC<ChatTextFieldProps> = ({ defaultText }) => {\n  const [showEmojis, setShowEmojis] = useState(false);\n  const [characterCount, setCharacterCount] = useState(defaultText?.length);\n  const websocketService = useRecoilValue<WebsocketService>(websocketServiceAtom);\n  const editor = useMemo(() => withReact(withImages(createEditor())), []);\n\n  const defaultEditorValue: Descendant[] = [\n    {\n      type: 'paragraph',\n      children: [{ text: defaultText || '' }],\n    },\n  ];\n\n  const sendMessage = () => {\n    if (!websocketService) {\n      console.log('websocketService is not defined');\n      return;\n    }\n\n    const message = serialize(editor);\n    websocketService.send({ type: MessageType.CHAT, body: message });\n\n    // Clear the editor.\n    Transforms.delete(editor, {\n      at: {\n        anchor: Editor.start(editor, []),\n        focus: Editor.end(editor, []),\n      },\n    });\n    setCharacterCount(0);\n  };\n\n  const createImageNode = (alt, src, name): ImageNode => ({\n    type: 'image',\n    alt,\n    src,\n    name,\n    children: [{ text: '' }],\n  });\n\n  const insertImage = (url, name) => {\n    if (!url) return;\n\n    const { selection } = editor;\n    const image = createImageNode(name, url, name);\n\n    Transforms.insertNodes(editor, image, { select: true });\n\n    if (selection) {\n      const [parentNode, parentPath] = Editor.parent(editor, selection.focus?.path);\n\n      if (editor.isVoid(parentNode) || Node.string(parentNode).length) {\n        // Insert the new image node after the void node or a node with content\n        Transforms.insertNodes(editor, image, {\n          at: Path.next(parentPath),\n          select: true,\n        });\n      } else {\n        // If the node is empty, replace it instead\n        // Transforms.removeNodes(editor, { at: parentPath });\n        Transforms.insertNodes(editor, image, { at: parentPath, select: true });\n        Editor.normalize(editor, { force: true });\n      }\n    } else {\n      // Insert the new image node at the bottom of the Editor when selection\n      // is falsey\n      Transforms.insertNodes(editor, image, { select: true });\n    }\n  };\n\n  // Native emoji\n  const onEmojiSelect = (emoji: string) => {\n    ReactEditor.focus(editor);\n    Transforms.insertText(editor, emoji);\n  };\n\n  const onCustomEmojiSelect = (name: string, emoji: string) => {\n    ReactEditor.focus(editor);\n    insertImage(emoji, name);\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    const charCount = getCharacterCount(editor) + 1;\n\n    // Send the message when hitting enter.\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      sendMessage();\n      return;\n    }\n\n    // Always allow backspace.\n    if (e.key === 'Backspace') {\n      setCharacterCount(charCount - 1);\n      return;\n    }\n\n    // Limit the number of characters.\n    if (charCount + 1 > characterLimit) {\n      e.preventDefault();\n    }\n\n    setCharacterCount(charCount + 1);\n  };\n\n  const onPaste = (e: React.ClipboardEvent) => {\n    const text = e.clipboardData.getData('text/plain');\n\n    const { length } = text;\n    if (characterCount + length > characterLimit) {\n      e.preventDefault();\n    }\n  };\n\n  const renderElement = p => {\n    switch (p.element.type) {\n      case 'image':\n        return <Image {...p} />;\n      default:\n        return <p {...p} />;\n    }\n  };\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={classNames(\n          styles.inputWrap,\n          characterCount >= characterLimit && styles.maxCharacters,\n        )}\n      >\n        <Slate editor={editor} value={defaultEditorValue}>\n          <Editable\n            className=\"chat-text-input\"\n            onKeyDown={onKeyDown}\n            onPaste={onPaste}\n            renderElement={renderElement}\n            placeholder=\"Send a message to chat\"\n            style={{ width: '100%' }}\n            role=\"textbox\"\n            aria-label=\"Chat text input\"\n            autoFocus\n          />\n          <Popover\n            content={\n              <EmojiPicker\n                onEmojiSelect={onEmojiSelect}\n                onCustomEmojiSelect={onCustomEmojiSelect}\n              />\n            }\n            trigger=\"click\"\n            placement=\"topRight\"\n            onOpenChange={open => setShowEmojis(open)}\n            open={showEmojis}\n          />\n        </Slate>\n\n        <div style={{ display: 'flex', paddingLeft: '5px' }}>\n          <button\n            type=\"button\"\n            className={styles.emojiButton}\n            title=\"Emoji picker button\"\n            onClick={() => setShowEmojis(!showEmojis)}\n          >\n            <SmileOutlined />\n          </button>\n          <button\n            type=\"button\"\n            className={styles.sendButton}\n            title=\"Send message Button\"\n            onClick={sendMessage}\n          >\n            <SendOutlined />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","var _linearGradient, _path, _path2, _path3, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nvar SvgModerator = function SvgModerator(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 500,\n    viewBox: \"0 0 132.292 132.292\",\n    width: 500,\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _linearGradient || (_linearGradient = /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"moderator_svg__a\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 432.851,\n    x2: 464.644,\n    y1: 49.977,\n    y2: 49.977\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#2087e2\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#b63fff\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M438.672 34.08h20.151a5.82 5.82 45 0 1 5.82 5.821v20.151a5.82 5.82 135 0 1-5.82 5.821h-20.15a5.82 5.82 45 0 1-5.822-5.82V39.9a5.82 5.82 135 0 1 5.821-5.82z\",\n    fill: \"url(#moderator_svg__a)\",\n    transform: \"matrix(4.16112 0 0 4.16112 -1801.146 -141.814)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M121.11 29.551c-6.93 47.444-30.074 104.618-77.642 79.674l25.83 23.067h38.772c13.377 0 24.22-10.845 24.22-24.222V40.864z\",\n    fill: \"#1d1535\",\n    fillOpacity: 0.335\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.775 13.257s-7.129 57.999-.63 99.312c6.565 41.724-81.568-74.394-49.619-79.203 31.949-4.809 50.249-20.11 50.249-20.11z\",\n    fill: \"#e2e8f0\",\n    fillOpacity: 0.306\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M435.995 42.072c6.797.447 12.753-4.806 12.753-4.806s5.955 5.253 12.752 4.806c-.581 12.745-7.495 20.586-12.752 20.628-5.188.042-12.172-7.883-12.753-20.628z\",\n    fill: \"none\",\n    stroke: \"#fff\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    transform: \"matrix(4.16112 0 0 4.16112 -1801.146 -141.814)\"\n  })));\n};\nexport default SvgModerator;","import styles from './ChatModeratorNotification.module.scss';\nimport Icon from '../../../assets/images/moderator.svg';\n\nexport const ChatModeratorNotification = () => (\n  <div className={styles.chatModerationNotification}>\n    <Icon className={styles.icon} />\n    You are now a moderator.\n  </div>\n);\n","/* eslint-disable react/no-danger */\nimport { Highlight } from 'react-highlighter-ts';\nimport { FC } from 'react';\nimport cn from 'classnames';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport styles from './ChatSystemMessage.module.scss';\n\nexport type ChatSystemMessageProps = {\n  message: ChatMessage;\n  highlightString: string;\n};\n\nexport const ChatSystemMessage: FC<ChatSystemMessageProps> = ({\n  message: {\n    body,\n    user: { displayName },\n  },\n  highlightString,\n}) => (\n  <div className={cn([styles.chatSystemMessage, 'chat-message_system'])}>\n    <div className={styles.user}>\n      <span className={styles.userName}>{displayName}</span>\n    </div>\n    <Highlight search={highlightString}>\n      <div className={styles.message} dangerouslySetInnerHTML={{ __html: body }} />\n    </Highlight>\n  </div>\n);\n","import { FC } from 'react';\nimport { TeamOutlined } from '@ant-design/icons';\nimport { ChatUserBadge } from '../ChatUserBadge/ChatUserBadge';\nimport styles from './ChatJoinMessage.module.scss';\n\nexport type ChatJoinMessageProps = {\n  isAuthorModerator: boolean;\n  userColor: number;\n  displayName: string;\n};\n\nexport const ChatJoinMessage: FC<ChatJoinMessageProps> = ({\n  isAuthorModerator,\n  userColor,\n  displayName,\n}) => {\n  const color = `var(--theme-color-users-${userColor})`;\n\n  return (\n    <div className={styles.root}>\n      <span style={{ color }}>\n        <span style={{ padding: '0 10px' }}>\n          <TeamOutlined />\n        </span>\n        <span style={{ fontWeight: 'bold' }}>{displayName}</span>\n        {isAuthorModerator && (\n          <span>\n            <ChatUserBadge badge=\"mod\" userColor={userColor} />\n          </span>\n        )}\n      </span>{' '}\n      joined the chat.\n    </div>\n  );\n};\n","import { VerticalAlignBottomOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { FC, MutableRefObject } from 'react';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport styles from './ChatContainer.module.scss';\n\ntype Props = {\n  chatContainerRef: MutableRefObject<any>;\n  messages: ChatMessage[];\n};\n\nexport const ScrollToBotBtn: FC<Props> = ({ chatContainerRef, messages }) => (\n  <div className={styles.toBottomWrap}>\n    <Button\n      type=\"default\"\n      style={{ color: 'currentColor' }}\n      icon={<VerticalAlignBottomOutlined />}\n      onClick={() =>\n        chatContainerRef.current.scrollToIndex({\n          index: messages.length - 1,\n          behavior: 'auto',\n        })\n      }\n    >\n      Go to last message\n    </Button>\n  </div>\n);\n","import { FC } from 'react';\nimport styles from './ChatActionMessage.module.scss';\n\n/* eslint-disable react/no-danger */\nexport type ChatActionMessageProps = {\n  body: string;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const ChatActionMessage: FC<ChatActionMessageProps> = ({ body }) => (\n  <div dangerouslySetInnerHTML={{ __html: body }} className={styles.chatAction} />\n);\n","import { Virtuoso } from 'react-virtuoso';\nimport { useState, useMemo, useRef, CSSProperties, FC, useEffect } from 'react';\nimport { EditFilled } from '@ant-design/icons';\nimport {\n  ConnectedClientInfoEvent,\n  MessageType,\n  NameChangeEvent,\n} from '../../../interfaces/socket-events';\nimport styles from './ChatContainer.module.scss';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport { ChatUserMessage } from '../ChatUserMessage/ChatUserMessage';\nimport { ChatTextField } from '../ChatTextField/ChatTextField';\nimport { ChatModeratorNotification } from '../ChatModeratorNotification/ChatModeratorNotification';\n// import ChatActionMessage from '../ChatAction/ChatActionMessage';\nimport { ChatSystemMessage } from '../ChatSystemMessage/ChatSystemMessage';\nimport { ChatJoinMessage } from '../ChatJoinMessage/ChatJoinMessage';\nimport { ScrollToBotBtn } from './ScrollToBotBtn';\nimport { ChatActionMessage } from '../ChatActionMessage/ChatActionMessage';\n\nexport type ChatContainerProps = {\n  messages: ChatMessage[];\n  usernameToHighlight: string;\n  chatUserId: string;\n  isModerator: boolean;\n  showInput?: boolean;\n  height?: string;\n};\n\nfunction shouldCollapseMessages(messages: ChatMessage[], index: number): boolean {\n  if (messages.length < 2) {\n    return false;\n  }\n\n  const message = messages[index];\n  if (!message || !message.user) {\n    return false;\n  }\n\n  const {\n    user: { id },\n  } = message;\n  const lastMessage = messages[index - 1];\n  if (lastMessage?.type !== MessageType.CHAT) {\n    return false;\n  }\n\n  if (!lastMessage?.timestamp || !message.timestamp) {\n    return false;\n  }\n\n  const maxTimestampDelta = 1000 * 60 * 2; // 2 minutes\n  const lastTimestamp = new Date(lastMessage?.timestamp).getTime();\n  const thisTimestamp = new Date(message.timestamp).getTime();\n  if (thisTimestamp - lastTimestamp > maxTimestampDelta) {\n    return false;\n  }\n\n  return id === lastMessage?.user.id;\n}\n\nfunction checkIsModerator(message: ChatMessage | ConnectedClientInfoEvent) {\n  const {\n    user: { scopes },\n  } = message;\n\n  if (!scopes || scopes.length === 0) {\n    return false;\n  }\n\n  return scopes.includes('MODERATOR');\n}\n\nexport const ChatContainer: FC<ChatContainerProps> = ({\n  messages,\n  usernameToHighlight,\n  chatUserId,\n  isModerator,\n  showInput,\n  height,\n}) => {\n  const [atBottom, setAtBottom] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  const getNameChangeViewForMessage = (message: NameChangeEvent) => {\n    const { oldName, user } = message;\n    const { displayName, displayColor } = user;\n    const color = `var(--theme-color-users-${displayColor})`;\n\n    return (\n      <div className={styles.nameChangeView}>\n        <div style={{ marginRight: 5, height: 'max-content', margin: 'auto 5px auto 0' }}>\n          <EditFilled />\n        </div>\n        <div className={styles.nameChangeText}>\n          <span style={{ color }}>{oldName}</span>\n          <span className={styles.plain}> is now known as </span>\n          <span style={{ color }}>{displayName}</span>\n        </div>\n      </div>\n    );\n  };\n\n  const getUserJoinedMessage = (message: ChatMessage) => {\n    const {\n      user: { displayName, displayColor },\n    } = message;\n    const isAuthorModerator = checkIsModerator(message);\n    return (\n      <ChatJoinMessage\n        displayName={displayName}\n        userColor={displayColor}\n        isAuthorModerator={isAuthorModerator}\n      />\n    );\n  };\n\n  const getActionMessage = (message: ChatMessage) => {\n    const { body } = message;\n    return <ChatActionMessage body={body} />;\n  };\n  const getConnectedInfoMessage = (message: ConnectedClientInfoEvent) => {\n    const modStatusUpdate = checkIsModerator(message);\n    if (!modStatusUpdate) {\n      // Important note: We can't return null or an element with zero width\n      // or zero height. So to work around this we return a very small 1x1 div.\n      const st: CSSProperties = { width: '1px', height: '1px' };\n      return <div style={st} />;\n    }\n\n    // Alert the user that they are a moderator.\n    return <ChatModeratorNotification />;\n  };\n\n  const getViewForMessage = (\n    index: number,\n    message: ChatMessage | NameChangeEvent | ConnectedClientInfoEvent,\n  ) => {\n    switch (message.type) {\n      case MessageType.CHAT:\n        return (\n          <ChatUserMessage\n            message={message as ChatMessage}\n            showModeratorMenu={isModerator} // Moderators have access to an additional menu\n            highlightString={usernameToHighlight} // What to highlight in the message\n            sentBySelf={message.user?.id === chatUserId} // The local user sent this message\n            sameUserAsLast={shouldCollapseMessages(messages, index)}\n            isAuthorModerator={(message as ChatMessage).user.scopes?.includes('MODERATOR')}\n            isAuthorAuthenticated={message.user?.authenticated}\n            key={message.id}\n          />\n        );\n      case MessageType.NAME_CHANGE:\n        return getNameChangeViewForMessage(message as NameChangeEvent);\n      case MessageType.CONNECTED_USER_INFO:\n        return getConnectedInfoMessage(message);\n      case MessageType.USER_JOINED:\n        return getUserJoinedMessage(message as ChatMessage);\n      case MessageType.CHAT_ACTION:\n        return getActionMessage(message as ChatMessage);\n      case MessageType.SYSTEM:\n        return (\n          <ChatSystemMessage\n            message={message as ChatMessage}\n            highlightString={usernameToHighlight} // What to highlight in the message\n            key={message.id}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const scrollChatToBottom = (ref, behavior = 'smooth') => {\n    ref.current?.scrollToIndex({\n      index: messages.length - 1,\n      behavior,\n    });\n    setAtBottom(true);\n  };\n\n  // This is a hack to force a scroll to the very bottom of the chat messages\n  // on initial mount of the component.\n  // For https://github.com/owncast/owncast/issues/2500\n  useEffect(() => {\n    setTimeout(() => {\n      scrollChatToBottom(chatContainerRef, 'auto');\n    }, 500);\n  }, []);\n\n  const MessagesTable = useMemo(\n    () => (\n      <>\n        <Virtuoso\n          style={{ height }}\n          className={styles.virtuoso}\n          ref={chatContainerRef}\n          data={messages}\n          itemContent={(index, message) => getViewForMessage(index, message)}\n          followOutput={(isAtBottom: boolean) => {\n            if (isAtBottom) {\n              return 'smooth';\n            }\n            return false;\n          }}\n          alignToBottom\n          atBottomThreshold={50}\n          atBottomStateChange={bottom => {\n            setAtBottom(bottom);\n          }}\n        />\n        {!atBottom && <ScrollToBotBtn chatContainerRef={chatContainerRef} messages={messages} />}\n      </>\n    ),\n    [messages, usernameToHighlight, chatUserId, isModerator, atBottom],\n  );\n\n  return (\n    <div id=\"chat-container\" className={styles.chatContainer}>\n      {MessagesTable}\n      {showInput && (\n        <div className={styles.chatTextField}>\n          <ChatTextField />\n        </div>\n      )}\n    </div>\n  );\n};\n\nChatContainer.defaultProps = {\n  showInput: true,\n  height: 'auto',\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatAction\":\"ChatActionMessage_chatAction__x9Xsg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toBottomWrap\":\"ChatContainer_toBottomWrap__3V5wa\",\"nameChangeView\":\"ChatContainer_nameChangeView__ziyXN\",\"nameChangeText\":\"ChatContainer_nameChangeText__yXG__\",\"plain\":\"ChatContainer_plain__IPS19\",\"chatContainer\":\"ChatContainer_chatContainer__O2lYN\",\"virtuoso\":\"ChatContainer_virtuoso__OS9Kz\",\"chatTextField\":\"ChatContainer_chatTextField__OqCGL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatJoinMessage_root__vuVXa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatModerationNotification\":\"ChatModeratorNotification_chatModerationNotification__kgFWe\",\"icon\":\"ChatModeratorNotification_icon__7FdGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatSystemMessage\":\"ChatSystemMessage_chatSystemMessage__c6XEN\",\"user\":\"ChatSystemMessage_user__6yHSJ\",\"message\":\"ChatSystemMessage_message__ySq5g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatTextField_root__4oUkJ\",\"inputWrap\":\"ChatTextField_inputWrap__1mAjD\",\"maxCharacters\":\"ChatTextField_maxCharacters__yGT4s\",\"emojiButton\":\"ChatTextField_emojiButton__ON_Cu\",\"sendButton\":\"ChatTextField_sendButton__MOmD4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"ChatUserBadge_badge__1EdUp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatUserMessage_root__79heB\",\"user\":\"ChatUserMessage_user__xUEp9\",\"message\":\"ChatUserMessage_message__MJ9LD\",\"ownMessage\":\"ChatUserMessage_ownMessage__d28A3\",\"background\":\"ChatUserMessage_background__Tfghp\",\"modMenuWrapper\":\"ChatUserMessage_modMenuWrapper__7fblv\",\"messagePadding\":\"ChatUserMessage_messagePadding__Xp1F6\",\"messagePaddingCollapsed\":\"ChatUserMessage_messagePaddingCollapsed__qxN0E\"};"],"names":["formatTimestamp","sentAt","now","Date","Number","isNaN","getDiffInDaysFromNow","localeDate","toLocaleDateString","dateStyle","toLocaleTimeString","ChatUserBadge","badge","userColor","color","style","borderColor","span","className","styles","Tooltip","dynamic","then","mod","ssr","ChatModerationActionMenu","Highlight","UserTooltip","children","user","displayName","createdAt","content","title","placement","mouseEnterDelay","ChatUserMessage","message","highlightString","showModeratorMenu","sentBySelf","sameUserAsLast","isAuthorModerator","isAuthorAuthenticated","id","messageId","body","timestamp","userId","displayColor","accessToken","useRecoilValue","accessTokenAtom","formattedTimestamp","formattedMessage","setFormattedMessage","useState","badgeNodes","push","LinkOutlined","useEffect","decodeHTML","div","cn","search","dangerouslySetInnerHTML","__html","messageID","userID","userDisplayName","EmojiPicker","Image","p","attributes","element","selected","useSelected","focused","useFocused","contentEditable","img","alt","src","name","display","maxWidth","maxHeight","boxShadow","serialize","node","Text","text","length","map","n","join","type","getCharacterCount","count","forEach","child","ChatTextField","defaultText","showEmojis","setShowEmojis","characterCount","setCharacterCount","websocketService","websocketServiceAtom","editor","useMemo","withReact","isVoid","isInline","withImages","createEditor","defaultEditorValue","sendMessage","console","log","send","MessageType","Transforms","at","anchor","Editor","focus","classNames","Slate","value","Editable","onKeyDown","e","charCount","key","preventDefault","onPaste","clipboardData","getData","renderElement","placeholder","width","role","aria-label","autoFocus","Popover","onEmojiSelect","emoji","ReactEditor","onCustomEmojiSelect","url","selection","image","createImageNode","select","parentNode","parentPath","path","Node","Path","force","insertImage","trigger","onOpenChange","open","paddingLeft","button","onClick","SmileOutlined","SendOutlined","_linearGradient","_path","_path2","_path3","_path4","_extends","Object","assign","bind","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","props","height","viewBox","xmlns","gradientUnits","x1","x2","y1","y2","offset","stopColor","d","fill","transform","fillOpacity","stroke","strokeLinejoin","strokeWidth","ChatModeratorNotification","Icon","ChatSystemMessage","ChatJoinMessage","padding","TeamOutlined","fontWeight","ScrollToBotBtn","chatContainerRef","messages","Button","icon","VerticalAlignBottomOutlined","current","scrollToIndex","index","behavior","ChatActionMessage","shouldCollapseMessages","lastMessage","lastTimestamp","getTime","checkIsModerator","scopes","includes","ChatContainer","usernameToHighlight","chatUserId","isModerator","showInput","atBottom","setAtBottom","useRef","getViewForMessage","authenticated","oldName","marginRight","margin","EditFilled","getNameChangeViewForMessage","st","getConnectedInfoMessage","getUserJoinedMessage","getActionMessage","setTimeout","ref","scrollChatToBottom","MessagesTable","Virtuoso","data","itemContent","followOutput","isAtBottom","alignToBottom","atBottomThreshold","atBottomStateChange","bottom","defaultProps","module","exports"],"sourceRoot":""}