{"version":3,"file":"static/chunks/8645-0c475a1f506ca39d.js","mappings":"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","sources":["webpack://_N_E/./components/config/EditValueArray.tsx","webpack://_N_E/./components/config/ToggleSwitch.tsx","webpack://_N_E/./components/config/EditLogo.tsx","webpack://_N_E/./pages/admin/config/general/EditInstanceDetails.tsx","webpack://_N_E/./pages/admin/config/general/EditInstanceTags.tsx","webpack://_N_E/./pages/admin/config/general/EditPageContent.tsx","webpack://_N_E/./components/config/SocialDropdown.tsx","webpack://_N_E/./pages/admin/config/general/EditSocialLinks.tsx","webpack://_N_E/./pages/admin/config/general/GeneralConfig.tsx","webpack://_N_E/./utils/images.ts","webpack://_N_E/<anon>"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React, { FC, useState } from 'react';\nimport { Typography, Tag } from 'antd';\n\nimport { TextField } from './TextField';\nimport { UpdateArgs } from '../../types/config-section';\nimport { StatusState } from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const TAG_COLOR = '#5a67d8';\n\nexport type EditStringArrayProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  maxLength?: number;\n  values: string[];\n  submitStatus?: StatusState;\n  continuousStatusMessage?: StatusState;\n  handleDeleteIndex: (index: number) => void;\n  handleCreateString: (arg: string) => void;\n};\n\nexport const EditValueArray: FC<EditStringArrayProps> = ({\n  title,\n  description,\n  placeholder,\n  maxLength,\n  values,\n  handleDeleteIndex,\n  handleCreateString,\n  submitStatus,\n  continuousStatusMessage,\n}) => {\n  const [newStringInput, setNewStringInput] = useState<string>('');\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    setNewStringInput(value);\n  };\n\n  const handleSubmitNewString = () => {\n    const newString = newStringInput.trim();\n    handleCreateString(newString);\n    setNewStringInput('');\n  };\n\n  return (\n    <div className=\"edit-string-array-container\">\n      <Title level={3} className=\"section-title\">\n        {title}\n      </Title>\n      <p className=\"description\">{description}</p>\n\n      <div className=\"edit-current-strings\">\n        {values?.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteIndex(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n      {continuousStatusMessage && (\n        <div className=\"continuous-status-section\">\n          <FormStatusIndicator status={continuousStatusMessage} />\n        </div>\n      )}\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"string-input\"\n          value={newStringInput}\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewString}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nEditValueArray.defaultProps = {\n  maxLength: 50,\n  description: null,\n  submitStatus: null,\n  continuousStatusMessage: null,\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import { Button, Upload } from 'antd';\nimport { RcFile } from 'antd/lib/upload/interface';\nimport { LoadingOutlined, UploadOutlined } from '@ant-design/icons';\nimport React, { useState, useContext, FC } from 'react';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  TEXTFIELD_PROPS_LOGO,\n} from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { NEXT_PUBLIC_API_HOST } from '../../utils/apis';\n\nimport {\n  ACCEPTED_IMAGE_TYPES,\n  getBase64,\n  MAX_IMAGE_FILESIZE,\n  readableBytes,\n} from '../../utils/images';\n\nexport const EditLogo: FC = () => {\n  const [logoUrl, setlogoUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [logoCachedbuster, setLogoCacheBuster] = useState(0);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState, serverConfig } = serverStatusData || {};\n  const currentLogo = serverConfig?.instanceDetails?.logo;\n\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n  let resetTimer = null;\n\n  const { apiPath, tip } = TEXTFIELD_PROPS_LOGO;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  // validate file type and create base64 encoded img\n  const beforeUpload = (file: RcFile) => {\n    setLoading(true);\n\n    // eslint-disable-next-line consistent-return\n    return new Promise<void>((res, rej) => {\n      if (file.size > MAX_IMAGE_FILESIZE) {\n        const msg = `File size is too big: ${readableBytes(file.size)}`;\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setLoading(false);\n        // eslint-disable-next-line no-promise-executor-return\n        return rej();\n      }\n      if (!ACCEPTED_IMAGE_TYPES.includes(file.type)) {\n        const msg = `File type is not supported: ${file.type}`;\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setLoading(false);\n        // eslint-disable-next-line no-promise-executor-return\n        return rej();\n      }\n\n      getBase64(file, (url: string) => {\n        setlogoUrl(url);\n        setTimeout(() => res(), 100);\n      });\n    });\n  };\n\n  // Post new logo to api\n  const handleLogoUpdate = async () => {\n    if (logoUrl !== currentLogo) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: logoUrl },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName: 'logo', value: logoUrl, path: '' });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n          setLoading(false);\n          setLogoCacheBuster(Math.floor(Math.random() * 100)); // Force logo to re-load\n        },\n        onError: (msg: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n          setLoading(false);\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  const logoDisplayUrl = `${NEXT_PUBLIC_API_HOST}logo?random=${logoCachedbuster}`;\n\n  return (\n    <div className=\"formfield-container logo-upload-container\">\n      <div className=\"label-side\">\n        <span className=\"formfield-label\">Logo</span>\n      </div>\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <img src={logoDisplayUrl} alt=\"avatar\" className=\"logo-preview\" />\n          <Upload\n            name=\"logo\"\n            listType=\"picture\"\n            className=\"avatar-uploader\"\n            showUploadList={false}\n            accept={ACCEPTED_IMAGE_TYPES.join(',')}\n            beforeUpload={beforeUpload}\n            customRequest={handleLogoUpdate}\n            disabled={loading}\n          >\n            {loading ? (\n              <LoadingOutlined style={{ color: 'white' }} />\n            ) : (\n              <Button icon={<UploadOutlined />} />\n            )}\n          </Upload>\n        </div>\n        <FormStatusIndicator status={submitStatus} />\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Typography } from 'antd';\nimport {\n  TextFieldWithSubmit,\n  TEXTFIELD_TYPE_TEXTAREA,\n  TEXTFIELD_TYPE_URL,\n} from '../../../../components/config/TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  TEXTFIELD_PROPS_INSTANCE_URL,\n  TEXTFIELD_PROPS_SERVER_NAME,\n  TEXTFIELD_PROPS_SERVER_SUMMARY,\n  TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE,\n  API_YP_SWITCH,\n  FIELD_PROPS_YP,\n  FIELD_PROPS_NSFW,\n  FIELD_PROPS_HIDE_VIEWER_COUNT,\n} from '../../../../utils/config-constants';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport { ToggleSwitch } from '../../../../components/config/ToggleSwitch';\nimport { EditLogo } from '../../../../components/config/EditLogo';\n\nconst { Title } = Typography;\n\nexport default function EditInstanceDetails() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n\n  const { instanceDetails, yp } = serverConfig;\n  const { instanceUrl } = yp;\n\n  useEffect(() => {\n    setFormDataValues({\n      ...instanceDetails,\n      ...yp,\n    });\n  }, [instanceDetails, yp]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  // if instanceUrl is empty, we should also turn OFF the `enabled` field of directory.\n  const handleSubmitInstanceUrl = () => {\n    if (formDataValues.instanceUrl === '') {\n      if (yp.enabled === true) {\n        postConfigUpdateToAPI({\n          apiPath: API_YP_SWITCH,\n          data: { value: false },\n        });\n      }\n    }\n  };\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  function handleHideViewerCountChange(enabled: boolean) {\n    handleFieldChange({ fieldName: 'hideViewerCount', value: enabled });\n  }\n\n  const hasInstanceUrl = instanceUrl !== '';\n\n  return (\n    <div className=\"edit-general-settings\">\n      <Title level={3} className=\"section-title\">\n        Configure Instance Details\n      </Title>\n      <br />\n\n      <TextFieldWithSubmit\n        fieldName=\"name\"\n        {...TEXTFIELD_PROPS_SERVER_NAME}\n        value={formDataValues.name}\n        initialValue={instanceDetails.name}\n        onChange={handleFieldChange}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_INSTANCE_URL}\n        value={formDataValues.instanceUrl}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"summary\"\n        {...TEXTFIELD_PROPS_SERVER_SUMMARY}\n        type={TEXTFIELD_TYPE_TEXTAREA}\n        value={formDataValues.summary}\n        initialValue={instanceDetails.summary}\n        onChange={handleFieldChange}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"offlineMessage\"\n        {...TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE}\n        type={TEXTFIELD_TYPE_TEXTAREA}\n        value={formDataValues.offlineMessage}\n        initialValue={instanceDetails.offlineMessage}\n        onChange={handleFieldChange}\n      />\n\n      {/* Logo section */}\n      <EditLogo />\n\n      <ToggleSwitch\n        fieldName=\"hideViewerCount\"\n        useSubmit\n        {...FIELD_PROPS_HIDE_VIEWER_COUNT}\n        checked={formDataValues.hideViewerCount}\n        onChange={handleHideViewerCountChange}\n      />\n\n      <br />\n      <p className=\"description\">\n        Increase your audience by appearing in the{' '}\n        <a href=\"https://directory.owncast.online\" target=\"_blank\" rel=\"noreferrer\">\n          <strong>Owncast Directory</strong>\n        </a>\n        . This is an external service run by the Owncast project.{' '}\n        <a\n          href=\"https://owncast.online/docs/directory/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more\n        </a>\n        .\n      </p>\n      {!yp.instanceUrl && (\n        <p className=\"description\">\n          You must set your <strong>Server URL</strong> above to enable the directory.\n        </p>\n      )}\n\n      <div className=\"config-yp-container\">\n        <ToggleSwitch\n          fieldName=\"enabled\"\n          useSubmit\n          {...FIELD_PROPS_YP}\n          checked={formDataValues.enabled}\n          disabled={!hasInstanceUrl}\n        />\n        <ToggleSwitch\n          fieldName=\"nsfw\"\n          useSubmit\n          {...FIELD_PROPS_NSFW}\n          checked={formDataValues.nsfw}\n          disabled={!hasInstanceUrl}\n        />\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable react/no-array-index-key */\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Typography, Tag } from 'antd';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  FIELD_PROPS_TAGS,\n  RESET_TIMEOUT,\n  postConfigUpdateToAPI,\n} from '../../../../utils/config-constants';\nimport { TextField } from '../../../../components/config/TextField';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n  STATUS_WARNING,\n} from '../../../../utils/input-statuses';\nimport { TAG_COLOR } from '../../../../components/config/EditValueArray';\n\nconst { Title } = Typography;\n\nexport default function EditInstanceTags() {\n  const [newTagInput, setNewTagInput] = useState<string>('');\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { tags = [] } = instanceDetails;\n\n  const { apiPath, maxLength, placeholder, configPath } = FIELD_PROPS_TAGS;\n\n  let resetTimer = null;\n\n  useEffect(\n    () => () => {\n      clearTimeout(resetTimer);\n    },\n    [],\n  );\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  // posts all the tags at once as an array obj\n  const postUpdateToAPI = async (postValue: any) => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n    await postConfigUpdateToAPI({\n      apiPath,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({ fieldName: 'tags', value: postValue, path: configPath });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Tags updated.'));\n        setNewTagInput('');\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    if (!submitStatus) {\n      setSubmitStatus(null);\n    }\n    setNewTagInput(value);\n  };\n\n  // send to api and do stuff\n  const handleSubmitNewTag = () => {\n    resetStates();\n    const newTag = newTagInput.trim();\n    if (newTag === '') {\n      setSubmitStatus(createInputStatus(STATUS_WARNING, 'Please enter a tag'));\n      return;\n    }\n    if (tags.some(tag => tag.toLowerCase() === newTag.toLowerCase())) {\n      setSubmitStatus(createInputStatus(STATUS_WARNING, 'This tag is already used!'));\n      return;\n    }\n\n    const updatedTags = [...tags, newTag];\n    postUpdateToAPI(updatedTags);\n  };\n\n  const handleDeleteTag = index => {\n    resetStates();\n    const updatedTags = [...tags];\n    updatedTags.splice(index, 1);\n    postUpdateToAPI(updatedTags);\n  };\n\n  return (\n    <div className=\"tag-editor-container\">\n      <Title level={3} className=\"section-title\">\n        Add Tags\n      </Title>\n      <p className=\"description\">\n        This is a great way to categorize your Owncast server on the Directory!\n      </p>\n\n      <div className=\"edit-current-strings\">\n        {tags.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteTag(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"tag-input\"\n          value={newTagInput}\n          className=\"new-tag-input\"\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewTag}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n}\n","// EDIT CUSTOM DETAILS ON YOUR PAGE\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Typography, Button } from 'antd';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { bbedit } from '@uiw/codemirror-theme-bbedit';\nimport { markdown, markdownLanguage } from '@codemirror/lang-markdown';\nimport { languages } from '@codemirror/language-data';\n\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  API_CUSTOM_CONTENT,\n} from '../../../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../../../utils/input-statuses';\nimport { FormStatusIndicator } from '../../../../components/config/FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport default function EditPageContent() {\n  const [content, setContent] = useState('');\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { extraPageContent: initialContent } = instanceDetails;\n\n  let resetTimer = null;\n\n  function handleEditorChange(text) {\n    setContent(text);\n    if (text !== initialContent && !hasChanged) {\n      setHasChanged(true);\n    } else if (text === initialContent && hasChanged) {\n      setHasChanged(false);\n    }\n  }\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  // posts all the tags at once as an array obj\n  async function handleSave() {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    await postConfigUpdateToAPI({\n      apiPath: API_CUSTOM_CONTENT,\n      data: { value: content },\n      onSuccess: (message: string) => {\n        setFieldInConfigState({\n          fieldName: 'extraPageContent',\n          value: content,\n          path: 'instanceDetails',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, message));\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n      },\n    });\n    resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n  }\n\n  useEffect(() => {\n    setContent(initialContent);\n  }, [instanceDetails]);\n\n  return (\n    <div className=\"edit-page-content\">\n      <Title level={3} className=\"section-title\">\n        Custom Page Content\n      </Title>\n\n      <p className=\"description\">\n        Edit the content of your page by using simple{' '}\n        <a\n          href=\"https://www.markdownguide.org/basic-syntax/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Markdown syntax\n        </a>\n        .\n      </p>\n\n      <CodeMirror\n        value={content}\n        placeholder=\"Enter your custom page content here...\"\n        theme={bbedit}\n        onChange={handleEditorChange}\n        extensions={[markdown({ base: markdownLanguage, codeLanguages: languages })]}\n      />\n\n      <br />\n      <div className=\"page-content-actions\">\n        {hasChanged && (\n          <Button type=\"primary\" onClick={handleSave}>\n            Save\n          </Button>\n        )}\n        <FormStatusIndicator status={submitStatus} />\n      </div>\n    </div>\n  );\n}\n","import React, { FC } from 'react';\nimport { Select } from 'antd';\nimport { SocialHandleDropdownItem } from '../../types/config-section';\nimport { OTHER_SOCIAL_HANDLE_OPTION } from '../../utils/config-constants';\n\nexport type DropdownProps = {\n  iconList: SocialHandleDropdownItem[];\n  selectedOption: string;\n  onSelected: any;\n};\n\nexport const SocialDropdown: FC<DropdownProps> = ({ iconList, selectedOption, onSelected }) => {\n  const handleSelected = (value: string) => {\n    if (onSelected) {\n      onSelected(value);\n    }\n  };\n  const inititalSelected = selectedOption === '' ? null : selectedOption;\n  return (\n    <div className=\"social-dropdown-container\">\n      <p className=\"description\">\n        If you are looking for a platform name not on this list, please select Other and type in\n        your own name. A logo will not be provided.\n      </p>\n\n      <div className=\"formfield-container\">\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">Social Platform</span>\n        </div>\n        <div className=\"input-side\">\n          <Select\n            style={{ width: 240 }}\n            className=\"social-dropdown\"\n            placeholder=\"Social platform...\"\n            defaultValue={inititalSelected}\n            value={inititalSelected}\n            onSelect={handleSelected}\n          >\n            {iconList.map(item => {\n              const { platform, icon, key } = item;\n\n              return (\n                <Select.Option className=\"social-option\" key={`platform-${key}`} value={key}>\n                  <span className=\"option-icon\">\n                    <img src={icon} alt=\"\" className=\"option-icon\" />\n                  </span>\n                  <span className=\"option-label\">{platform}</span>\n                </Select.Option>\n              );\n            })}\n            <Select.Option\n              className=\"social-option\"\n              key={`platform-${OTHER_SOCIAL_HANDLE_OPTION}`}\n              value={OTHER_SOCIAL_HANDLE_OPTION}\n            >\n              Other...\n            </Select.Option>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Typography, Table, Button, Modal, Input } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { CaretDownOutlined, CaretUpOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { SocialDropdown } from '../../../../components/config/SocialDropdown';\nimport { fetchData, SOCIAL_PLATFORMS_LIST } from '../../../../utils/apis';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  API_SOCIAL_HANDLES,\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  DEFAULT_SOCIAL_HANDLE,\n  OTHER_SOCIAL_HANDLE_OPTION,\n} from '../../../../utils/config-constants';\nimport { SocialHandle, UpdateArgs } from '../../../../types/config-section';\nimport {\n  isValidMatrixAccount,\n  isValidAccount,\n  isValidUrl,\n  DEFAULT_TEXTFIELD_URL_PATTERN,\n} from '../../../../utils/urls';\nimport { TextField } from '../../../../components/config/TextField';\nimport { createInputStatus, STATUS_ERROR, STATUS_SUCCESS } from '../../../../utils/input-statuses';\nimport { FormStatusIndicator } from '../../../../components/config/FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport default function EditSocialLinks() {\n  const [availableIconsList, setAvailableIconsList] = useState([]);\n  const [currentSocialHandles, setCurrentSocialHandles] = useState([]);\n\n  const [displayModal, setDisplayModal] = useState(false);\n  const [displayOther, setDisplayOther] = useState(false);\n  const [modalProcessing, setModalProcessing] = useState(false);\n  const [editId, setEditId] = useState(-1);\n\n  // current data inside modal\n  const [modalDataState, setModalDataState] = useState(DEFAULT_SOCIAL_HANDLE);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { socialHandles: initialSocialHandles } = instanceDetails;\n\n  let resetTimer = null;\n\n  const PLACEHOLDERS = {\n    mastodon: 'https://mastodon.social/@username',\n    twitter: 'https://twitter.com/username',\n  };\n\n  const getAvailableIcons = async () => {\n    try {\n      const result = await fetchData(SOCIAL_PLATFORMS_LIST, { auth: false });\n      const list = Object.keys(result).map(item => ({\n        key: item,\n        ...result[item],\n      }));\n      setAvailableIconsList(list);\n    } catch (error) {\n      console.log(error);\n      //  do nothing\n    }\n  };\n\n  const isPredefinedSocial = (platform: string) =>\n    availableIconsList.find(item => item.key === platform) || false;\n\n  const selectedOther =\n    modalDataState.platform !== '' &&\n    !availableIconsList.find(item => item.key === modalDataState.platform);\n\n  useEffect(() => {\n    getAvailableIcons();\n  }, []);\n\n  useEffect(() => {\n    if (instanceDetails.socialHandles) {\n      setCurrentSocialHandles(initialSocialHandles);\n    }\n  }, [instanceDetails]);\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n  const resetModal = () => {\n    setDisplayModal(false);\n    setEditId(-1);\n    setDisplayOther(false);\n    setModalProcessing(false);\n    setModalDataState({ ...DEFAULT_SOCIAL_HANDLE });\n  };\n\n  const handleModalCancel = () => {\n    resetModal();\n  };\n\n  const updateModalState = (fieldName: string, value: string) => {\n    setModalDataState({\n      ...modalDataState,\n      [fieldName]: value,\n    });\n  };\n  const handleDropdownSelect = (value: string) => {\n    if (value === OTHER_SOCIAL_HANDLE_OPTION) {\n      setDisplayOther(true);\n      updateModalState('platform', '');\n    } else {\n      setDisplayOther(false);\n      updateModalState('platform', value);\n    }\n  };\n  const handleOtherNameChange = event => {\n    const { value } = event.target;\n    updateModalState('platform', value);\n  };\n\n  const handleUrlChange = ({ value }: UpdateArgs) => {\n    updateModalState('url', value);\n  };\n\n  // posts all the variants at once as an array obj\n  const postUpdateToAPI = async (postValue: any) => {\n    await postConfigUpdateToAPI({\n      apiPath: API_SOCIAL_HANDLES,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'socialHandles',\n          value: postValue,\n          path: 'instanceDetails',\n        });\n\n        // close modal\n        setModalProcessing(false);\n        handleModalCancel();\n\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        setModalProcessing(false);\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // on Ok, send all of dataState to api\n  // show loading\n  // close modal when api is done\n  const handleModalOk = () => {\n    setModalProcessing(true);\n    const postData = currentSocialHandles.length ? [...currentSocialHandles] : [];\n    if (editId === -1) {\n      postData.push(modalDataState);\n    } else {\n      postData.splice(editId, 1, modalDataState);\n    }\n    postUpdateToAPI(postData);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const postData = [...currentSocialHandles];\n    postData.splice(index, 1);\n    postUpdateToAPI(postData);\n  };\n\n  const handleMoveItemUp = (index: number) => {\n    if (index <= 0 || index >= currentSocialHandles.length) {\n      return;\n    }\n    const postData = [...currentSocialHandles];\n    const tmp = postData[index - 1];\n    postData[index - 1] = postData[index];\n    postData[index] = tmp;\n    postUpdateToAPI(postData);\n  };\n\n  const handleMoveItemDown = (index: number) => {\n    if (index < 0 || index >= currentSocialHandles.length - 1) {\n      return;\n    }\n    const postData = [...currentSocialHandles];\n    const tmp = postData[index + 1];\n    postData[index + 1] = postData[index];\n    postData[index] = tmp;\n    postUpdateToAPI(postData);\n  };\n\n  const socialHandlesColumns: ColumnsType<SocialHandle> = [\n    {\n      title: 'Social Link',\n      dataIndex: '',\n      key: 'combo',\n      render: (data, record) => {\n        const { platform, url } = record;\n        const platformInfo = isPredefinedSocial(platform);\n\n        // custom platform case\n        if (!platformInfo) {\n          return (\n            <div className=\"social-handle-cell\">\n              <p className=\"option-label\">\n                <strong>{platform}</strong>\n                <span className=\"handle-url\" title={url}>\n                  {url}\n                </span>\n              </p>\n            </div>\n          );\n        }\n        const { icon, platform: platformName } = platformInfo;\n        return (\n          <div className=\"social-handle-cell\">\n            <span className=\"option-icon\">\n              <img src={icon} alt=\"\" className=\"option-icon\" />\n            </span>\n            <p className=\"option-label\">\n              <strong>{platformName}</strong>\n              <span className=\"handle-url\" title={url}>\n                {url}\n              </span>\n            </p>\n          </div>\n        );\n      },\n    },\n    {\n      title: '',\n      dataIndex: '',\n      key: 'edit',\n      render: (data, record, index) => (\n        <div className=\"actions\">\n          <Button\n            size=\"small\"\n            onClick={() => {\n              const platformInfo = currentSocialHandles[index];\n              setEditId(index);\n              setModalDataState({ ...platformInfo });\n              setDisplayModal(true);\n              if (!isPredefinedSocial(platformInfo.platform)) {\n                setDisplayOther(true);\n              }\n            }}\n          >\n            Edit\n          </Button>\n          <Button\n            icon={<CaretUpOutlined />}\n            size=\"small\"\n            hidden={index === 0}\n            onClick={() => handleMoveItemUp(index)}\n          />\n          <Button\n            icon={<CaretDownOutlined />}\n            size=\"small\"\n            hidden={index === currentSocialHandles.length - 1}\n            onClick={() => handleMoveItemDown(index)}\n          />\n          <Button\n            className=\"delete-button\"\n            icon={<DeleteOutlined />}\n            size=\"small\"\n            onClick={() => handleDeleteItem(index)}\n          />\n        </div>\n      ),\n    },\n  ];\n\n  const isValid = (url: string, platform: string) => {\n    if (platform === 'xmpp') {\n      return isValidAccount(url, 'xmpp');\n    }\n    if (platform === 'matrix') {\n      return isValidMatrixAccount(url);\n    }\n\n    return isValidUrl(url);\n  };\n\n  const okButtonProps = {\n    disabled: !isValid(modalDataState.url, modalDataState.platform),\n  };\n\n  const otherField = (\n    <div className=\"other-field-container formfield-container\">\n      <div className=\"label-side\" />\n      <div className=\"input-side\">\n        <Input\n          placeholder=\"Other platform name\"\n          defaultValue={modalDataState.platform}\n          onChange={handleOtherNameChange}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"social-links-edit-container\">\n      <Title level={3} className=\"section-title\">\n        Your Social Handles\n      </Title>\n      <p className=\"description\">\n        Add all your social media handles and links to your other profiles here.\n      </p>\n\n      <FormStatusIndicator status={submitStatus} />\n\n      <Table\n        className=\"social-handles-table\"\n        pagination={false}\n        size=\"small\"\n        rowKey={record => `${record.platform}-${record.url}`}\n        columns={socialHandlesColumns}\n        dataSource={currentSocialHandles}\n      />\n\n      <Modal\n        title=\"Edit Social Handle\"\n        open={displayModal}\n        onOk={handleModalOk}\n        onCancel={handleModalCancel}\n        confirmLoading={modalProcessing}\n        okButtonProps={okButtonProps}\n      >\n        <div className=\"social-handle-modal-content\">\n          <SocialDropdown\n            iconList={availableIconsList}\n            selectedOption={selectedOther ? OTHER_SOCIAL_HANDLE_OPTION : modalDataState.platform}\n            onSelected={handleDropdownSelect}\n          />\n          {displayOther && otherField}\n          <br />\n          <TextField\n            fieldName=\"social-url\"\n            label=\"URL\"\n            placeholder={PLACEHOLDERS[modalDataState.platform] || 'Url to page'}\n            value={modalDataState.url}\n            onChange={handleUrlChange}\n            useTrim\n            type=\"url\"\n            pattern={DEFAULT_TEXTFIELD_URL_PATTERN}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n      </Modal>\n      <br />\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          resetModal();\n          setDisplayModal(true);\n        }}\n      >\n        Add a new social link\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport EditInstanceDetails from './EditInstanceDetails';\nimport EditInstanceTags from './EditInstanceTags';\nimport EditSocialLinks from './EditSocialLinks';\nimport EditPageContent from './EditPageContent';\n\nexport default function PublicFacingDetails() {\n  return (\n    <div className=\"config-public-details-page\">\n      <p className=\"description\">\n        The following are displayed on your site to describe your stream and its content.{' '}\n        <a\n          href=\"https://owncast.online/docs/website/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more.\n        </a>\n      </p>\n\n      <div className=\"top-container\">\n        <div className=\"form-module instance-details-container\">\n          <EditInstanceDetails />\n        </div>\n\n        <div className=\"form-module social-items-container \">\n          <div className=\"form-module tags-module\">\n            <EditInstanceTags />\n          </div>\n\n          <div className=\"form-module social-handles-container\">\n            <EditSocialLinks />\n          </div>\n        </div>\n      </div>\n      <div className=\"form-module page-content-module\">\n        <EditPageContent />\n      </div>\n    </div>\n  );\n}\n","export const MAX_IMAGE_FILESIZE = 2097152;\nexport const ACCEPTED_IMAGE_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\n\nexport function getBase64(img: File | Blob, callback: (imageUrl: string | ArrayBuffer) => void) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nexport function readableBytes(bytes: number): string {\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  const SIZE_UNITS = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const size = Number((bytes / Math.pow(1024, index)).toFixed(2)) * 1;\n\n  return `${size} ${SIZE_UNITS[index]}`;\n}\n"],"names":["Title","Typography","TAG_COLOR","EditValueArray","title","description","placeholder","maxLength","values","handleDeleteIndex","handleCreateString","submitStatus","continuousStatusMessage","param","newStringInput","setNewStringInput","useState","handleInputChange","value","handleSubmitNewString","newString","trim","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","level","p","map","tag","index","handleClose","Tag","closable","onClose","color","concat","FormStatusIndicator","status","TextField","fieldName","onChange","onPressEnter","defaultProps","ToggleSwitch","apiPath","checked","reversed","configPath","disabled","label","tip","useSubmit","setSubmitStatus","resetTimer","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetStates","clearTimeout","handleChange","isChecked","createInputStatus","STATUS_PROCESSING","isCheckedSend","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","message","setTimeout","RESET_TIMEOUT","loading","type","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","EditLogo","serverConfig","logoUrl","setlogoUrl","setLoading","logoCachedbuster","setLogoCacheBuster","currentLogo","instanceDetails","logo","TEXTFIELD_PROPS_LOGO","beforeUpload","Promise","res","rej","file","size","MAX_IMAGE_FILESIZE","msg","readableBytes","ACCEPTED_IMAGE_TYPES","getBase64","url","handleLogoUpdate","Math","floor","random","logoDisplayUrl","NEXT_PUBLIC_API_HOST","jsx_runtime","img","src","alt","Upload","name","listType","showUploadList","accept","customRequest","LoadingOutlined","style","Button","icon","UploadOutlined","EditInstanceDetails","formDataValues","setFormDataValues","yp","instanceUrl","useEffect","handleSubmitInstanceUrl","enabled","API_YP_SWITCH","handleFieldChange","hasInstanceUrl","br","TextFieldWithSubmit","TEXTFIELD_PROPS_SERVER_NAME","initialValue","TEXTFIELD_PROPS_INSTANCE_URL","TEXTFIELD_TYPE_URL","onSubmit","TEXTFIELD_PROPS_SERVER_SUMMARY","TEXTFIELD_TYPE_TEXTAREA","summary","TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE","offlineMessage","FIELD_PROPS_HIDE_VIEWER_COUNT","hideViewerCount","a","href","target","rel","strong","FIELD_PROPS_YP","FIELD_PROPS_NSFW","nsfw","EditInstanceTags","newTagInput","setNewTagInput","tags","FIELD_PROPS_TAGS","postUpdateToAPI","postValue","handleSubmitNewTag","newTag","STATUS_WARNING","some","toLowerCase","updatedTags","handleDeleteTag","splice","EditPageContent","content","setContent","hasChanged","setHasChanged","extraPageContent","initialContent","handleSave","API_CUSTOM_CONTENT","CodeMirror","theme","bbedit","text","extensions","markdown","base","markdownLanguage","codeLanguages","languages","onClick","SocialDropdown","iconList","selectedOption","onSelected","handleSelected","inititalSelected","Select","width","defaultValue","onSelect","item","platform","key","OTHER_SOCIAL_HANDLE_OPTION","EditSocialLinks","availableIconsList","setAvailableIconsList","currentSocialHandles","setCurrentSocialHandles","displayModal","setDisplayModal","displayOther","setDisplayOther","modalProcessing","setModalProcessing","editId","setEditId","modalDataState","setModalDataState","DEFAULT_SOCIAL_HANDLE","socialHandles","initialSocialHandles","getAvailableIcons","result","fetchData","SOCIAL_PLATFORMS_LIST","auth","list","Object","keys","error","console","log","isPredefinedSocial","find","selectedOther","resetModal","handleModalCancel","updateModalState","handleDropdownSelect","handleOtherNameChange","event","handleUrlChange","API_SOCIAL_HANDLES","handleModalOk","postData","length","push","handleDeleteItem","handleMoveItemUp","tmp","handleMoveItemDown","okButtonProps","isValidAccount","isValidMatrixAccount","isValidUrl","otherField","Input","Table","pagination","rowKey","record","columns","dataIndex","render","platformInfo","platformName","CaretUpOutlined","hidden","CaretDownOutlined","DeleteOutlined","dataSource","Modal","open","onOk","onCancel","confirmLoading","PLACEHOLDERS","mastodon","twitter","useTrim","pattern","DEFAULT_TEXTFIELD_URL_PATTERN","PublicFacingDetails","callback","reader","FileReader","addEventListener","readAsDataURL","bytes","Number","pow","toFixed","SIZE_UNITS"],"sourceRoot":""}