{"version":3,"file":"static/chunks/pages/admin/actions-a6ff9dd0af70a2d3.js","mappings":"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","sources":["webpack://_N_E/?0727","webpack://_N_E/./pages/admin/actions.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/actions\",\n      function () {\n        return require(\"private-next-pages/admin/actions.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/actions\"])\n      });\n    }\n  ","import { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { Button, Checkbox, Form, Input, Modal, Space, Table, Typography } from 'antd';\nimport _ from 'lodash';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { FormStatusIndicator } from '../../components/admin/FormStatusIndicator';\nimport { ExternalAction } from '../../interfaces/external-action';\nimport {\n  API_EXTERNAL_ACTIONS,\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n} from '../../utils/config-constants';\nimport { createInputStatus, STATUS_ERROR, STATUS_SUCCESS } from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { isValidUrl, DEFAULT_TEXTFIELD_URL_PATTERN } from '../../utils/urls';\n\nconst { Title, Paragraph } = Typography;\nlet resetTimer = null;\n\ninterface Props {\n  onCancel: () => void;\n  onOk: (\n    oldAction: ExternalAction | null,\n    actionUrl: string,\n    actionTitle: string,\n    actionDescription: string,\n    actionIcon: string,\n    actionColor: string,\n    openExternally: boolean,\n  ) => void;\n  open: boolean;\n  action: ExternalAction | null;\n}\n\nconst ActionModal = (props: Props) => {\n  const { onOk, onCancel, open, action } = props;\n\n  const [actionUrl, setActionUrl] = useState('');\n  const [actionTitle, setActionTitle] = useState('');\n  const [actionDescription, setActionDescription] = useState('');\n  const [actionIcon, setActionIcon] = useState('');\n  const [actionColor, setActionColor] = useState('');\n  const [openExternally, setOpenExternally] = useState(false);\n\n  useEffect(() => {\n    setActionUrl(action?.url || '');\n    setActionTitle(action?.title || '');\n    setActionDescription(action?.description || '');\n    setActionIcon(action?.icon || '');\n    setActionColor(action?.color || '');\n    setOpenExternally(action?.openExternally || false);\n  }, [action]);\n\n  function save() {\n    onOk(\n      action,\n      actionUrl,\n      actionTitle,\n      actionDescription,\n      actionIcon,\n      actionColor,\n      openExternally,\n    );\n    setActionUrl('');\n    setActionTitle('');\n    setActionDescription('');\n    setActionIcon('');\n    setActionColor('');\n    setOpenExternally(false);\n  }\n\n  function canSave(): Boolean {\n    return isValidUrl(actionUrl, ['https:']) && actionTitle !== '';\n  }\n\n  const okButtonProps = {\n    disabled: !canSave(),\n  };\n\n  const onOpenExternallyChanged = checkbox => {\n    setOpenExternally(checkbox.target.checked);\n  };\n\n  return (\n    <Modal\n      destroyOnClose\n      title={action == null ? 'Create New Action' : 'Edit Action'}\n      open={open}\n      onOk={save}\n      onCancel={onCancel}\n      okButtonProps={okButtonProps}\n    >\n      <Form initialValues={action}>\n        Add the URL for the external action you want to present.{' '}\n        <strong>Only HTTPS urls are supported.</strong>\n        <p>\n          <a\n            href=\"https://owncast.online/thirdparty/actions/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Read more about external actions.\n          </a>\n        </p>\n        <Form.Item name=\"url\">\n          <Input\n            required\n            placeholder=\"https://myserver.com/action (required)\"\n            onChange={input => setActionUrl(input.currentTarget.value.trim())}\n            type=\"url\"\n            pattern={DEFAULT_TEXTFIELD_URL_PATTERN}\n          />\n        </Form.Item>\n        <Form.Item name=\"title\">\n          <Input\n            value={actionTitle}\n            required\n            placeholder=\"Your action title (required)\"\n            onChange={input => setActionTitle(input.currentTarget.value)}\n          />\n        </Form.Item>\n        <Form.Item name=\"description\">\n          <Input\n            value={actionDescription}\n            placeholder=\"Optional description\"\n            onChange={input => setActionDescription(input.currentTarget.value)}\n          />\n        </Form.Item>\n        <Form.Item name=\"icon\">\n          <Input\n            value={actionIcon}\n            placeholder=\"https://myserver.com/action/icon.png (optional)\"\n            onChange={input => setActionIcon(input.currentTarget.value)}\n          />\n        </Form.Item>\n        <div>\n          <Form.Item name=\"color\" style={{ marginBottom: '0px' }}>\n            <Input\n              type=\"color\"\n              value={actionColor}\n              onChange={input => setActionColor(input.currentTarget.value)}\n            />\n          </Form.Item>\n          Optional background color of the action button.\n        </div>\n        <Form.Item name=\"openExternally\">\n          <Checkbox\n            checked={openExternally}\n            defaultChecked={openExternally}\n            onChange={onOpenExternallyChanged}\n          >\n            Open in a new tab instead of within your page.\n          </Checkbox>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst Actions = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { externalActions } = serverConfig;\n  const [actions, setActions] = useState<ExternalAction[]>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [submitStatus, setSubmitStatus] = useState(null);\n  const [editAction, setEditAction] = useState<ExternalAction>(null);\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  useEffect(() => {\n    setActions(externalActions || []);\n  }, [externalActions]);\n\n  async function save(actionsData) {\n    await postConfigUpdateToAPI({\n      apiPath: API_EXTERNAL_ACTIONS,\n      data: { value: actionsData },\n      onSuccess: () => {\n        setFieldInConfigState({ fieldName: 'externalActions', value: actionsData, path: '' });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        console.log(message);\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  }\n\n  async function handleDelete(action) {\n    const actionsData = [...actions];\n    const index = actions.findIndex(item => item.url === action.url);\n    actionsData.splice(index, 1);\n\n    try {\n      setActions(actionsData);\n      save(actionsData);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function handleSave(\n    oldAction: ExternalAction | null,\n    url: string,\n    title: string,\n    description: string,\n    icon: string,\n    color: string,\n    openExternally: boolean,\n  ) {\n    try {\n      const actionsData = [...actions];\n\n      const newAction: ExternalAction = {\n        url,\n        title,\n        description,\n        icon,\n        color,\n        openExternally,\n      };\n\n      // Replace old action if edited or append the new action\n      const index = oldAction ? actions.findIndex(item => _.isEqual(item, oldAction)) : -1;\n      if (index >= 0) {\n        actionsData[index] = newAction;\n      } else {\n        actionsData.push(newAction);\n      }\n\n      setActions(actionsData);\n      await save(actionsData);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function handleEdit(action: ExternalAction) {\n    setEditAction(action);\n    setIsModalOpen(true);\n  }\n\n  const showCreateModal = () => {\n    setEditAction(null);\n    setIsModalOpen(true);\n  };\n\n  const handleModalSaveButton = (\n    oldAction: ExternalAction | null,\n    actionUrl: string,\n    actionTitle: string,\n    actionDescription: string,\n    actionIcon: string,\n    actionColor: string,\n    openExternally: boolean,\n  ) => {\n    setIsModalOpen(false);\n    handleSave(\n      oldAction,\n      actionUrl,\n      actionTitle,\n      actionDescription,\n      actionIcon,\n      actionColor,\n      openExternally,\n    );\n    setEditAction(null);\n  };\n\n  const handleModalCancelButton = () => {\n    setIsModalOpen(false);\n  };\n\n  const columns = [\n    {\n      title: '',\n      key: 'delete-edit',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button onClick={() => handleDelete(record)} icon={<DeleteOutlined />} />\n          <Button onClick={() => handleEdit(record)} icon={<EditOutlined />} />\n        </Space>\n      ),\n    },\n    {\n      title: 'Name',\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n    },\n    {\n      title: 'URL',\n      dataIndex: 'url',\n      key: 'url',\n    },\n    {\n      title: 'Icon',\n      dataIndex: 'icon',\n      key: 'icon',\n      render: (url: string) => (url ? <img style={{ width: '2vw' }} src={url} alt=\"\" /> : null),\n    },\n    {\n      title: 'Color',\n      dataIndex: 'color',\n      key: 'color',\n      render: (color: string) =>\n        color ? <div style={{ backgroundColor: color, height: '30px' }}>{color}</div> : null,\n    },\n    {\n      title: 'Opens',\n      dataIndex: 'openExternally',\n      key: 'openExternally',\n      render: (openExternally: boolean) => (openExternally ? 'In a new tab' : 'In a modal'),\n    },\n  ];\n\n  return (\n    <div>\n      <Title>External Actions</Title>\n      <Paragraph>\n        External action URLs are 3rd party UI you can display, embedded, into your Owncast page when\n        a user clicks on a button to launch your action.\n      </Paragraph>\n      <Paragraph>\n        Read more about how to use actions, with examples, at{' '}\n        <a\n          href=\"https://owncast.online/thirdparty/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          our documentation\n        </a>\n        .\n      </Paragraph>\n\n      <Table\n        rowKey={record => `${record.title}-${record.url}`}\n        columns={columns}\n        dataSource={actions}\n        pagination={false}\n      />\n      <br />\n      <Button type=\"primary\" onClick={showCreateModal}>\n        Create New Action\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n\n      <ActionModal\n        action={editAction}\n        open={isModalOpen}\n        onOk={handleModalSaveButton}\n        onCancel={handleModalCancelButton}\n      />\n    </div>\n  );\n};\nexport default Actions;\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","Title","Paragraph","Typography","resetTimer","ActionModal","props","onOk","onCancel","open","action","actionUrl","setActionUrl","useState","actionTitle","setActionTitle","actionDescription","setActionDescription","actionIcon","setActionIcon","actionColor","setActionColor","openExternally","setOpenExternally","useEffect","url","title","description","icon","color","okButtonProps","disabled","isValidUrl","Modal","destroyOnClose","Form","initialValues","strong","p","a","href","target","rel","name","Input","required","placeholder","onChange","input","currentTarget","value","trim","type","pattern","DEFAULT_TEXTFIELD_URL_PATTERN","div","style","marginBottom","Checkbox","checked","defaultChecked","checkbox","serverStatusData","useContext","ServerStatusContext","serverConfig","setFieldInConfigState","externalActions","actions","setActions","isModalOpen","setIsModalOpen","submitStatus","setSubmitStatus","editAction","setEditAction","resetStates","clearTimeout","async","save","actionsData","postConfigUpdateToAPI","apiPath","API_EXTERNAL_ACTIONS","data","onSuccess","fieldName","path","createInputStatus","STATUS_SUCCESS","setTimeout","RESET_TIMEOUT","onError","message","console","log","STATUS_ERROR","columns","key","render","text","record","Space","size","Button","onClick","index","findIndex","item","splice","error","handleDelete","DeleteOutlined","handleEdit","EditOutlined","dataIndex","img","width","src","alt","backgroundColor","height","Table","rowKey","dataSource","pagination","br","FormStatusIndicator","status","oldAction","newAction","_","handleSave","STATUS_INVALID","STATUS_PROCESSING","STATUS_WARNING","INPUT_STATES","CheckCircleFilled","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","instanceDetails","customStyles","extraPageContent","logo","nsfw","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","enabled","endpoint","region","secret","servingEndpoint","forcePathStyle","yp","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","args","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","result","fetchData","STATUS","getStatusIntervalId","setInterval","FETCH_INTERVAL","SERVER_CONFIG","getConfig","clearInterval","providerValue","updatedConfig","Provider","propTypes","PropTypes"],"sourceRoot":""}