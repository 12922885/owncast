{"version":3,"file":"static/chunks/pages/admin/config-social-items-65285b43105a152e.js","mappings":"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","sources":["webpack://_N_E/?8894","webpack://_N_E/./components/admin/SocialDropdown.tsx","webpack://_N_E/./components/admin/config/general/EditSocialLinks.tsx","webpack://_N_E/./pages/admin/config-social-items.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config-social-items\",\n      function () {\n        return require(\"private-next-pages/admin/config-social-items.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config-social-items\"])\n      });\n    }\n  ","import React, { FC } from 'react';\nimport { Select } from 'antd';\nimport { SocialHandleDropdownItem } from '../../types/config-section';\nimport { OTHER_SOCIAL_HANDLE_OPTION } from '../../utils/config-constants';\n\nexport type DropdownProps = {\n  iconList: SocialHandleDropdownItem[];\n  selectedOption: string;\n  onSelected: any;\n};\n\nexport const SocialDropdown: FC<DropdownProps> = ({ iconList, selectedOption, onSelected }) => {\n  const handleSelected = (value: string) => {\n    if (onSelected) {\n      onSelected(value);\n    }\n  };\n  const inititalSelected = selectedOption === '' ? null : selectedOption;\n  return (\n    <div className=\"social-dropdown-container\">\n      <p className=\"description\">\n        If you are looking for a platform name not on this list, please select Other and type in\n        your own name. A logo will not be provided.\n      </p>\n\n      <div className=\"formfield-container\">\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">Social Platform</span>\n        </div>\n        <div className=\"input-side\">\n          <Select\n            style={{ width: 240 }}\n            className=\"social-dropdown\"\n            placeholder=\"Social platform...\"\n            defaultValue={inititalSelected}\n            value={inititalSelected}\n            onSelect={handleSelected}\n          >\n            {iconList.map(item => {\n              const { platform, icon, key } = item;\n\n              return (\n                <Select.Option className=\"social-option\" key={`platform-${key}`} value={key}>\n                  <span className=\"option-icon\">\n                    <img src={icon} alt=\"\" className=\"option-icon\" />\n                  </span>\n                  <span className=\"option-label\">{platform}</span>\n                </Select.Option>\n              );\n            })}\n            <Select.Option\n              className=\"social-option\"\n              key={`platform-${OTHER_SOCIAL_HANDLE_OPTION}`}\n              value={OTHER_SOCIAL_HANDLE_OPTION}\n            >\n              Other...\n            </Select.Option>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Typography, Table, Button, Modal, Input } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { CaretDownOutlined, CaretUpOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { SocialDropdown } from '../../SocialDropdown';\nimport { fetchData, SOCIAL_PLATFORMS_LIST } from '../../../../utils/apis';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  API_SOCIAL_HANDLES,\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  DEFAULT_SOCIAL_HANDLE,\n  OTHER_SOCIAL_HANDLE_OPTION,\n} from '../../../../utils/config-constants';\nimport { SocialHandle, UpdateArgs } from '../../../../types/config-section';\nimport {\n  isValidMatrixAccount,\n  isValidAccount,\n  isValidUrl,\n  DEFAULT_TEXTFIELD_URL_PATTERN,\n} from '../../../../utils/urls';\nimport { TextField } from '../../TextField';\nimport { createInputStatus, STATUS_ERROR, STATUS_SUCCESS } from '../../../../utils/input-statuses';\nimport { FormStatusIndicator } from '../../FormStatusIndicator';\n\nconst { Title } = Typography;\n\n// eslint-disable-next-line react/function-component-definition\nexport default function EditSocialLinks() {\n  const [availableIconsList, setAvailableIconsList] = useState([]);\n  const [currentSocialHandles, setCurrentSocialHandles] = useState([]);\n\n  const [displayModal, setDisplayModal] = useState(false);\n  const [displayOther, setDisplayOther] = useState(false);\n  const [modalProcessing, setModalProcessing] = useState(false);\n  const [editId, setEditId] = useState(-1);\n\n  // current data inside modal\n  const [modalDataState, setModalDataState] = useState(DEFAULT_SOCIAL_HANDLE);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { socialHandles: initialSocialHandles } = instanceDetails;\n\n  let resetTimer = null;\n\n  const PLACEHOLDERS = {\n    mastodon: 'https://mastodon.social/@username',\n    twitter: 'https://twitter.com/username',\n  };\n\n  const getAvailableIcons = async () => {\n    try {\n      const result = await fetchData(SOCIAL_PLATFORMS_LIST, { auth: false });\n      const list = Object.keys(result).map(item => ({\n        key: item,\n        ...result[item],\n      }));\n      setAvailableIconsList(list);\n    } catch (error) {\n      console.log(error);\n      //  do nothing\n    }\n  };\n\n  const isPredefinedSocial = (platform: string) =>\n    availableIconsList.find(item => item.key === platform) || false;\n\n  const selectedOther =\n    modalDataState.platform !== '' &&\n    !availableIconsList.find(item => item.key === modalDataState.platform);\n\n  useEffect(() => {\n    getAvailableIcons();\n  }, []);\n\n  useEffect(() => {\n    if (instanceDetails.socialHandles) {\n      setCurrentSocialHandles(initialSocialHandles);\n    }\n  }, [instanceDetails]);\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n  const resetModal = () => {\n    setDisplayModal(false);\n    setEditId(-1);\n    setDisplayOther(false);\n    setModalProcessing(false);\n    setModalDataState({ ...DEFAULT_SOCIAL_HANDLE });\n  };\n\n  const handleModalCancel = () => {\n    resetModal();\n  };\n\n  const updateModalState = (fieldName: string, value: string) => {\n    setModalDataState({\n      ...modalDataState,\n      [fieldName]: value,\n    });\n  };\n  const handleDropdownSelect = (value: string) => {\n    if (value === OTHER_SOCIAL_HANDLE_OPTION) {\n      setDisplayOther(true);\n      updateModalState('platform', '');\n    } else {\n      setDisplayOther(false);\n      updateModalState('platform', value);\n    }\n  };\n  const handleOtherNameChange = event => {\n    const { value } = event.target;\n    updateModalState('platform', value);\n  };\n\n  const handleUrlChange = ({ value }: UpdateArgs) => {\n    updateModalState('url', value);\n  };\n\n  // posts all the variants at once as an array obj\n  const postUpdateToAPI = async (postValue: any) => {\n    await postConfigUpdateToAPI({\n      apiPath: API_SOCIAL_HANDLES,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'socialHandles',\n          value: postValue,\n          path: 'instanceDetails',\n        });\n\n        // close modal\n        setModalProcessing(false);\n        handleModalCancel();\n\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        setModalProcessing(false);\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // on Ok, send all of dataState to api\n  // show loading\n  // close modal when api is done\n  const handleModalOk = () => {\n    setModalProcessing(true);\n    const postData = currentSocialHandles.length ? [...currentSocialHandles] : [];\n    if (editId === -1) {\n      postData.push(modalDataState);\n    } else {\n      postData.splice(editId, 1, modalDataState);\n    }\n    postUpdateToAPI(postData);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const postData = [...currentSocialHandles];\n    postData.splice(index, 1);\n    postUpdateToAPI(postData);\n  };\n\n  const handleMoveItemUp = (index: number) => {\n    if (index <= 0 || index >= currentSocialHandles.length) {\n      return;\n    }\n    const postData = [...currentSocialHandles];\n    const tmp = postData[index - 1];\n    postData[index - 1] = postData[index];\n    postData[index] = tmp;\n    postUpdateToAPI(postData);\n  };\n\n  const handleMoveItemDown = (index: number) => {\n    if (index < 0 || index >= currentSocialHandles.length - 1) {\n      return;\n    }\n    const postData = [...currentSocialHandles];\n    const tmp = postData[index + 1];\n    postData[index + 1] = postData[index];\n    postData[index] = tmp;\n    postUpdateToAPI(postData);\n  };\n\n  const socialHandlesColumns: ColumnsType<SocialHandle> = [\n    {\n      title: 'Social Link',\n      dataIndex: '',\n      key: 'combo',\n      render: (data, record) => {\n        const { platform, url } = record;\n        const platformInfo = isPredefinedSocial(platform);\n\n        // custom platform case\n        if (!platformInfo) {\n          return (\n            <div className=\"social-handle-cell\">\n              <p className=\"option-label\">\n                <strong>{platform}</strong>\n                <span className=\"handle-url\" title={url}>\n                  {url}\n                </span>\n              </p>\n            </div>\n          );\n        }\n        const { icon, platform: platformName } = platformInfo;\n        return (\n          <div className=\"social-handle-cell\">\n            <span className=\"option-icon\">\n              <img src={icon} alt=\"\" className=\"option-icon\" />\n            </span>\n            <p className=\"option-label\">\n              <strong>{platformName}</strong>\n              <span className=\"handle-url\" title={url}>\n                {url}\n              </span>\n            </p>\n          </div>\n        );\n      },\n    },\n    {\n      title: '',\n      dataIndex: '',\n      key: 'edit',\n      render: (data, record, index) => (\n        <div className=\"actions\">\n          <Button\n            size=\"small\"\n            onClick={() => {\n              const platformInfo = currentSocialHandles[index];\n              setEditId(index);\n              setModalDataState({ ...platformInfo });\n              setDisplayModal(true);\n              if (!isPredefinedSocial(platformInfo.platform)) {\n                setDisplayOther(true);\n              }\n            }}\n          >\n            Edit\n          </Button>\n          <Button\n            icon={<CaretUpOutlined />}\n            size=\"small\"\n            hidden={index === 0}\n            onClick={() => handleMoveItemUp(index)}\n          />\n          <Button\n            icon={<CaretDownOutlined />}\n            size=\"small\"\n            hidden={index === currentSocialHandles.length - 1}\n            onClick={() => handleMoveItemDown(index)}\n          />\n          <Button\n            className=\"delete-button\"\n            icon={<DeleteOutlined />}\n            size=\"small\"\n            onClick={() => handleDeleteItem(index)}\n          />\n        </div>\n      ),\n    },\n  ];\n\n  const isValid = (url: string, platform: string) => {\n    if (platform === 'xmpp') {\n      return isValidAccount(url, 'xmpp');\n    }\n    if (platform === 'matrix') {\n      return isValidMatrixAccount(url);\n    }\n\n    return isValidUrl(url);\n  };\n\n  const okButtonProps = {\n    disabled: !isValid(modalDataState.url, modalDataState.platform),\n  };\n\n  const otherField = (\n    <div className=\"other-field-container formfield-container\">\n      <div className=\"label-side\" />\n      <div className=\"input-side\">\n        <Input\n          placeholder=\"Other platform name\"\n          defaultValue={modalDataState.platform}\n          onChange={handleOtherNameChange}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"social-links-edit-container\">\n      <Title level={3} className=\"section-title\">\n        Your Social Handles\n      </Title>\n      <p className=\"description\">\n        Add all your social media handles and links to your other profiles here.\n      </p>\n\n      <FormStatusIndicator status={submitStatus} />\n\n      <Table\n        className=\"social-handles-table\"\n        pagination={false}\n        size=\"small\"\n        rowKey={record => `${record.platform}-${record.url}`}\n        columns={socialHandlesColumns}\n        dataSource={currentSocialHandles}\n      />\n\n      <Modal\n        title=\"Edit Social Handle\"\n        open={displayModal}\n        onOk={handleModalOk}\n        onCancel={handleModalCancel}\n        confirmLoading={modalProcessing}\n        okButtonProps={okButtonProps}\n      >\n        <div className=\"social-handle-modal-content\">\n          <SocialDropdown\n            iconList={availableIconsList}\n            selectedOption={selectedOther ? OTHER_SOCIAL_HANDLE_OPTION : modalDataState.platform}\n            onSelected={handleDropdownSelect}\n          />\n          {displayOther && otherField}\n          <br />\n          <TextField\n            fieldName=\"social-url\"\n            label=\"URL\"\n            placeholder={PLACEHOLDERS[modalDataState.platform] || 'Url to page'}\n            value={modalDataState.url}\n            onChange={handleUrlChange}\n            useTrim\n            type=\"url\"\n            pattern={DEFAULT_TEXTFIELD_URL_PATTERN}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n      </Modal>\n      <br />\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          resetModal();\n          setDisplayModal(true);\n        }}\n      >\n        Add a new social link\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Typography } from 'antd';\nimport EditSocialLinks from '../../components/admin/config/general/EditSocialLinks';\n\nconst { Title } = Typography;\n\nexport default function ConfigSocialThings() {\n  return (\n    <div className=\"config-social-items\">\n      <Title>Social Items</Title>\n\n      <EditSocialLinks />\n    </div>\n  );\n}\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","SocialDropdown","iconList","selectedOption","onSelected","inititalSelected","div","className","p","span","Select","style","width","placeholder","defaultValue","value","onSelect","map","item","platform","icon","key","img","src","alt","OTHER_SOCIAL_HANDLE_OPTION","Title","Typography","EditSocialLinks","availableIconsList","setAvailableIconsList","useState","currentSocialHandles","setCurrentSocialHandles","displayModal","setDisplayModal","displayOther","setDisplayOther","modalProcessing","setModalProcessing","editId","setEditId","modalDataState","setModalDataState","DEFAULT_SOCIAL_HANDLE","submitStatus","setSubmitStatus","serverStatusData","useContext","ServerStatusContext","serverConfig","setFieldInConfigState","instanceDetails","socialHandles","initialSocialHandles","resetTimer","isPredefinedSocial","find","selectedOther","useEffect","async","result","fetchData","SOCIAL_PLATFORMS_LIST","auth","list","Object","keys","error","console","log","getAvailableIcons","resetStates","clearTimeout","resetModal","handleModalCancel","updateModalState","fieldName","postUpdateToAPI","postValue","postConfigUpdateToAPI","apiPath","API_SOCIAL_HANDLES","data","onSuccess","path","createInputStatus","STATUS_SUCCESS","setTimeout","RESET_TIMEOUT","onError","message","STATUS_ERROR","socialHandlesColumns","title","dataIndex","render","record","url","platformInfo","strong","platformName","index","Button","size","onClick","CaretUpOutlined","hidden","length","postData","tmp","handleMoveItemUp","CaretDownOutlined","handleMoveItemDown","DeleteOutlined","splice","handleDeleteItem","okButtonProps","disabled","isValidAccount","isValidMatrixAccount","isValidUrl","otherField","Input","onChange","event","target","level","FormStatusIndicator","status","Table","pagination","rowKey","columns","dataSource","Modal","open","onOk","onCancel","confirmLoading","br","TextField","label","mastodon","twitter","useTrim","type","pattern","DEFAULT_TEXTFIELD_URL_PATTERN","ConfigSocialThings","STATUS_INVALID","STATUS_PROCESSING","STATUS_WARNING","INPUT_STATES","CheckCircleFilled","color","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","customStyles","extraPageContent","logo","name","nsfw","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","enabled","endpoint","region","secret","servingEndpoint","forcePathStyle","yp","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","args","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","STATUS","getStatusIntervalId","setInterval","FETCH_INTERVAL","SERVER_CONFIG","getConfig","clearInterval","providerValue","updatedConfig","Provider","propTypes","PropTypes"],"sourceRoot":""}