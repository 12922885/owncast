{"version":3,"file":"static/chunks/pages/admin/config-notify-ad43e4de56572157.js","mappings":"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","sources":["webpack://_N_E/?4f4e","webpack://_N_E/./components/config/ToggleSwitch.tsx","webpack://_N_E/./components/config/notification/discord.tsx","webpack://_N_E/./components/config/notification/browser.tsx","webpack://_N_E/./components/config/notification/twitter.tsx","webpack://_N_E/./components/config/notification/federation.tsx","webpack://_N_E/./pages/admin/config-notify.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config-notify\",\n      function () {\n        return require(\"private-next-pages/admin/config-notify.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config-notify\"])\n      });\n    }\n  ","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField } from '../TextField';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  DISCORD_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { discord } = notifications || {};\n\n  const { enabled, webhook, goLiveMessage } = discord || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      webhook,\n      goLiveMessage,\n    });\n  }, [notifications, discord]);\n\n  const canSave = (): boolean => {\n    if (webhook === '' || goLiveMessage === '') {\n      return false;\n    }\n\n    return true;\n  };\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n\n    setEnableSaveButton(canSave());\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/discord',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'discord',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    // setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n  };\n\n  return (\n    <>\n      <Title>Discord</Title>\n      <p className=\"description reduced-margins\">\n        Let your Discord channel know each time you go live.\n      </p>\n      <p className=\"description reduced-margins\">\n        <a\n          href=\"https://support.discord.com/hc/en-us/articles/228383668\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Create a webhook\n        </a>{' '}\n        under <i>Edit Channel / Integrations</i> on your Discord channel and provide it below.\n      </p>\n\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"discordEnabled\"\n        label=\"Enable Discord\"\n        checked={formDataValues.enabled}\n        onChange={handleSwitchChange}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...DISCORD_CONFIG_FIELDS.webhookUrl}\n          required\n          value={formDataValues.webhook}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...DISCORD_CONFIG_FIELDS.goLiveMessage}\n          required\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n\n      <Button\n        type=\"primary\"\n        onClick={save}\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField, TEXTFIELD_TYPE_TEXTAREA } from '../TextField';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  BROWSER_PUSH_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { browser } = notifications || {};\n\n  const { enabled, goLiveMessage } = browser || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      goLiveMessage,\n    });\n  }, [notifications, browser]);\n\n  const canSave = (): boolean => true;\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    console.log(fieldName, value);\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n\n    setEnableSaveButton(canSave());\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    // setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/browser',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'browser',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Title>Browser Alerts</Title>\n      <p className=\"description reduced-margins\">\n        Viewers can opt into being notified when you go live with their browser.\n      </p>\n      <p className=\"description reduced-margins\">Not all browsers support this.</p>\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"enabled\"\n        label=\"Enable browser notifications\"\n        onChange={handleSwitchChange}\n        checked={formDataValues.enabled}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...BROWSER_PUSH_CONFIG_FIELDS.goLiveMessage}\n          required\n          type={TEXTFIELD_TYPE_TEXTAREA}\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <Button\n        type=\"primary\"\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n        onClick={save}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField, TEXTFIELD_TYPE_PASSWORD } from '../TextField';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  TWITTER_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\nimport { TEXTFIELD_TYPE_TEXT } from '../TextFieldWithSubmit';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { twitter } = notifications || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    const {\n      enabled,\n      apiKey,\n      apiSecret,\n      accessToken,\n      accessTokenSecret,\n      bearerToken,\n      goLiveMessage,\n    } = twitter || {};\n    setFormDataValues({\n      enabled,\n      apiKey,\n      apiSecret,\n      accessToken,\n      accessTokenSecret,\n      bearerToken,\n      goLiveMessage,\n    });\n  }, [twitter]);\n\n  const canSave = (): boolean => {\n    const { apiKey, apiSecret, accessToken, accessTokenSecret, bearerToken, goLiveMessage } =\n      formDataValues;\n\n    return (\n      !!apiKey &&\n      !!apiSecret &&\n      !!accessToken &&\n      !!accessTokenSecret &&\n      !!bearerToken &&\n      !!goLiveMessage\n    );\n  };\n\n  useEffect(() => {\n    setEnableSaveButton(canSave());\n  }, [formDataValues]);\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    const previouslySaved = formDataValues.enabled;\n\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n\n    return switchEnabled !== previouslySaved;\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n    setEnableSaveButton(false);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/twitter',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'twitter',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Title>Twitter</Title>\n      <p className=\"description reduced-margins\">\n        Let your Twitter followers know each time you go live.\n      </p>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <p className=\"description reduced-margins\">\n          <a href=\"https://owncast.online/docs/notifications\" target=\"_blank\" rel=\"noreferrer\">\n            Read how to configure your Twitter account\n          </a>{' '}\n          to support posting from Owncast.\n        </p>\n        <p className=\"description reduced-margins\">\n          <a\n            href=\"https://developer.twitter.com/en/portal/dashboard\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            And then get your Twitter developer credentials\n          </a>{' '}\n          to fill in below.\n        </p>\n      </div>\n\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"enabled\"\n        label=\"Enable Twitter\"\n        onChange={handleSwitchChange}\n        checked={formDataValues.enabled}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.apiKey}\n          required\n          value={formDataValues.apiKey}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.apiSecret}\n          type={TEXTFIELD_TYPE_PASSWORD}\n          required\n          value={formDataValues.apiSecret}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.accessToken}\n          required\n          value={formDataValues.accessToken}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.accessTokenSecret}\n          type={TEXTFIELD_TYPE_PASSWORD}\n          required\n          value={formDataValues.accessTokenSecret}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.bearerToken}\n          required\n          value={formDataValues.bearerToken}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.goLiveMessage}\n          type={TEXTFIELD_TYPE_TEXT}\n          required\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <Button\n        type=\"primary\"\n        onClick={save}\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport Link from 'next/link';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n  const { federation } = serverConfig || {};\n\n  const { enabled } = federation || {};\n  const [formDataValues, setFormDataValues] = useState<any>({});\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n    });\n  }, [enabled]);\n\n  return (\n    <>\n      <Title>Fediverse Social</Title>\n      <p className=\"description\">\n        Enabling the Fediverse social features will not just alert people to when you go live, but\n        also enable other functionality.\n      </p>\n      <p>\n        Fediverse social features:{' '}\n        <span style={{ color: federation.enabled ? 'green' : 'red' }}>\n          {formDataValues.enabled ? 'Enabled' : 'Disabled'}\n        </span>\n      </p>\n\n      <Link passHref href=\"/config-federation\">\n        <Button\n          type=\"primary\"\n          style={{\n            position: 'relative',\n            marginLeft: 'auto',\n            right: '0',\n            marginTop: '20px',\n          }}\n        >\n          Configure\n        </Button>\n      </Link>\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Alert, Button, Col, Row, Typography } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport Link from 'next/link';\n\nimport Discord from '../../components/config/notification/discord';\nimport Browser from '../../components/config/notification/browser';\nimport Twitter from '../../components/config/notification/twitter';\nimport Federation from '../../components/config/notification/federation';\nimport {\n  TextFieldWithSubmit,\n  TEXTFIELD_TYPE_URL,\n} from '../../components/config/TextFieldWithSubmit';\nimport { TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { UpdateArgs } from '../../types/config-section';\nimport { isValidUrl } from '../../utils/urls';\n\nconst { Title } = Typography;\n\nexport default function ConfigNotify() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n  const { yp } = serverConfig;\n  const { instanceUrl } = yp;\n  const [urlValid, setUrlValid] = useState(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      instanceUrl,\n    });\n  }, [yp]);\n\n  const handleSubmitInstanceUrl = () => {\n    if (!urlValid) {\n      return;\n    }\n\n    setFormDataValues({\n      ...formDataValues,\n      enabled: false,\n    });\n  };\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setUrlValid(isValidUrl(value));\n\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const enabled = instanceUrl !== '';\n  const configurationWarning = !enabled && (\n    <>\n      <Alert\n        message=\"You must set your server URL before you can enable this feature.\"\n        type=\"warning\"\n        showIcon\n      />\n      <br />\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL}\n        value={formDataValues?.instanceUrl || ''}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n        required\n      />\n    </>\n  );\n\n  return (\n    <>\n      <Title>Notifications</Title>\n      <p className=\"description\">\n        Let your viewers know when you go live by supporting any of the below notification channels.{' '}\n        <a\n          href=\"https://owncast.online/docs/notifications/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more about live notifications.\n        </a>\n      </p>\n\n      {configurationWarning}\n\n      <Row>\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Browser />\n        </Col>\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Twitter />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Discord />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Federation />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Title>Custom</Title>\n          <p className=\"description\">Build your own notifications by using custom webhooks.</p>\n\n          <Link passHref href=\"/webhooks\">\n            <Button\n              type=\"primary\"\n              style={{\n                position: 'relative',\n                marginLeft: 'auto',\n                right: '0',\n                marginTop: '20px',\n              }}\n            >\n              Create\n            </Button>\n          </Link>\n        </Col>\n      </Row>\n    </>\n  );\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","ToggleSwitch","apiPath","checked","reversed","configPath","disabled","fieldName","label","tip","useSubmit","onChange","param","submitStatus","setSubmitStatus","useState","resetTimer","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetStates","clearTimeout","handleChange","isChecked","createInputStatus","STATUS_PROCESSING","isCheckedSend","postConfigUpdateToAPI","data","value","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","concat","message","setTimeout","RESET_TIMEOUT","loading","type","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","FormStatusIndicator","status","p","defaultProps","Title","Typography","ConfigNotify","serverConfig","notifications","discord","enabled","webhook","goLiveMessage","formDataValues","setFormDataValues","enableSaveButton","setEnableSaveButton","useEffect","canSave","handleFieldChange","save","handleSwitchChange","switchEnabled","jsx_runtime","Fragment","a","href","target","rel","i","style","display","TextField","DISCORD_CONFIG_FIELDS","required","Button","onClick","position","marginLeft","right","marginTop","browser","console","log","BROWSER_PUSH_CONFIG_FIELDS","TEXTFIELD_TYPE_TEXTAREA","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","previouslySaved","TWITTER_CONFIG_FIELDS","TEXTFIELD_TYPE_PASSWORD","TEXTFIELD_TYPE_TEXT","federation","color","Link","passHref","yp","instanceUrl","urlValid","setUrlValid","handleSubmitInstanceUrl","isValidUrl","configurationWarning","Alert","showIcon","br","TextFieldWithSubmit","TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL","initialValue","TEXTFIELD_TYPE_URL","onSubmit","Row","Col","margin","flexDirection","Browser","Twitter","Discord","Federation"],"sourceRoot":""}