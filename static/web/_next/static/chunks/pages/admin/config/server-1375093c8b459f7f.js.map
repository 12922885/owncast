{"version":3,"file":"static/chunks/pages/admin/config/server-1375093c8b459f7f.js","mappings":"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","sources":["webpack://_N_E/?dfb8","webpack://_N_E/./components/admin/TextFieldWithSubmit.tsx","webpack://_N_E/./components/admin/ToggleSwitch.tsx","webpack://_N_E/./components/admin/config/server/StreamKeys.tsx","webpack://_N_E/./components/admin/ResetYP.tsx","webpack://_N_E/./components/admin/EditInstanceDetails2.tsx","webpack://_N_E/./components/admin/config/server/ServerConfig.tsx","webpack://_N_E/./components/admin/config/server/EditStorage.tsx","webpack://_N_E/./components/admin/config/server/StorageConfig.tsx","webpack://_N_E/./pages/admin/config/server/index.tsx","webpack://_N_E/./utils/alert-message-context.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config/server\",\n      function () {\n        return require(\"private-next-pages/admin/config/server/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config/server\"])\n      });\n    }\n  ","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import React, { useContext, useState } from 'react';\nimport { Table, Space, Button, Typography, Alert, Input, Form } from 'antd';\nimport { DeleteOutlined, EyeOutlined, PlusOutlined } from '@ant-design/icons';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\n\nimport { fetchData, UPDATE_STREAM_KEYS } from '../../../../utils/apis';\n\nconst { Paragraph } = Typography;\nconst { Item } = Form;\n\nconst saveKeys = async (keys, setError) => {\n  try {\n    await fetchData(UPDATE_STREAM_KEYS, {\n      method: 'POST',\n      auth: true,\n      data: { value: keys },\n    });\n  } catch (error) {\n    console.error(error);\n    setError(error);\n  }\n};\n\nconst AddKeyForm = ({ setShowAddKeyForm, setFieldInConfigState, streamKeys, setError }) => {\n  const handleAddKey = (newkey: any) => {\n    const updatedKeys = [...streamKeys, newkey];\n\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: updatedKeys,\n    });\n\n    saveKeys(updatedKeys, setError);\n\n    setShowAddKeyForm(false);\n  };\n\n  return (\n    <Form layout=\"inline\" autoComplete=\"off\" onFinish={handleAddKey}>\n      <Item label=\"Key\" name=\"key\" tooltip=\"The key you provide your broadcasting software\">\n        <Input placeholder=\"def456\" />\n      </Item>\n      <Item label=\"Comment\" name=\"comment\" tooltip=\"For remembering why you added this key\">\n        <Input placeholder=\"My OBS Key\" />\n      </Item>\n\n      <Button type=\"primary\" htmlType=\"submit\">\n        Add\n      </Button>\n    </Form>\n  );\n};\n\nconst AddKeyButton = ({ setShowAddKeyForm }) => (\n  <Button type=\"default\" onClick={() => setShowAddKeyForm(true)}>\n    <PlusOutlined />\n  </Button>\n);\n\nconst StreamKeys = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { streamKeys } = serverConfig;\n  const [showAddKeyForm, setShowAddKeyForm] = useState(false);\n  const [showKeyMap, setShowKeyMap] = useState({});\n  const [error, setError] = useState(null);\n\n  const handleDeleteKey = keyToRemove => {\n    const newKeys = streamKeys.filter(k => k !== keyToRemove);\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: newKeys,\n    });\n    saveKeys(newKeys, setError);\n  };\n\n  const handleToggleShowKey = key => {\n    setShowKeyMap({\n      ...showKeyMap,\n      [key]: !showKeyMap[key],\n    });\n  };\n\n  const columns = [\n    {\n      title: 'Key',\n      dataIndex: 'key',\n      key: 'key',\n      render: text => (\n        <Space direction=\"horizontal\">\n          <Paragraph copyable>{showKeyMap[text] ? text : '**********'}</Paragraph>\n\n          <Button\n            type=\"link\"\n            style={{ top: '-7px' }}\n            icon={<EyeOutlined />}\n            onClick={() => handleToggleShowKey(text)}\n          />\n        </Space>\n      ),\n    },\n    {\n      title: 'Comment',\n      dataIndex: 'comment',\n      key: 'comment',\n    },\n    {\n      title: '',\n      key: 'delete',\n      render: text => <Button onClick={() => handleDeleteKey(text)} icon={<DeleteOutlined />} />,\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        A streaming key is used with your broadcasting software to authenticate itself to Owncast.\n        Most people will only need one. However, if you share a server with others or you want\n        different keys for different broadcasting sources you can add more here.\n      </Paragraph>\n      <Paragraph>\n        These keys are unrelated to the admin password and will not grant you access to make changes\n        to Owncast&apos;s configuration.\n      </Paragraph>\n      <Paragraph>\n        Read more about broadcasting at{' '}\n        <a\n          href=\"https://owncast.online/docs/broadcasting/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          the documentation\n        </a>\n        .\n      </Paragraph>\n\n      <Space direction=\"vertical\" style={{ width: '70%' }}>\n        {error && <Alert type=\"error\" message=\"Saving Keys Error\" description={error} />}\n\n        {streamKeys.length === 0 && (\n          <Alert\n            message=\"No stream keys!\"\n            description=\"You will not be able to stream until you create at least one stream key and add it to your broadcasting software.\"\n            type=\"error\"\n          />\n        )}\n\n        <Table\n          rowKey=\"key\"\n          columns={columns}\n          dataSource={streamKeys}\n          pagination={false}\n          // eslint-disable-next-line react/no-unstable-nested-components\n          footer={() =>\n            showAddKeyForm ? (\n              <AddKeyForm\n                setShowAddKeyForm={setShowAddKeyForm}\n                streamKeys={streamKeys}\n                setFieldInConfigState={setFieldInConfigState}\n                setError={setError}\n              />\n            ) : (\n              <AddKeyButton setShowAddKeyForm={setShowAddKeyForm} />\n            )\n          }\n        />\n        <br />\n      </Space>\n    </div>\n  );\n};\nexport default StreamKeys;\n","import { Popconfirm, Button, Typography } from 'antd';\nimport { FC, useContext, useState } from 'react';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\n\nimport { API_YP_RESET, fetchData } from '../../utils/apis';\nimport { RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const ResetYP: FC = () => {\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const resetDirectoryRegistration = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    try {\n      await fetchData(API_YP_RESET);\n      setMessage('');\n      setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    } catch (error) {\n      setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${error}`));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  return (\n    <>\n      <Typography.Title level={3} className=\"section-title\">\n        Reset Directory\n      </Typography.Title>\n      <p className=\"description\">\n        If you are experiencing issues with your listing on the Owncast Directory and were asked to\n        &quot;reset&quot; your connection to the service, you can do that here. The next time you go\n        live it will try and re-register your server with the directory from scratch.\n      </p>\n\n      <Popconfirm\n        placement=\"topLeft\"\n        title=\"Are you sure you want to reset your connection to the Owncast directory?\"\n        onConfirm={resetDirectoryRegistration}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button type=\"primary\">Reset Directory Connection</Button>\n      </Popconfirm>\n      <p>\n        <FormStatusIndicator status={submitStatus} />\n      </p>\n    </>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Button, Collapse, Typography, Tooltip } from 'antd';\nimport { CopyOutlined, RedoOutlined } from '@ant-design/icons';\nimport { TEXTFIELD_TYPE_NUMBER, TEXTFIELD_TYPE_PASSWORD, TEXTFIELD_TYPE_URL } from './TextField';\nimport { TextFieldWithSubmit } from './TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\nimport {\n  TEXTFIELD_PROPS_FFMPEG,\n  TEXTFIELD_PROPS_RTMP_PORT,\n  TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE,\n  TEXTFIELD_PROPS_ADMIN_PASSWORD,\n  TEXTFIELD_PROPS_WEB_PORT,\n} from '../../utils/config-constants';\nimport { UpdateArgs } from '../../types/config-section';\nimport { ResetYP } from './ResetYP';\n\n// Lazy loaded components\n\nconst { Panel } = Collapse;\n\n// eslint-disable-next-line react/function-component-definition\nexport default function EditInstanceDetails() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const { serverConfig } = serverStatusData || {};\n\n  const { adminPassword, ffmpegPath, rtmpServerPort, webServerPort, yp, socketHostOverride } =\n    serverConfig;\n\n  const [copyIsVisible, setCopyVisible] = useState(false);\n\n  const COPY_TOOLTIP_TIMEOUT = 3000;\n\n  useEffect(() => {\n    setFormDataValues({\n      adminPassword,\n      ffmpegPath,\n      rtmpServerPort,\n      webServerPort,\n      socketHostOverride,\n    });\n  }, [serverConfig]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const showConfigurationRestartMessage = () => {\n    setMessage('Updating server settings requires a restart of your Owncast server.');\n  };\n\n  const showStreamKeyChangeMessage = () => {\n    setMessage(\n      'Changing your stream key will log you out of the admin and block you from streaming until you change the key in your broadcasting software.',\n    );\n  };\n\n  const showFfmpegChangeMessage = () => {\n    if (serverStatusData.online) {\n      setMessage('The updated ffmpeg path will be used when starting your next live stream.');\n    }\n  };\n\n  function generateStreamKey() {\n    let key = '';\n    for (let i = 0; i < 3; i += 1) {\n      key += Math.random().toString(36).substring(2);\n    }\n\n    handleFieldChange({ fieldName: 'streamKey', value: key });\n  }\n\n  function copyStreamKey() {\n    navigator.clipboard.writeText(formDataValues.streamKey).then(() => {\n      setCopyVisible(true);\n      setTimeout(() => setCopyVisible(false), COPY_TOOLTIP_TIMEOUT);\n    });\n  }\n\n  return (\n    <div className=\"edit-server-details-container\">\n      <div className=\"field-container field-streamkey-container\">\n        <div className=\"left-side\">\n          <TextFieldWithSubmit\n            fieldName=\"adminPassword\"\n            {...TEXTFIELD_PROPS_ADMIN_PASSWORD}\n            value={formDataValues.adminPassword}\n            initialValue={adminPassword}\n            type={TEXTFIELD_TYPE_PASSWORD}\n            onChange={handleFieldChange}\n            onSubmit={showStreamKeyChangeMessage}\n          />\n          <div className=\"streamkey-actions\">\n            <Tooltip title=\"Generate a stream key\">\n              <Button icon={<RedoOutlined />} size=\"small\" onClick={generateStreamKey} />\n            </Tooltip>\n\n            <Tooltip\n              className=\"copy-tooltip\"\n              title={copyIsVisible ? 'Copied!' : 'Copy to clipboard'}\n            >\n              <Button icon={<CopyOutlined />} size=\"small\" onClick={copyStreamKey} />\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n      <TextFieldWithSubmit\n        fieldName=\"ffmpegPath\"\n        {...TEXTFIELD_PROPS_FFMPEG}\n        value={formDataValues.ffmpegPath}\n        initialValue={ffmpegPath}\n        onChange={handleFieldChange}\n        onSubmit={showFfmpegChangeMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"webServerPort\"\n        {...TEXTFIELD_PROPS_WEB_PORT}\n        value={formDataValues.webServerPort}\n        initialValue={webServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"rtmpServerPort\"\n        {...TEXTFIELD_PROPS_RTMP_PORT}\n        value={formDataValues.rtmpServerPort}\n        initialValue={rtmpServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <Collapse className=\"advanced-settings\">\n        <Panel header=\"Advanced Settings\" key=\"1\">\n          <Typography.Paragraph>\n            If you have a CDN in front of your entire Owncast instance, specify your origin server\n            here for the websocket to connect to. Most people will never need to set this.\n          </Typography.Paragraph>\n          <TextFieldWithSubmit\n            fieldName=\"socketHostOverride\"\n            {...TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE}\n            value={formDataValues.socketHostOverride}\n            initialValue={socketHostOverride || ''}\n            type={TEXTFIELD_TYPE_URL}\n            onChange={handleFieldChange}\n          />\n          {yp.enabled && <ResetYP />}\n        </Panel>\n      </Collapse>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditInstanceDetails from '../../EditInstanceDetails2';\n\n// eslint-disable-next-line react/function-component-definition\nexport default function ConfigServerDetails() {\n  return (\n    <div className=\"config-server-details-form\">\n      <p className=\"description\">\n        You should change your admin password from the default and keep it safe. For most people\n        it&apos;s likely the other settings will not need to be changed.\n      </p>\n      <div className=\"form-module config-server-details-container\">\n        <EditInstanceDetails />\n      </div>\n    </div>\n  );\n}\n","import { Button, Collapse } from 'antd';\nimport classNames from 'classnames';\nimport React, { useContext, useState, useEffect } from 'react';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport { AlertMessageContext } from '../../../../utils/alert-message-context';\n\nimport {\n  postConfigUpdateToAPI,\n  API_S3_INFO,\n  RESET_TIMEOUT,\n  S3_TEXT_FIELDS_INFO,\n} from '../../../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../../../utils/input-statuses';\nimport { TextField } from '../../TextField';\nimport { FormStatusIndicator } from '../../FormStatusIndicator';\nimport { isValidUrl } from '../../../../utils/urls';\nimport { ToggleSwitch } from '../../ToggleSwitch';\n\nconst { Panel } = Collapse;\n\n// we could probably add more detailed checks here\n// `currentValues` is what's currently in the global store and in the db\nfunction checkSaveable(formValues: any, currentValues: any) {\n  const {\n    endpoint,\n    accessKey,\n    secret,\n    bucket,\n    region,\n    enabled,\n    servingEndpoint,\n    acl,\n    forcePathStyle,\n  } = formValues;\n  // if fields are filled out and different from what's in store, then return true\n  if (enabled) {\n    if (!!endpoint && isValidUrl(endpoint) && !!accessKey && !!secret && !!bucket && !!region) {\n      if (\n        enabled !== currentValues.enabled ||\n        endpoint !== currentValues.endpoint ||\n        accessKey !== currentValues.accessKey ||\n        secret !== currentValues.secret ||\n        bucket !== currentValues.bucket ||\n        region !== currentValues.region ||\n        (!currentValues.servingEndpoint && servingEndpoint !== '') ||\n        (!!currentValues.servingEndpoint && servingEndpoint !== currentValues.servingEndpoint) ||\n        (!currentValues.acl && acl !== '') ||\n        (!!currentValues.acl && acl !== currentValues.acl) ||\n        forcePathStyle !== currentValues.forcePathStyle\n      ) {\n        return true;\n      }\n    }\n  } else if (enabled !== currentValues.enabled) {\n    return true;\n  }\n  return false;\n}\n\n// eslint-disable-next-line react/function-component-definition\nexport default function EditStorage() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [shouldDisplayForm, setShouldDisplayForm] = useState(false);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { setMessage: setAlertMessage } = useContext(AlertMessageContext);\n\n  const { s3 } = serverConfig;\n  const {\n    accessKey = '',\n    acl = '',\n    bucket = '',\n    enabled = false,\n    endpoint = '',\n    region = '',\n    secret = '',\n    servingEndpoint = '',\n    forcePathStyle = false,\n  } = s3;\n\n  useEffect(() => {\n    setFormDataValues({\n      accessKey,\n      acl,\n      bucket,\n      enabled,\n      endpoint,\n      region,\n      secret,\n      servingEndpoint,\n      forcePathStyle,\n    });\n    setShouldDisplayForm(enabled);\n  }, [s3]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  // posts the whole state\n  const handleSave = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: API_S3_INFO,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({ fieldName: 's3', value: postValue, path: '' });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setAlertMessage(\n          'Changing your storage configuration will take place the next time you start a new stream.',\n        );\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (storageEnabled: boolean) => {\n    setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: storageEnabled });\n  };\n\n  const handleForcePathStyleSwitchChange = (forcePathStyleEnabled: boolean) => {\n    handleFieldChange({ fieldName: 'forcePathStyle', value: forcePathStyleEnabled });\n  };\n\n  const containerClass = classNames({\n    'edit-storage-container': true,\n    'form-module': true,\n    enabled: shouldDisplayForm,\n  });\n\n  const isSaveable = checkSaveable(formDataValues, s3);\n\n  return (\n    <div className={containerClass}>\n      <div className=\"enable-switch\">\n        <ToggleSwitch\n          apiPath=\"\"\n          fieldName=\"enabled\"\n          label=\"Use S3 Storage Provider\"\n          checked={formDataValues.enabled}\n          onChange={handleSwitchChange}\n        />\n        {/* <Switch\n          checked={formDataValues.enabled}\n          defaultChecked={formDataValues.enabled}\n          onChange={handleSwitchChange}\n          checkedChildren=\"ON\"\n          unCheckedChildren=\"OFF\"\n        />{' '}\n        Enabled */}\n      </div>\n\n      <div className=\"form-fields\">\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.endpoint}\n            value={formDataValues.endpoint}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.accessKey}\n            value={formDataValues.accessKey}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.secret}\n            value={formDataValues.secret}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.bucket}\n            value={formDataValues.bucket}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.region}\n            value={formDataValues.region}\n            onChange={handleFieldChange}\n          />\n        </div>\n\n        <Collapse className=\"advanced-section\">\n          <Panel header=\"Optional Settings\" key=\"1\">\n            <div className=\"field-container\">\n              <TextField\n                {...S3_TEXT_FIELDS_INFO.acl}\n                value={formDataValues.acl}\n                onChange={handleFieldChange}\n              />\n            </div>\n            <div className=\"field-container\">\n              <TextField\n                {...S3_TEXT_FIELDS_INFO.servingEndpoint}\n                value={formDataValues.servingEndpoint}\n                onChange={handleFieldChange}\n              />\n            </div>\n            <div className=\"enable-switch\">\n              <ToggleSwitch\n                {...S3_TEXT_FIELDS_INFO.forcePathStyle}\n                fieldName=\"forcePathStyle\"\n                checked={formDataValues.forcePathStyle}\n                onChange={handleForcePathStyleSwitchChange}\n              />\n            </div>\n          </Panel>\n        </Collapse>\n      </div>\n\n      <div className=\"button-container\">\n        <Button type=\"primary\" onClick={handleSave} disabled={!isSaveable}>\n          Save\n        </Button>\n        <FormStatusIndicator status={submitStatus} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditStorage from './EditStorage';\n\n// eslint-disable-next-line react/function-component-definition\nexport default function ConfigStorageInfo() {\n  return (\n    <>\n      <p className=\"description\">\n        Owncast supports optionally using external storage providers to stream your video. Learn\n        more about this by visiting our{' '}\n        <a\n          href=\"https://owncast.online/docs/storage/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storage Documentation\n        </a>\n        .\n      </p>\n      <p className=\"description\">\n        Configuring this incorrectly will likely cause your video to be unplayable. Double check the\n        documentation for your storage provider on how to configure the bucket you created for\n        Owncast.\n      </p>\n      <p className=\"description\">\n        Keep in mind this is for live streaming, not for archival, recording or VOD purposes.\n      </p>\n      <EditStorage />\n    </>\n  );\n}\n","import React from 'react';\nimport { Tabs } from 'antd';\n\nimport StreamKeys from '../../../../components/admin/config/server/StreamKeys';\nimport ServerConfig from '../../../../components/admin/config/server/ServerConfig';\nimport StorageConfig from '../../../../components/admin/config/server/StorageConfig';\n\nexport default function PublicFacingDetails() {\n  return (\n    <div className=\"config-public-details-page\">\n      <Tabs\n        defaultActiveKey=\"1\"\n        centered\n        items={[\n          {\n            label: `Server Config`,\n            key: '1',\n            children: <ServerConfig />,\n          },\n          {\n            label: `Stream Keys`,\n            key: '2',\n            children: <StreamKeys />,\n          },\n          {\n            label: `S3 Object Storage`,\n            key: '3',\n            children: <StorageConfig />,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AlertMessageContext = React.createContext({\n  message: null,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setMessage: (text?: string) => null,\n});\n\nconst AlertMessageProvider = ({ children }) => {\n  const [message, setMessage] = useState('');\n\n  const providerValue = {\n    message,\n    setMessage,\n  };\n  return (\n    <AlertMessageContext.Provider value={providerValue}>{children}</AlertMessageContext.Provider>\n  );\n};\n\nAlertMessageProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default AlertMessageProvider;\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","__webpack_require__","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","param","submitStatus","setSubmitStatus","useState","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","fieldName","required","tip","status","value","onChange","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","trim","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","concat","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","TextField","onBlur","p","FormStatusIndicator","Button","type","size","onClick","disabled","defaultProps","ToggleSwitch","checked","reversed","label","useSubmit","isChecked","isCheckedSend","loading","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","Paragraph","Typography","Item","Form","saveKeys","keys","setError","fetchData","UPDATE_STREAM_KEYS","method","auth","error","console","AddKeyForm","setShowAddKeyForm","streamKeys","handleAddKey","updatedKeys","newkey","jsx_runtime","layout","autoComplete","onFinish","name","tooltip","Input","placeholder","htmlType","AddKeyButton","PlusOutlined","StreamKeys","serverConfig","showAddKeyForm","showKeyMap","setShowKeyMap","handleDeleteKey","keyToRemove","newKeys","filter","k","handleToggleShowKey","key","a","href","target","rel","Space","direction","style","width","Alert","description","length","Table","rowKey","columns","title","dataIndex","render","text","copyable","top","icon","EyeOutlined","DeleteOutlined","dataSource","pagination","footer","br","ResetYP","setMessage","AlertMessageContext","resetDirectoryRegistration","API_YP_RESET","Fragment","level","Popconfirm","placement","onConfirm","okText","cancelText","Panel","Collapse","EditInstanceDetails","formDataValues","setFormDataValues","adminPassword","ffmpegPath","rtmpServerPort","webServerPort","yp","socketHostOverride","copyIsVisible","setCopyVisible","handleFieldChange","showConfigurationRestartMessage","showStreamKeyChangeMessage","showFfmpegChangeMessage","online","TEXTFIELD_PROPS_ADMIN_PASSWORD","TEXTFIELD_TYPE_PASSWORD","Tooltip","RedoOutlined","i","Math","random","toString","substring","CopyOutlined","navigator","clipboard","writeText","streamKey","then","TEXTFIELD_PROPS_FFMPEG","TEXTFIELD_PROPS_WEB_PORT","TEXTFIELD_TYPE_NUMBER","TEXTFIELD_PROPS_RTMP_PORT","header","TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE","enabled","ConfigServerDetails","EditStorage","shouldDisplayForm","setShouldDisplayForm","setAlertMessage","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","handleSave","API_S3_INFO","handleSwitchChange","storageEnabled","handleForcePathStyleSwitchChange","forcePathStyleEnabled","containerClass","isSaveable","checkSaveable","formValues","currentValues","isValidUrl","S3_TEXT_FIELDS_INFO","ConfigStorageInfo","PublicFacingDetails","Tabs","defaultActiveKey","centered","items","children","ServerConfig","StorageConfig","React","AlertMessageProvider","Provider","propTypes","PropTypes","__webpack_exports__","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","CheckCircleFilled","color","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","instanceDetails","customStyles","extraPageContent","logo","nsfw","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","ServerStatusProvider","setStatus","config","setConfig","getStatus","result","STATUS","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue"],"sourceRoot":""}