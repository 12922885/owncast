{"version":3,"file":"static/chunks/pages/admin/config/general/EditInstanceTags-cd813b4e20e91dbb.js","mappings":"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","sources":["webpack://_N_E/?6ec6","webpack://_N_E/./components/config/EditValueArray.tsx","webpack://_N_E/./pages/admin/config/general/EditInstanceTags.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config/general/EditInstanceTags\",\n      function () {\n        return require(\"private-next-pages/admin/config/general/EditInstanceTags.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config/general/EditInstanceTags\"])\n      });\n    }\n  ","/* eslint-disable react/no-array-index-key */\nimport React, { FC, useState } from 'react';\nimport { Typography, Tag } from 'antd';\n\nimport { TextField } from './TextField';\nimport { UpdateArgs } from '../../types/config-section';\nimport { StatusState } from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const TAG_COLOR = '#5a67d8';\n\nexport type EditStringArrayProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  maxLength?: number;\n  values: string[];\n  submitStatus?: StatusState;\n  continuousStatusMessage?: StatusState;\n  handleDeleteIndex: (index: number) => void;\n  handleCreateString: (arg: string) => void;\n};\n\nexport const EditValueArray: FC<EditStringArrayProps> = ({\n  title,\n  description,\n  placeholder,\n  maxLength,\n  values,\n  handleDeleteIndex,\n  handleCreateString,\n  submitStatus,\n  continuousStatusMessage,\n}) => {\n  const [newStringInput, setNewStringInput] = useState<string>('');\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    setNewStringInput(value);\n  };\n\n  const handleSubmitNewString = () => {\n    const newString = newStringInput.trim();\n    handleCreateString(newString);\n    setNewStringInput('');\n  };\n\n  return (\n    <div className=\"edit-string-array-container\">\n      <Title level={3} className=\"section-title\">\n        {title}\n      </Title>\n      <p className=\"description\">{description}</p>\n\n      <div className=\"edit-current-strings\">\n        {values?.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteIndex(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n      {continuousStatusMessage && (\n        <div className=\"continuous-status-section\">\n          <FormStatusIndicator status={continuousStatusMessage} />\n        </div>\n      )}\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"string-input\"\n          value={newStringInput}\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewString}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nEditValueArray.defaultProps = {\n  maxLength: 50,\n  description: null,\n  submitStatus: null,\n  continuousStatusMessage: null,\n};\n","/* eslint-disable react/no-array-index-key */\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Typography, Tag } from 'antd';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  FIELD_PROPS_TAGS,\n  RESET_TIMEOUT,\n  postConfigUpdateToAPI,\n} from '../../../../utils/config-constants';\nimport { TextField } from '../../../../components/config/TextField';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n  STATUS_WARNING,\n} from '../../../../utils/input-statuses';\nimport { TAG_COLOR } from '../../../../components/config/EditValueArray';\n\nconst { Title } = Typography;\n\nexport default function EditInstanceTags() {\n  const [newTagInput, setNewTagInput] = useState<string>('');\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { tags = [] } = instanceDetails;\n\n  const { apiPath, maxLength, placeholder, configPath } = FIELD_PROPS_TAGS;\n\n  let resetTimer = null;\n\n  useEffect(\n    () => () => {\n      clearTimeout(resetTimer);\n    },\n    [],\n  );\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  // posts all the tags at once as an array obj\n  const postUpdateToAPI = async (postValue: any) => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n    await postConfigUpdateToAPI({\n      apiPath,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({ fieldName: 'tags', value: postValue, path: configPath });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Tags updated.'));\n        setNewTagInput('');\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    if (!submitStatus) {\n      setSubmitStatus(null);\n    }\n    setNewTagInput(value);\n  };\n\n  // send to api and do stuff\n  const handleSubmitNewTag = () => {\n    resetStates();\n    const newTag = newTagInput.trim();\n    if (newTag === '') {\n      setSubmitStatus(createInputStatus(STATUS_WARNING, 'Please enter a tag'));\n      return;\n    }\n    if (tags.some(tag => tag.toLowerCase() === newTag.toLowerCase())) {\n      setSubmitStatus(createInputStatus(STATUS_WARNING, 'This tag is already used!'));\n      return;\n    }\n\n    const updatedTags = [...tags, newTag];\n    postUpdateToAPI(updatedTags);\n  };\n\n  const handleDeleteTag = index => {\n    resetStates();\n    const updatedTags = [...tags];\n    updatedTags.splice(index, 1);\n    postUpdateToAPI(updatedTags);\n  };\n\n  return (\n    <div className=\"tag-editor-container\">\n      <Title level={3} className=\"section-title\">\n        Add Tags\n      </Title>\n      <p className=\"description\">\n        This is a great way to categorize your Owncast server on the Directory!\n      </p>\n\n      <div className=\"edit-current-strings\">\n        {tags.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteTag(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"tag-input\"\n          value={newTagInput}\n          className=\"new-tag-input\"\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewTag}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n}\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","__webpack_require__","Title","Typography","TAG_COLOR","EditValueArray","title","description","placeholder","maxLength","values","handleDeleteIndex","handleCreateString","submitStatus","continuousStatusMessage","param","newStringInput","setNewStringInput","useState","handleInputChange","value","handleSubmitNewString","newString","trim","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","level","p","map","tag","index","handleClose","Tag","closable","onClose","color","concat","FormStatusIndicator","status","TextField","fieldName","onChange","onPressEnter","defaultProps","EditInstanceTags","newTagInput","setNewTagInput","setSubmitStatus","serverStatusData","useContext","ServerStatusContext","serverConfig","setFieldInConfigState","instanceDetails","tags","apiPath","configPath","FIELD_PROPS_TAGS","resetTimer","useEffect","clearTimeout","resetStates","postUpdateToAPI","postValue","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","setTimeout","RESET_TIMEOUT","onError","STATUS_ERROR","message","handleSubmitNewTag","newTag","STATUS_WARNING","some","toLowerCase","updatedTags","handleDeleteTag","splice","STATUS_INVALID","INPUT_STATES","type","icon","CheckCircleFilled","style","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","customStyles","extraPageContent","logo","name","nsfw","socialHandles","streamTitle","summary","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","enabled","endpoint","region","secret","servingEndpoint","forcePathStyle","yp","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","result","fetchData","STATUS","error","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue","Provider","propTypes","PropTypes","__webpack_exports__"],"sourceRoot":""}