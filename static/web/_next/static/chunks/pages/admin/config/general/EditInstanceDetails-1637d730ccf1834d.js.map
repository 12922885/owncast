{"version":3,"file":"static/chunks/pages/admin/config/general/EditInstanceDetails-1637d730ccf1834d.js","mappings":"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","sources":["webpack://_N_E/?1309","webpack://_N_E/./components/config/TextFieldWithSubmit.tsx","webpack://_N_E/./components/config/ToggleSwitch.tsx","webpack://_N_E/./components/config/EditLogo.tsx","webpack://_N_E/./pages/admin/config/general/EditInstanceDetails.tsx","webpack://_N_E/./utils/images.ts","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config/general/EditInstanceDetails\",\n      function () {\n        return require(\"private-next-pages/admin/config/general/EditInstanceDetails.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config/general/EditInstanceDetails\"])\n      });\n    }\n  ","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import { Button, Upload } from 'antd';\nimport { RcFile } from 'antd/lib/upload/interface';\nimport { LoadingOutlined, UploadOutlined } from '@ant-design/icons';\nimport React, { useState, useContext, FC } from 'react';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  TEXTFIELD_PROPS_LOGO,\n} from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { NEXT_PUBLIC_API_HOST } from '../../utils/apis';\n\nimport {\n  ACCEPTED_IMAGE_TYPES,\n  getBase64,\n  MAX_IMAGE_FILESIZE,\n  readableBytes,\n} from '../../utils/images';\n\nexport const EditLogo: FC = () => {\n  const [logoUrl, setlogoUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [logoCachedbuster, setLogoCacheBuster] = useState(0);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState, serverConfig } = serverStatusData || {};\n  const currentLogo = serverConfig?.instanceDetails?.logo;\n\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n  let resetTimer = null;\n\n  const { apiPath, tip } = TEXTFIELD_PROPS_LOGO;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  // validate file type and create base64 encoded img\n  const beforeUpload = (file: RcFile) => {\n    setLoading(true);\n\n    // eslint-disable-next-line consistent-return\n    return new Promise<void>((res, rej) => {\n      if (file.size > MAX_IMAGE_FILESIZE) {\n        const msg = `File size is too big: ${readableBytes(file.size)}`;\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setLoading(false);\n        // eslint-disable-next-line no-promise-executor-return\n        return rej();\n      }\n      if (!ACCEPTED_IMAGE_TYPES.includes(file.type)) {\n        const msg = `File type is not supported: ${file.type}`;\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setLoading(false);\n        // eslint-disable-next-line no-promise-executor-return\n        return rej();\n      }\n\n      getBase64(file, (url: string) => {\n        setlogoUrl(url);\n        setTimeout(() => res(), 100);\n      });\n    });\n  };\n\n  // Post new logo to api\n  const handleLogoUpdate = async () => {\n    if (logoUrl !== currentLogo) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: logoUrl },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName: 'logo', value: logoUrl, path: '' });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n          setLoading(false);\n          setLogoCacheBuster(Math.floor(Math.random() * 100)); // Force logo to re-load\n        },\n        onError: (msg: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n          setLoading(false);\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  const logoDisplayUrl = `${NEXT_PUBLIC_API_HOST}logo?random=${logoCachedbuster}`;\n\n  return (\n    <div className=\"formfield-container logo-upload-container\">\n      <div className=\"label-side\">\n        <span className=\"formfield-label\">Logo</span>\n      </div>\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <img src={logoDisplayUrl} alt=\"avatar\" className=\"logo-preview\" />\n          <Upload\n            name=\"logo\"\n            listType=\"picture\"\n            className=\"avatar-uploader\"\n            showUploadList={false}\n            accept={ACCEPTED_IMAGE_TYPES.join(',')}\n            beforeUpload={beforeUpload}\n            customRequest={handleLogoUpdate}\n            disabled={loading}\n          >\n            {loading ? (\n              <LoadingOutlined style={{ color: 'white' }} />\n            ) : (\n              <Button icon={<UploadOutlined />} />\n            )}\n          </Upload>\n        </div>\n        <FormStatusIndicator status={submitStatus} />\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Typography } from 'antd';\nimport {\n  TextFieldWithSubmit,\n  TEXTFIELD_TYPE_TEXTAREA,\n  TEXTFIELD_TYPE_URL,\n} from '../../../../components/config/TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  TEXTFIELD_PROPS_INSTANCE_URL,\n  TEXTFIELD_PROPS_SERVER_NAME,\n  TEXTFIELD_PROPS_SERVER_SUMMARY,\n  TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE,\n  API_YP_SWITCH,\n  FIELD_PROPS_YP,\n  FIELD_PROPS_NSFW,\n  FIELD_PROPS_HIDE_VIEWER_COUNT,\n} from '../../../../utils/config-constants';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport { ToggleSwitch } from '../../../../components/config/ToggleSwitch';\nimport { EditLogo } from '../../../../components/config/EditLogo';\n\nconst { Title } = Typography;\n\nexport default function EditInstanceDetails() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n\n  const { instanceDetails, yp } = serverConfig;\n  const { instanceUrl } = yp;\n\n  useEffect(() => {\n    setFormDataValues({\n      ...instanceDetails,\n      ...yp,\n    });\n  }, [instanceDetails, yp]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  // if instanceUrl is empty, we should also turn OFF the `enabled` field of directory.\n  const handleSubmitInstanceUrl = () => {\n    if (formDataValues.instanceUrl === '') {\n      if (yp.enabled === true) {\n        postConfigUpdateToAPI({\n          apiPath: API_YP_SWITCH,\n          data: { value: false },\n        });\n      }\n    }\n  };\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  function handleHideViewerCountChange(enabled: boolean) {\n    handleFieldChange({ fieldName: 'hideViewerCount', value: enabled });\n  }\n\n  const hasInstanceUrl = instanceUrl !== '';\n\n  return (\n    <div className=\"edit-general-settings\">\n      <Title level={3} className=\"section-title\">\n        Configure Instance Details\n      </Title>\n      <br />\n\n      <TextFieldWithSubmit\n        fieldName=\"name\"\n        {...TEXTFIELD_PROPS_SERVER_NAME}\n        value={formDataValues.name}\n        initialValue={instanceDetails.name}\n        onChange={handleFieldChange}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_INSTANCE_URL}\n        value={formDataValues.instanceUrl}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"summary\"\n        {...TEXTFIELD_PROPS_SERVER_SUMMARY}\n        type={TEXTFIELD_TYPE_TEXTAREA}\n        value={formDataValues.summary}\n        initialValue={instanceDetails.summary}\n        onChange={handleFieldChange}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"offlineMessage\"\n        {...TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE}\n        type={TEXTFIELD_TYPE_TEXTAREA}\n        value={formDataValues.offlineMessage}\n        initialValue={instanceDetails.offlineMessage}\n        onChange={handleFieldChange}\n      />\n\n      {/* Logo section */}\n      <EditLogo />\n\n      <ToggleSwitch\n        fieldName=\"hideViewerCount\"\n        useSubmit\n        {...FIELD_PROPS_HIDE_VIEWER_COUNT}\n        checked={formDataValues.hideViewerCount}\n        onChange={handleHideViewerCountChange}\n      />\n\n      <br />\n      <p className=\"description\">\n        Increase your audience by appearing in the{' '}\n        <a href=\"https://directory.owncast.online\" target=\"_blank\" rel=\"noreferrer\">\n          <strong>Owncast Directory</strong>\n        </a>\n        . This is an external service run by the Owncast project.{' '}\n        <a\n          href=\"https://owncast.online/docs/directory/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more\n        </a>\n        .\n      </p>\n      {!yp.instanceUrl && (\n        <p className=\"description\">\n          You must set your <strong>Server URL</strong> above to enable the directory.\n        </p>\n      )}\n\n      <div className=\"config-yp-container\">\n        <ToggleSwitch\n          fieldName=\"enabled\"\n          useSubmit\n          {...FIELD_PROPS_YP}\n          checked={formDataValues.enabled}\n          disabled={!hasInstanceUrl}\n        />\n        <ToggleSwitch\n          fieldName=\"nsfw\"\n          useSubmit\n          {...FIELD_PROPS_NSFW}\n          checked={formDataValues.nsfw}\n          disabled={!hasInstanceUrl}\n        />\n      </div>\n    </div>\n  );\n}\n","export const MAX_IMAGE_FILESIZE = 2097152;\nexport const ACCEPTED_IMAGE_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\n\nexport function getBase64(img: File | Blob, callback: (imageUrl: string | ArrayBuffer) => void) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nexport function readableBytes(bytes: number): string {\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  const SIZE_UNITS = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const size = Number((bytes / Math.pow(1024, index)).toFixed(2)) * 1;\n\n  return `${size} ${SIZE_UNITS[index]}`;\n}\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","__webpack_require__","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","param","submitStatus","setSubmitStatus","useState","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","fieldName","required","tip","status","value","onChange","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","trim","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","concat","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","TextField","onBlur","p","FormStatusIndicator","Button","type","size","onClick","disabled","defaultProps","ToggleSwitch","checked","reversed","label","useSubmit","isChecked","isCheckedSend","loading","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","EditLogo","serverConfig","logoUrl","setlogoUrl","setLoading","logoCachedbuster","setLogoCacheBuster","currentLogo","instanceDetails","logo","TEXTFIELD_PROPS_LOGO","beforeUpload","Promise","res","rej","file","MAX_IMAGE_FILESIZE","msg","readableBytes","ACCEPTED_IMAGE_TYPES","getBase64","url","handleLogoUpdate","Math","floor","random","logoDisplayUrl","NEXT_PUBLIC_API_HOST","jsx_runtime","img","src","alt","Upload","name","listType","showUploadList","accept","customRequest","LoadingOutlined","style","color","icon","UploadOutlined","Title","Typography","EditInstanceDetails","formDataValues","setFormDataValues","yp","instanceUrl","handleSubmitInstanceUrl","enabled","API_YP_SWITCH","handleFieldChange","hasInstanceUrl","level","br","TEXTFIELD_PROPS_SERVER_NAME","TEXTFIELD_PROPS_INSTANCE_URL","TEXTFIELD_PROPS_SERVER_SUMMARY","summary","TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE","offlineMessage","FIELD_PROPS_HIDE_VIEWER_COUNT","hideViewerCount","a","href","target","rel","strong","FIELD_PROPS_YP","FIELD_PROPS_NSFW","nsfw","callback","reader","FileReader","addEventListener","result","readAsDataURL","bytes","index","log","Number","pow","toFixed","SIZE_UNITS","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","CheckCircleFilled","ExclamationCircleFilled","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","customStyles","extraPageContent","socialHandles","streamTitle","tags","title","welcomeMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","fetchData","STATUS","error","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue","Provider","propTypes","PropTypes","__webpack_exports__"],"sourceRoot":""}