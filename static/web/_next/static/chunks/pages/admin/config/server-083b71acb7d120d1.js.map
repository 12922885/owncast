{"version":3,"file":"static/chunks/pages/admin/config/server-083b71acb7d120d1.js","mappings":"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","sources":["webpack://_N_E/?dfb8","webpack://_N_E/./components/admin/TextFieldWithSubmit.tsx","webpack://_N_E/./components/admin/ToggleSwitch.tsx","webpack://_N_E/./components/admin/config/server/StreamKeys.tsx","webpack://_N_E/./components/admin/ResetYP.tsx","webpack://_N_E/./components/admin/EditInstanceDetails2.tsx","webpack://_N_E/./components/admin/config/server/ServerConfig.tsx","webpack://_N_E/./components/admin/config/server/EditStorage.tsx","webpack://_N_E/./components/admin/config/server/StorageConfig.tsx","webpack://_N_E/./pages/admin/config/server/index.tsx","webpack://_N_E/./utils/alert-message-context.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config/server\",\n      function () {\n        return require(\"private-next-pages/admin/config/server/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config/server\"])\n      });\n    }\n  ","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import React, { useContext, useState } from 'react';\nimport { Table, Space, Button, Typography, Alert, Input, Form } from 'antd';\nimport { DeleteOutlined, EyeOutlined, PlusOutlined } from '@ant-design/icons';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\n\nimport { fetchData, UPDATE_STREAM_KEYS } from '../../../../utils/apis';\n\nconst { Paragraph } = Typography;\nconst { Item } = Form;\n\nconst saveKeys = async (keys, setError) => {\n  try {\n    await fetchData(UPDATE_STREAM_KEYS, {\n      method: 'POST',\n      auth: true,\n      data: { value: keys },\n    });\n  } catch (error) {\n    console.error(error);\n    setError(error);\n  }\n};\n\nconst AddKeyForm = ({ setShowAddKeyForm, setFieldInConfigState, streamKeys, setError }) => {\n  const handleAddKey = (newkey: any) => {\n    const updatedKeys = [...streamKeys, newkey];\n\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: updatedKeys,\n    });\n\n    saveKeys(updatedKeys, setError);\n\n    setShowAddKeyForm(false);\n  };\n\n  return (\n    <Form layout=\"inline\" autoComplete=\"off\" onFinish={handleAddKey}>\n      <Item label=\"Key\" name=\"key\" tooltip=\"The key you provide your broadcasting software\">\n        <Input placeholder=\"def456\" />\n      </Item>\n      <Item label=\"Comment\" name=\"comment\" tooltip=\"For remembering why you added this key\">\n        <Input placeholder=\"My OBS Key\" />\n      </Item>\n\n      <Button type=\"primary\" htmlType=\"submit\">\n        Add\n      </Button>\n    </Form>\n  );\n};\n\nconst AddKeyButton = ({ setShowAddKeyForm }) => (\n  <Button type=\"default\" onClick={() => setShowAddKeyForm(true)}>\n    <PlusOutlined />\n  </Button>\n);\n\nconst StreamKeys = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { streamKeys } = serverConfig;\n  const [showAddKeyForm, setShowAddKeyForm] = useState(false);\n  const [showKeyMap, setShowKeyMap] = useState({});\n  const [error, setError] = useState(null);\n\n  const handleDeleteKey = keyToRemove => {\n    const newKeys = streamKeys.filter(k => k !== keyToRemove);\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: newKeys,\n    });\n    saveKeys(newKeys, setError);\n  };\n\n  const handleToggleShowKey = key => {\n    setShowKeyMap({\n      ...showKeyMap,\n      [key]: !showKeyMap[key],\n    });\n  };\n\n  const columns = [\n    {\n      title: 'Key',\n      dataIndex: 'key',\n      key: 'key',\n      render: text => (\n        <Space direction=\"horizontal\">\n          <Paragraph copyable>{showKeyMap[text] ? text : '**********'}</Paragraph>\n\n          <Button\n            type=\"link\"\n            style={{ top: '-7px' }}\n            icon={<EyeOutlined />}\n            onClick={() => handleToggleShowKey(text)}\n          />\n        </Space>\n      ),\n    },\n    {\n      title: 'Comment',\n      dataIndex: 'comment',\n      key: 'comment',\n    },\n    {\n      title: '',\n      key: 'delete',\n      render: text => <Button onClick={() => handleDeleteKey(text)} icon={<DeleteOutlined />} />,\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        A streaming key is used with your broadcasting software to authenticate itself to Owncast.\n        Most people will only need one. However, if you share a server with others or you want\n        different keys for different broadcasting sources you can add more here.\n      </Paragraph>\n      <Paragraph>\n        These keys are unrelated to the admin password and will not grant you access to make changes\n        to Owncast&apos;s configuration.\n      </Paragraph>\n      <Paragraph>\n        Read more about broadcasting at{' '}\n        <a\n          href=\"https://owncast.online/docs/broadcasting/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          the documentation\n        </a>\n        .\n      </Paragraph>\n\n      <Space direction=\"vertical\" style={{ width: '70%' }}>\n        {error && <Alert type=\"error\" message=\"Saving Keys Error\" description={error} />}\n\n        {streamKeys.length === 0 && (\n          <Alert\n            message=\"No stream keys!\"\n            description=\"You will not be able to stream until you create at least one stream key and add it to your broadcasting software.\"\n            type=\"error\"\n          />\n        )}\n\n        <Table\n          rowKey=\"key\"\n          columns={columns}\n          dataSource={streamKeys}\n          pagination={false}\n          // eslint-disable-next-line react/no-unstable-nested-components\n          footer={() =>\n            showAddKeyForm ? (\n              <AddKeyForm\n                setShowAddKeyForm={setShowAddKeyForm}\n                streamKeys={streamKeys}\n                setFieldInConfigState={setFieldInConfigState}\n                setError={setError}\n              />\n            ) : (\n              <AddKeyButton setShowAddKeyForm={setShowAddKeyForm} />\n            )\n          }\n        />\n        <br />\n      </Space>\n    </div>\n  );\n};\nexport default StreamKeys;\n","import { Popconfirm, Button, Typography } from 'antd';\nimport { FC, useContext, useState } from 'react';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\n\nimport { API_YP_RESET, fetchData } from '../../utils/apis';\nimport { RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const ResetYP: FC = () => {\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const resetDirectoryRegistration = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    try {\n      await fetchData(API_YP_RESET);\n      setMessage('');\n      setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    } catch (error) {\n      setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${error}`));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  return (\n    <>\n      <Typography.Title level={3} className=\"section-title\">\n        Reset Directory\n      </Typography.Title>\n      <p className=\"description\">\n        If you are experiencing issues with your listing on the Owncast Directory and were asked to\n        &quot;reset&quot; your connection to the service, you can do that here. The next time you go\n        live it will try and re-register your server with the directory from scratch.\n      </p>\n\n      <Popconfirm\n        placement=\"topLeft\"\n        title=\"Are you sure you want to reset your connection to the Owncast directory?\"\n        onConfirm={resetDirectoryRegistration}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button type=\"primary\">Reset Directory Connection</Button>\n      </Popconfirm>\n      <p>\n        <FormStatusIndicator status={submitStatus} />\n      </p>\n    </>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Button, Collapse, Typography } from 'antd';\nimport { CopyOutlined, RedoOutlined } from '@ant-design/icons';\nimport dynamic from 'next/dynamic';\nimport { TEXTFIELD_TYPE_NUMBER, TEXTFIELD_TYPE_PASSWORD, TEXTFIELD_TYPE_URL } from './TextField';\nimport { TextFieldWithSubmit } from './TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\nimport {\n  TEXTFIELD_PROPS_FFMPEG,\n  TEXTFIELD_PROPS_RTMP_PORT,\n  TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE,\n  TEXTFIELD_PROPS_ADMIN_PASSWORD,\n  TEXTFIELD_PROPS_WEB_PORT,\n} from '../../utils/config-constants';\nimport { UpdateArgs } from '../../types/config-section';\nimport { ResetYP } from './ResetYP';\n\n// Lazy loaded components\n\nconst Tooltip = dynamic(() => import('antd').then(mod => mod.Tooltip), {\n  ssr: false,\n});\n\nconst { Panel } = Collapse;\n\n// eslint-disable-next-line react/function-component-definition\nexport default function EditInstanceDetails() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const { serverConfig } = serverStatusData || {};\n\n  const { adminPassword, ffmpegPath, rtmpServerPort, webServerPort, yp, socketHostOverride } =\n    serverConfig;\n\n  const [copyIsVisible, setCopyVisible] = useState(false);\n\n  const COPY_TOOLTIP_TIMEOUT = 3000;\n\n  useEffect(() => {\n    setFormDataValues({\n      adminPassword,\n      ffmpegPath,\n      rtmpServerPort,\n      webServerPort,\n      socketHostOverride,\n    });\n  }, [serverConfig]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const showConfigurationRestartMessage = () => {\n    setMessage('Updating server settings requires a restart of your Owncast server.');\n  };\n\n  const showStreamKeyChangeMessage = () => {\n    setMessage(\n      'Changing your stream key will log you out of the admin and block you from streaming until you change the key in your broadcasting software.',\n    );\n  };\n\n  const showFfmpegChangeMessage = () => {\n    if (serverStatusData.online) {\n      setMessage('The updated ffmpeg path will be used when starting your next live stream.');\n    }\n  };\n\n  function generateStreamKey() {\n    let key = '';\n    for (let i = 0; i < 3; i += 1) {\n      key += Math.random().toString(36).substring(2);\n    }\n\n    handleFieldChange({ fieldName: 'streamKey', value: key });\n  }\n\n  function copyStreamKey() {\n    navigator.clipboard.writeText(formDataValues.streamKey).then(() => {\n      setCopyVisible(true);\n      setTimeout(() => setCopyVisible(false), COPY_TOOLTIP_TIMEOUT);\n    });\n  }\n\n  return (\n    <div className=\"edit-server-details-container\">\n      <div className=\"field-container field-streamkey-container\">\n        <div className=\"left-side\">\n          <TextFieldWithSubmit\n            fieldName=\"adminPassword\"\n            {...TEXTFIELD_PROPS_ADMIN_PASSWORD}\n            value={formDataValues.adminPassword}\n            initialValue={adminPassword}\n            type={TEXTFIELD_TYPE_PASSWORD}\n            onChange={handleFieldChange}\n            onSubmit={showStreamKeyChangeMessage}\n          />\n          <div className=\"streamkey-actions\">\n            <Tooltip title=\"Generate a stream key\">\n              <Button icon={<RedoOutlined />} size=\"small\" onClick={generateStreamKey} />\n            </Tooltip>\n\n            <Tooltip\n              className=\"copy-tooltip\"\n              title={copyIsVisible ? 'Copied!' : 'Copy to clipboard'}\n            >\n              <Button icon={<CopyOutlined />} size=\"small\" onClick={copyStreamKey} />\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n      <TextFieldWithSubmit\n        fieldName=\"ffmpegPath\"\n        {...TEXTFIELD_PROPS_FFMPEG}\n        value={formDataValues.ffmpegPath}\n        initialValue={ffmpegPath}\n        onChange={handleFieldChange}\n        onSubmit={showFfmpegChangeMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"webServerPort\"\n        {...TEXTFIELD_PROPS_WEB_PORT}\n        value={formDataValues.webServerPort}\n        initialValue={webServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"rtmpServerPort\"\n        {...TEXTFIELD_PROPS_RTMP_PORT}\n        value={formDataValues.rtmpServerPort}\n        initialValue={rtmpServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <Collapse className=\"advanced-settings\">\n        <Panel header=\"Advanced Settings\" key=\"1\">\n          <Typography.Paragraph>\n            If you have a CDN in front of your entire Owncast instance, specify your origin server\n            here for the websocket to connect to. Most people will never need to set this.\n          </Typography.Paragraph>\n          <TextFieldWithSubmit\n            fieldName=\"socketHostOverride\"\n            {...TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE}\n            value={formDataValues.socketHostOverride}\n            initialValue={socketHostOverride || ''}\n            type={TEXTFIELD_TYPE_URL}\n            onChange={handleFieldChange}\n          />\n          {yp.enabled && <ResetYP />}\n        </Panel>\n      </Collapse>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditInstanceDetails from '../../EditInstanceDetails2';\n\n// eslint-disable-next-line react/function-component-definition\nexport default function ConfigServerDetails() {\n  return (\n    <div className=\"config-server-details-form\">\n      <p className=\"description\">\n        You should change your admin password from the default and keep it safe. For most people\n        it&apos;s likely the other settings will not need to be changed.\n      </p>\n      <div className=\"form-module config-server-details-container\">\n        <EditInstanceDetails />\n      </div>\n    </div>\n  );\n}\n","import { Button, Collapse } from 'antd';\nimport classNames from 'classnames';\nimport React, { useContext, useState, useEffect } from 'react';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport { AlertMessageContext } from '../../../../utils/alert-message-context';\n\nimport {\n  postConfigUpdateToAPI,\n  API_S3_INFO,\n  RESET_TIMEOUT,\n  S3_TEXT_FIELDS_INFO,\n} from '../../../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../../../utils/input-statuses';\nimport { TextField } from '../../TextField';\nimport { FormStatusIndicator } from '../../FormStatusIndicator';\nimport { isValidUrl } from '../../../../utils/urls';\nimport { ToggleSwitch } from '../../ToggleSwitch';\n\nconst { Panel } = Collapse;\n\n// we could probably add more detailed checks here\n// `currentValues` is what's currently in the global store and in the db\nfunction checkSaveable(formValues: any, currentValues: any) {\n  const {\n    endpoint,\n    accessKey,\n    secret,\n    bucket,\n    region,\n    enabled,\n    servingEndpoint,\n    acl,\n    forcePathStyle,\n  } = formValues;\n  // if fields are filled out and different from what's in store, then return true\n  if (enabled) {\n    if (!!endpoint && isValidUrl(endpoint) && !!accessKey && !!secret && !!bucket && !!region) {\n      if (\n        enabled !== currentValues.enabled ||\n        endpoint !== currentValues.endpoint ||\n        accessKey !== currentValues.accessKey ||\n        secret !== currentValues.secret ||\n        bucket !== currentValues.bucket ||\n        region !== currentValues.region ||\n        (!currentValues.servingEndpoint && servingEndpoint !== '') ||\n        (!!currentValues.servingEndpoint && servingEndpoint !== currentValues.servingEndpoint) ||\n        (!currentValues.acl && acl !== '') ||\n        (!!currentValues.acl && acl !== currentValues.acl) ||\n        forcePathStyle !== currentValues.forcePathStyle\n      ) {\n        return true;\n      }\n    }\n  } else if (enabled !== currentValues.enabled) {\n    return true;\n  }\n  return false;\n}\n\n// eslint-disable-next-line react/function-component-definition\nexport default function EditStorage() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [shouldDisplayForm, setShouldDisplayForm] = useState(false);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { setMessage: setAlertMessage } = useContext(AlertMessageContext);\n\n  const { s3 } = serverConfig;\n  const {\n    accessKey = '',\n    acl = '',\n    bucket = '',\n    enabled = false,\n    endpoint = '',\n    region = '',\n    secret = '',\n    servingEndpoint = '',\n    forcePathStyle = false,\n  } = s3;\n\n  useEffect(() => {\n    setFormDataValues({\n      accessKey,\n      acl,\n      bucket,\n      enabled,\n      endpoint,\n      region,\n      secret,\n      servingEndpoint,\n      forcePathStyle,\n    });\n    setShouldDisplayForm(enabled);\n  }, [s3]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  // posts the whole state\n  const handleSave = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: API_S3_INFO,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({ fieldName: 's3', value: postValue, path: '' });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setAlertMessage(\n          'Changing your storage configuration will take place the next time you start a new stream.',\n        );\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (storageEnabled: boolean) => {\n    setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: storageEnabled });\n  };\n\n  const handleForcePathStyleSwitchChange = (forcePathStyleEnabled: boolean) => {\n    handleFieldChange({ fieldName: 'forcePathStyle', value: forcePathStyleEnabled });\n  };\n\n  const containerClass = classNames({\n    'edit-storage-container': true,\n    'form-module': true,\n    enabled: shouldDisplayForm,\n  });\n\n  const isSaveable = checkSaveable(formDataValues, s3);\n\n  return (\n    <div className={containerClass}>\n      <div className=\"enable-switch\">\n        <ToggleSwitch\n          apiPath=\"\"\n          fieldName=\"enabled\"\n          label=\"Use S3 Storage Provider\"\n          checked={formDataValues.enabled}\n          onChange={handleSwitchChange}\n        />\n        {/* <Switch\n          checked={formDataValues.enabled}\n          defaultChecked={formDataValues.enabled}\n          onChange={handleSwitchChange}\n          checkedChildren=\"ON\"\n          unCheckedChildren=\"OFF\"\n        />{' '}\n        Enabled */}\n      </div>\n\n      <div className=\"form-fields\">\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.endpoint}\n            value={formDataValues.endpoint}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.accessKey}\n            value={formDataValues.accessKey}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.secret}\n            value={formDataValues.secret}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.bucket}\n            value={formDataValues.bucket}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.region}\n            value={formDataValues.region}\n            onChange={handleFieldChange}\n          />\n        </div>\n\n        <Collapse className=\"advanced-section\">\n          <Panel header=\"Optional Settings\" key=\"1\">\n            <div className=\"field-container\">\n              <TextField\n                {...S3_TEXT_FIELDS_INFO.acl}\n                value={formDataValues.acl}\n                onChange={handleFieldChange}\n              />\n            </div>\n            <div className=\"field-container\">\n              <TextField\n                {...S3_TEXT_FIELDS_INFO.servingEndpoint}\n                value={formDataValues.servingEndpoint}\n                onChange={handleFieldChange}\n              />\n            </div>\n            <div className=\"enable-switch\">\n              <ToggleSwitch\n                {...S3_TEXT_FIELDS_INFO.forcePathStyle}\n                fieldName=\"forcePathStyle\"\n                checked={formDataValues.forcePathStyle}\n                onChange={handleForcePathStyleSwitchChange}\n              />\n            </div>\n          </Panel>\n        </Collapse>\n      </div>\n\n      <div className=\"button-container\">\n        <Button type=\"primary\" onClick={handleSave} disabled={!isSaveable}>\n          Save\n        </Button>\n        <FormStatusIndicator status={submitStatus} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditStorage from './EditStorage';\n\n// eslint-disable-next-line react/function-component-definition\nexport default function ConfigStorageInfo() {\n  return (\n    <>\n      <p className=\"description\">\n        Owncast supports optionally using external storage providers to stream your video. Learn\n        more about this by visiting our{' '}\n        <a\n          href=\"https://owncast.online/docs/storage/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storage Documentation\n        </a>\n        .\n      </p>\n      <p className=\"description\">\n        Configuring this incorrectly will likely cause your video to be unplayable. Double check the\n        documentation for your storage provider on how to configure the bucket you created for\n        Owncast.\n      </p>\n      <p className=\"description\">\n        Keep in mind this is for live streaming, not for archival, recording or VOD purposes.\n      </p>\n      <EditStorage />\n    </>\n  );\n}\n","import React from 'react';\nimport { Tabs } from 'antd';\n\nimport StreamKeys from '../../../../components/admin/config/server/StreamKeys';\nimport ServerConfig from '../../../../components/admin/config/server/ServerConfig';\nimport StorageConfig from '../../../../components/admin/config/server/StorageConfig';\n\nexport default function PublicFacingDetails() {\n  return (\n    <div className=\"config-public-details-page\">\n      <Tabs\n        defaultActiveKey=\"1\"\n        centered\n        items={[\n          {\n            label: `Server Config`,\n            key: '1',\n            children: <ServerConfig />,\n          },\n          {\n            label: `Stream Keys`,\n            key: '2',\n            children: <StreamKeys />,\n          },\n          {\n            label: `S3 Object Storage`,\n            key: '3',\n            children: <StorageConfig />,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AlertMessageContext = React.createContext({\n  message: null,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setMessage: (text?: string) => null,\n});\n\nconst AlertMessageProvider = ({ children }) => {\n  const [message, setMessage] = useState('');\n\n  const providerValue = {\n    message,\n    setMessage,\n  };\n  return (\n    <AlertMessageContext.Provider value={providerValue}>{children}</AlertMessageContext.Provider>\n  );\n};\n\nAlertMessageProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default AlertMessageProvider;\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","submitStatus","setSubmitStatus","useState","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","fieldName","required","tip","status","value","onChange","onSubmit","resetStates","clearTimeout","useEffect","textfieldContainerClass","classNames","submittable","div","className","TextField","onBlur","changedValue","changedFieldName","newValue","trim","replace","p","FormStatusIndicator","Button","type","size","onClick","async","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","message","STATUS_ERROR","setTimeout","RESET_TIMEOUT","disabled","defaultProps","ToggleSwitch","checked","reversed","label","useSubmit","loading","span","Switch","isChecked","isCheckedSend","defaultChecked","checkedChildren","unCheckedChildren","Paragraph","Typography","Item","Form","saveKeys","keys","setError","fetchData","UPDATE_STREAM_KEYS","method","auth","error","console","AddKeyForm","setShowAddKeyForm","streamKeys","layout","autoComplete","onFinish","newkey","updatedKeys","name","tooltip","Input","placeholder","htmlType","AddKeyButton","PlusOutlined","serverConfig","showAddKeyForm","showKeyMap","setShowKeyMap","columns","title","dataIndex","key","render","text","Space","direction","copyable","style","top","icon","EyeOutlined","handleToggleShowKey","keyToRemove","newKeys","filter","k","handleDeleteKey","DeleteOutlined","a","href","target","rel","width","Alert","description","length","Table","rowKey","dataSource","pagination","footer","br","ResetYP","setMessage","AlertMessageContext","level","Popconfirm","placement","onConfirm","API_YP_RESET","okText","cancelText","Tooltip","dynamic","then","mod","ssr","Panel","Collapse","EditInstanceDetails","formDataValues","setFormDataValues","adminPassword","ffmpegPath","rtmpServerPort","webServerPort","yp","socketHostOverride","copyIsVisible","setCopyVisible","handleFieldChange","showConfigurationRestartMessage","TEXTFIELD_PROPS_ADMIN_PASSWORD","TEXTFIELD_TYPE_PASSWORD","RedoOutlined","i","Math","random","toString","substring","CopyOutlined","navigator","clipboard","writeText","streamKey","TEXTFIELD_PROPS_FFMPEG","online","TEXTFIELD_PROPS_WEB_PORT","TEXTFIELD_TYPE_NUMBER","TEXTFIELD_PROPS_RTMP_PORT","header","TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE","enabled","ConfigServerDetails","EditStorage","shouldDisplayForm","setShouldDisplayForm","setAlertMessage","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","containerClass","isSaveable","formValues","currentValues","isValidUrl","checkSaveable","storageEnabled","S3_TEXT_FIELDS_INFO","forcePathStyleEnabled","postValue","API_S3_INFO","ConfigStorageInfo","PublicFacingDetails","Tabs","defaultActiveKey","centered","items","children","ServerConfig","StreamKeys","StorageConfig","React","AlertMessageProvider","providerValue","Provider","propTypes","PropTypes","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","CheckCircleFilled","color","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","instanceDetails","customStyles","extraPageContent","logo","nsfw","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","args","ServerStatusProvider","setStatus","config","setConfig","getStatus","result","STATUS","getStatusIntervalId","setInterval","FETCH_INTERVAL","SERVER_CONFIG","getConfig","clearInterval","updatedConfig"],"sourceRoot":""}