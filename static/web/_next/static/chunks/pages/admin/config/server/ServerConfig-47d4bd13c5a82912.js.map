{"version":3,"file":"static/chunks/pages/admin/config/server/ServerConfig-47d4bd13c5a82912.js","mappings":"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","sources":["webpack://_N_E/?5ef5","webpack://_N_E/./components/config/TextFieldWithSubmit.tsx","webpack://_N_E/./components/config/ResetYP.tsx","webpack://_N_E/./components/config/EditInstanceDetails2.tsx","webpack://_N_E/./pages/admin/config/server/ServerConfig.tsx","webpack://_N_E/./utils/alert-message-context.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config/server/ServerConfig\",\n      function () {\n        return require(\"private-next-pages/admin/config/server/ServerConfig.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config/server/ServerConfig\"])\n      });\n    }\n  ","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","import { Popconfirm, Button, Typography } from 'antd';\nimport { FC, useContext, useState } from 'react';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\n\nimport { API_YP_RESET, fetchData } from '../../utils/apis';\nimport { RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nexport const ResetYP: FC = () => {\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const resetDirectoryRegistration = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    try {\n      await fetchData(API_YP_RESET);\n      setMessage('');\n      setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    } catch (error) {\n      setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${error}`));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  return (\n    <>\n      <Typography.Title level={3} className=\"section-title\">\n        Reset Directory\n      </Typography.Title>\n      <p className=\"description\">\n        If you are experiencing issues with your listing on the Owncast Directory and were asked to\n        &quot;reset&quot; your connection to the service, you can do that here. The next time you go\n        live it will try and re-register your server with the directory from scratch.\n      </p>\n\n      <Popconfirm\n        placement=\"topLeft\"\n        title=\"Are you sure you want to reset your connection to the Owncast directory?\"\n        onConfirm={resetDirectoryRegistration}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button type=\"primary\">Reset Directory Connection</Button>\n      </Popconfirm>\n      <p>\n        <FormStatusIndicator status={submitStatus} />\n      </p>\n    </>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Button, Tooltip, Collapse, Typography } from 'antd';\nimport { CopyOutlined, RedoOutlined } from '@ant-design/icons';\nimport { TEXTFIELD_TYPE_NUMBER, TEXTFIELD_TYPE_PASSWORD, TEXTFIELD_TYPE_URL } from './TextField';\nimport { TextFieldWithSubmit } from './TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\nimport {\n  TEXTFIELD_PROPS_FFMPEG,\n  TEXTFIELD_PROPS_RTMP_PORT,\n  TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE,\n  TEXTFIELD_PROPS_ADMIN_PASSWORD,\n  TEXTFIELD_PROPS_WEB_PORT,\n} from '../../utils/config-constants';\nimport { UpdateArgs } from '../../types/config-section';\nimport { ResetYP } from './ResetYP';\n\nconst { Panel } = Collapse;\n\nexport const EditInstanceDetails = () => {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const { serverConfig } = serverStatusData || {};\n\n  const { adminPassword, ffmpegPath, rtmpServerPort, webServerPort, yp, socketHostOverride } =\n    serverConfig;\n\n  const [copyIsVisible, setCopyVisible] = useState(false);\n\n  const COPY_TOOLTIP_TIMEOUT = 3000;\n\n  useEffect(() => {\n    setFormDataValues({\n      adminPassword,\n      ffmpegPath,\n      rtmpServerPort,\n      webServerPort,\n      socketHostOverride,\n    });\n  }, [serverConfig]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const showConfigurationRestartMessage = () => {\n    setMessage('Updating server settings requires a restart of your Owncast server.');\n  };\n\n  const showStreamKeyChangeMessage = () => {\n    setMessage(\n      'Changing your stream key will log you out of the admin and block you from streaming until you change the key in your broadcasting software.',\n    );\n  };\n\n  const showFfmpegChangeMessage = () => {\n    if (serverStatusData.online) {\n      setMessage('The updated ffmpeg path will be used when starting your next live stream.');\n    }\n  };\n\n  function generateStreamKey() {\n    let key = '';\n    for (let i = 0; i < 3; i += 1) {\n      key += Math.random().toString(36).substring(2);\n    }\n\n    handleFieldChange({ fieldName: 'streamKey', value: key });\n  }\n\n  function copyStreamKey() {\n    navigator.clipboard.writeText(formDataValues.streamKey).then(() => {\n      setCopyVisible(true);\n      setTimeout(() => setCopyVisible(false), COPY_TOOLTIP_TIMEOUT);\n    });\n  }\n\n  return (\n    <div className=\"edit-server-details-container\">\n      <div className=\"field-container field-streamkey-container\">\n        <div className=\"left-side\">\n          <TextFieldWithSubmit\n            fieldName=\"adminPassword\"\n            {...TEXTFIELD_PROPS_ADMIN_PASSWORD}\n            value={formDataValues.adminPassword}\n            initialValue={adminPassword}\n            type={TEXTFIELD_TYPE_PASSWORD}\n            onChange={handleFieldChange}\n            onSubmit={showStreamKeyChangeMessage}\n          />\n          <div className=\"streamkey-actions\">\n            <Tooltip title=\"Generate a stream key\">\n              <Button icon={<RedoOutlined />} size=\"small\" onClick={generateStreamKey} />\n            </Tooltip>\n\n            <Tooltip\n              className=\"copy-tooltip\"\n              title={copyIsVisible ? 'Copied!' : 'Copy to clipboard'}\n            >\n              <Button icon={<CopyOutlined />} size=\"small\" onClick={copyStreamKey} />\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n      <TextFieldWithSubmit\n        fieldName=\"ffmpegPath\"\n        {...TEXTFIELD_PROPS_FFMPEG}\n        value={formDataValues.ffmpegPath}\n        initialValue={ffmpegPath}\n        onChange={handleFieldChange}\n        onSubmit={showFfmpegChangeMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"webServerPort\"\n        {...TEXTFIELD_PROPS_WEB_PORT}\n        value={formDataValues.webServerPort}\n        initialValue={webServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"rtmpServerPort\"\n        {...TEXTFIELD_PROPS_RTMP_PORT}\n        value={formDataValues.rtmpServerPort}\n        initialValue={rtmpServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <Collapse className=\"advanced-settings\">\n        <Panel header=\"Advanced Settings\" key=\"1\">\n          <Typography.Paragraph>\n            If you have a CDN in front of your entire Owncast instance, specify your origin server\n            here for the websocket to connect to. Most people will never need to set this.\n          </Typography.Paragraph>\n          <TextFieldWithSubmit\n            fieldName=\"socketHostOverride\"\n            {...TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE}\n            value={formDataValues.socketHostOverride}\n            initialValue={socketHostOverride || ''}\n            type={TEXTFIELD_TYPE_URL}\n            onChange={handleFieldChange}\n          />\n          {yp.enabled && <ResetYP />}\n        </Panel>\n      </Collapse>\n    </div>\n  );\n};\n","import React from 'react';\nimport { EditInstanceDetails } from '../../../../components/config/EditInstanceDetails2';\n\nexport default function ConfigServerDetails() {\n  return (\n    <div className=\"config-server-details-form\">\n      <p className=\"description\">\n        You should change your admin password from the default and keep it safe. For most people\n        it&apos;s likely the other settings will not need to be changed.\n      </p>\n      <div className=\"form-module config-server-details-container\">\n        <EditInstanceDetails />\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AlertMessageContext = React.createContext({\n  message: null,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setMessage: (text?: string) => null,\n});\n\nconst AlertMessageProvider = ({ children }) => {\n  const [message, setMessage] = useState('');\n\n  const providerValue = {\n    message,\n    setMessage,\n  };\n  return (\n    <AlertMessageContext.Provider value={providerValue}>{children}</AlertMessageContext.Provider>\n  );\n};\n\nAlertMessageProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default AlertMessageProvider;\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","__webpack_require__","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","param","submitStatus","setSubmitStatus","useState","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","fieldName","required","tip","status","value","onChange","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","trim","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","concat","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","TextField","onBlur","p","FormStatusIndicator","Button","type","size","onClick","disabled","defaultProps","ResetYP","setMessage","AlertMessageContext","resetDirectoryRegistration","fetchData","API_YP_RESET","error","jsx_runtime","Fragment","Typography","level","Popconfirm","placement","title","onConfirm","okText","cancelText","Panel","Collapse","EditInstanceDetails","formDataValues","setFormDataValues","serverConfig","adminPassword","ffmpegPath","rtmpServerPort","webServerPort","yp","socketHostOverride","copyIsVisible","setCopyVisible","handleFieldChange","showConfigurationRestartMessage","showStreamKeyChangeMessage","showFfmpegChangeMessage","online","TEXTFIELD_PROPS_ADMIN_PASSWORD","TEXTFIELD_TYPE_PASSWORD","Tooltip","icon","RedoOutlined","key","i","Math","random","toString","substring","CopyOutlined","navigator","clipboard","writeText","streamKey","then","TEXTFIELD_PROPS_FFMPEG","TEXTFIELD_PROPS_WEB_PORT","TEXTFIELD_TYPE_NUMBER","TEXTFIELD_PROPS_RTMP_PORT","header","TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE","enabled","ConfigServerDetails","React","AlertMessageProvider","children","Provider","propTypes","PropTypes","__webpack_exports__","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","CheckCircleFilled","style","color","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","instanceDetails","customStyles","extraPageContent","logo","name","nsfw","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","ServerStatusProvider","setStatus","config","setConfig","getStatus","result","STATUS","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue"],"sourceRoot":""}