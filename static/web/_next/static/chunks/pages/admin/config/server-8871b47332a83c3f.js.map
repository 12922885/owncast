{"version":3,"file":"static/chunks/pages/admin/config/server-8871b47332a83c3f.js","mappings":"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","sources":["webpack://_N_E/?dfb8","webpack://_N_E/./components/config/TextFieldWithSubmit.tsx","webpack://_N_E/./components/config/ResetYP.tsx","webpack://_N_E/./components/config/EditInstanceDetails2.tsx","webpack://_N_E/./pages/admin/config/server/ServerConfig.tsx","webpack://_N_E/./pages/admin/config/server/StorageConfig.tsx","webpack://_N_E/./pages/admin/config/server/StreamKeys.tsx","webpack://_N_E/./pages/admin/config/server/index.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config/server\",\n      function () {\n        return require(\"private-next-pages/admin/config/server/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config/server\"])\n      });\n    }\n  ","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","import { Popconfirm, Button, Typography } from 'antd';\nimport { FC, useContext, useState } from 'react';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\n\nimport { API_YP_RESET, fetchData } from '../../utils/apis';\nimport { RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nexport const ResetYP: FC = () => {\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const resetDirectoryRegistration = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    try {\n      await fetchData(API_YP_RESET);\n      setMessage('');\n      setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    } catch (error) {\n      setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${error}`));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  return (\n    <>\n      <Typography.Title level={3} className=\"section-title\">\n        Reset Directory\n      </Typography.Title>\n      <p className=\"description\">\n        If you are experiencing issues with your listing on the Owncast Directory and were asked to\n        &quot;reset&quot; your connection to the service, you can do that here. The next time you go\n        live it will try and re-register your server with the directory from scratch.\n      </p>\n\n      <Popconfirm\n        placement=\"topLeft\"\n        title=\"Are you sure you want to reset your connection to the Owncast directory?\"\n        onConfirm={resetDirectoryRegistration}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button type=\"primary\">Reset Directory Connection</Button>\n      </Popconfirm>\n      <p>\n        <FormStatusIndicator status={submitStatus} />\n      </p>\n    </>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Button, Tooltip, Collapse, Typography } from 'antd';\nimport { CopyOutlined, RedoOutlined } from '@ant-design/icons';\nimport { TEXTFIELD_TYPE_NUMBER, TEXTFIELD_TYPE_PASSWORD, TEXTFIELD_TYPE_URL } from './TextField';\nimport { TextFieldWithSubmit } from './TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\nimport {\n  TEXTFIELD_PROPS_FFMPEG,\n  TEXTFIELD_PROPS_RTMP_PORT,\n  TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE,\n  TEXTFIELD_PROPS_ADMIN_PASSWORD,\n  TEXTFIELD_PROPS_WEB_PORT,\n} from '../../utils/config-constants';\nimport { UpdateArgs } from '../../types/config-section';\nimport { ResetYP } from './ResetYP';\n\nconst { Panel } = Collapse;\n\nexport const EditInstanceDetails = () => {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const { serverConfig } = serverStatusData || {};\n\n  const { adminPassword, ffmpegPath, rtmpServerPort, webServerPort, yp, socketHostOverride } =\n    serverConfig;\n\n  const [copyIsVisible, setCopyVisible] = useState(false);\n\n  const COPY_TOOLTIP_TIMEOUT = 3000;\n\n  useEffect(() => {\n    setFormDataValues({\n      adminPassword,\n      ffmpegPath,\n      rtmpServerPort,\n      webServerPort,\n      socketHostOverride,\n    });\n  }, [serverConfig]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const showConfigurationRestartMessage = () => {\n    setMessage('Updating server settings requires a restart of your Owncast server.');\n  };\n\n  const showStreamKeyChangeMessage = () => {\n    setMessage(\n      'Changing your stream key will log you out of the admin and block you from streaming until you change the key in your broadcasting software.',\n    );\n  };\n\n  const showFfmpegChangeMessage = () => {\n    if (serverStatusData.online) {\n      setMessage('The updated ffmpeg path will be used when starting your next live stream.');\n    }\n  };\n\n  function generateStreamKey() {\n    let key = '';\n    for (let i = 0; i < 3; i += 1) {\n      key += Math.random().toString(36).substring(2);\n    }\n\n    handleFieldChange({ fieldName: 'streamKey', value: key });\n  }\n\n  function copyStreamKey() {\n    navigator.clipboard.writeText(formDataValues.streamKey).then(() => {\n      setCopyVisible(true);\n      setTimeout(() => setCopyVisible(false), COPY_TOOLTIP_TIMEOUT);\n    });\n  }\n\n  return (\n    <div className=\"edit-server-details-container\">\n      <div className=\"field-container field-streamkey-container\">\n        <div className=\"left-side\">\n          <TextFieldWithSubmit\n            fieldName=\"adminPassword\"\n            {...TEXTFIELD_PROPS_ADMIN_PASSWORD}\n            value={formDataValues.adminPassword}\n            initialValue={adminPassword}\n            type={TEXTFIELD_TYPE_PASSWORD}\n            onChange={handleFieldChange}\n            onSubmit={showStreamKeyChangeMessage}\n          />\n          <div className=\"streamkey-actions\">\n            <Tooltip title=\"Generate a stream key\">\n              <Button icon={<RedoOutlined />} size=\"small\" onClick={generateStreamKey} />\n            </Tooltip>\n\n            <Tooltip\n              className=\"copy-tooltip\"\n              title={copyIsVisible ? 'Copied!' : 'Copy to clipboard'}\n            >\n              <Button icon={<CopyOutlined />} size=\"small\" onClick={copyStreamKey} />\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n      <TextFieldWithSubmit\n        fieldName=\"ffmpegPath\"\n        {...TEXTFIELD_PROPS_FFMPEG}\n        value={formDataValues.ffmpegPath}\n        initialValue={ffmpegPath}\n        onChange={handleFieldChange}\n        onSubmit={showFfmpegChangeMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"webServerPort\"\n        {...TEXTFIELD_PROPS_WEB_PORT}\n        value={formDataValues.webServerPort}\n        initialValue={webServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"rtmpServerPort\"\n        {...TEXTFIELD_PROPS_RTMP_PORT}\n        value={formDataValues.rtmpServerPort}\n        initialValue={rtmpServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <Collapse className=\"advanced-settings\">\n        <Panel header=\"Advanced Settings\" key=\"1\">\n          <Typography.Paragraph>\n            If you have a CDN in front of your entire Owncast instance, specify your origin server\n            here for the websocket to connect to. Most people will never need to set this.\n          </Typography.Paragraph>\n          <TextFieldWithSubmit\n            fieldName=\"socketHostOverride\"\n            {...TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE}\n            value={formDataValues.socketHostOverride}\n            initialValue={socketHostOverride || ''}\n            type={TEXTFIELD_TYPE_URL}\n            onChange={handleFieldChange}\n          />\n          {yp.enabled && <ResetYP />}\n        </Panel>\n      </Collapse>\n    </div>\n  );\n};\n","import React from 'react';\nimport { EditInstanceDetails } from '../../../../components/config/EditInstanceDetails2';\n\nexport default function ConfigServerDetails() {\n  return (\n    <div className=\"config-server-details-form\">\n      <p className=\"description\">\n        You should change your admin password from the default and keep it safe. For most people\n        it&apos;s likely the other settings will not need to be changed.\n      </p>\n      <div className=\"form-module config-server-details-container\">\n        <EditInstanceDetails />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditStorage from './EditStorage';\n\nexport default function ConfigStorageInfo() {\n  return (\n    <>\n      <p className=\"description\">\n        Owncast supports optionally using external storage providers to stream your video. Learn\n        more about this by visiting our{' '}\n        <a\n          href=\"https://owncast.online/docs/storage/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storage Documentation\n        </a>\n        .\n      </p>\n      <p className=\"description\">\n        Configuring this incorrectly will likely cause your video to be unplayable. Double check the\n        documentation for your storage provider on how to configure the bucket you created for\n        Owncast.\n      </p>\n      <p className=\"description\">\n        Keep in mind this is for live streaming, not for archival, recording or VOD purposes.\n      </p>\n      <EditStorage />\n    </>\n  );\n}\n","import React, { useContext, useState } from 'react';\nimport { Table, Space, Button, Typography, Alert, Input, Form } from 'antd';\nimport { DeleteOutlined, EyeOutlined, PlusOutlined } from '@ant-design/icons';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\n\nimport { fetchData, UPDATE_STREAM_KEYS } from '../../../../utils/apis';\n\nconst { Paragraph } = Typography;\nconst { Item } = Form;\n\nconst saveKeys = async (keys, setError) => {\n  try {\n    await fetchData(UPDATE_STREAM_KEYS, {\n      method: 'POST',\n      auth: true,\n      data: { value: keys },\n    });\n  } catch (error) {\n    console.error(error);\n    setError(error);\n  }\n};\n\nconst AddKeyForm = ({ setShowAddKeyForm, setFieldInConfigState, streamKeys, setError }) => {\n  const handleAddKey = (newkey: any) => {\n    const updatedKeys = [...streamKeys, newkey];\n\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: updatedKeys,\n    });\n\n    saveKeys(updatedKeys, setError);\n\n    setShowAddKeyForm(false);\n  };\n\n  return (\n    <Form layout=\"inline\" autoComplete=\"off\" onFinish={handleAddKey}>\n      <Item label=\"Key\" name=\"key\" tooltip=\"The key you provide your broadcasting software\">\n        <Input placeholder=\"def456\" />\n      </Item>\n      <Item label=\"Comment\" name=\"comment\" tooltip=\"For remembering why you added this key\">\n        <Input placeholder=\"My OBS Key\" />\n      </Item>\n\n      <Button type=\"primary\" htmlType=\"submit\">\n        Add\n      </Button>\n    </Form>\n  );\n};\n\nconst AddKeyButton = ({ setShowAddKeyForm }) => (\n  <Button type=\"default\" onClick={() => setShowAddKeyForm(true)}>\n    <PlusOutlined />\n  </Button>\n);\n\nconst StreamKeys = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { streamKeys } = serverConfig;\n  const [showAddKeyForm, setShowAddKeyForm] = useState(false);\n  const [showKeyMap, setShowKeyMap] = useState({});\n  const [error, setError] = useState(null);\n\n  const handleDeleteKey = keyToRemove => {\n    const newKeys = streamKeys.filter(k => k !== keyToRemove);\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: newKeys,\n    });\n    saveKeys(newKeys, setError);\n  };\n\n  const handleToggleShowKey = key => {\n    setShowKeyMap({\n      ...showKeyMap,\n      [key]: !showKeyMap[key],\n    });\n  };\n\n  const columns = [\n    {\n      title: 'Key',\n      dataIndex: 'key',\n      key: 'key',\n      render: text => (\n        <Space direction=\"horizontal\">\n          <Paragraph copyable>{showKeyMap[text] ? text : '**********'}</Paragraph>\n\n          <Button\n            type=\"link\"\n            style={{ top: '-7px' }}\n            icon={<EyeOutlined />}\n            onClick={() => handleToggleShowKey(text)}\n          />\n        </Space>\n      ),\n    },\n    {\n      title: 'Comment',\n      dataIndex: 'comment',\n      key: 'comment',\n    },\n    {\n      title: '',\n      key: 'delete',\n      render: text => <Button onClick={() => handleDeleteKey(text)} icon={<DeleteOutlined />} />,\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        A streaming key is used with your broadcasting software to authenticate itself to Owncast.\n        Most people will only need one. However, if you share a server with others or you want\n        different keys for different broadcasting sources you can add more here.\n      </Paragraph>\n      <Paragraph>\n        These keys are unrelated to the admin password and will not grant you access to make changes\n        to Owncast&apos;s configuration.\n      </Paragraph>\n      <Paragraph>\n        Read more about broadcasting at{' '}\n        <a\n          href=\"https://owncast.online/docs/broadcasting/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          the documentation\n        </a>\n        .\n      </Paragraph>\n\n      <Space direction=\"vertical\" style={{ width: '70%' }}>\n        {error && <Alert type=\"error\" message=\"Saving Keys Error\" description={error} />}\n\n        {streamKeys.length === 0 && (\n          <Alert\n            message=\"No stream keys!\"\n            description=\"You will not be able to stream until you create at least one stream key and add it to your broadcasting software.\"\n            type=\"error\"\n          />\n        )}\n\n        <Table\n          rowKey=\"key\"\n          columns={columns}\n          dataSource={streamKeys}\n          pagination={false}\n          // eslint-disable-next-line react/no-unstable-nested-components\n          footer={() =>\n            showAddKeyForm ? (\n              <AddKeyForm\n                setShowAddKeyForm={setShowAddKeyForm}\n                streamKeys={streamKeys}\n                setFieldInConfigState={setFieldInConfigState}\n                setError={setError}\n              />\n            ) : (\n              <AddKeyButton setShowAddKeyForm={setShowAddKeyForm} />\n            )\n          }\n        />\n        <br />\n      </Space>\n    </div>\n  );\n};\nexport default StreamKeys;\n","import React from 'react';\nimport { Tabs } from 'antd';\n\nimport StreamKeys from './StreamKeys';\nimport ServerConfig from './ServerConfig';\nimport StorageConfig from './StorageConfig';\n\nexport default function PublicFacingDetails() {\n  return (\n    <div className=\"config-public-details-page\">\n      <Tabs\n        defaultActiveKey=\"1\"\n        centered\n        items={[\n          {\n            label: `Server Config`,\n            key: '1',\n            children: <ServerConfig />,\n          },\n          {\n            label: `Stream Keys`,\n            key: '2',\n            children: <StreamKeys />,\n          },\n          {\n            label: `S3 Object Storage`,\n            key: '3',\n            children: <StorageConfig />,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","param","submitStatus","setSubmitStatus","useState","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","fieldName","required","tip","status","value","onChange","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","trim","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","concat","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","TextField","onBlur","p","FormStatusIndicator","Button","type","size","onClick","disabled","defaultProps","ResetYP","setMessage","AlertMessageContext","resetDirectoryRegistration","fetchData","API_YP_RESET","error","jsx_runtime","Fragment","Typography","level","Popconfirm","placement","title","onConfirm","okText","cancelText","Panel","Collapse","EditInstanceDetails","formDataValues","setFormDataValues","serverConfig","adminPassword","ffmpegPath","rtmpServerPort","webServerPort","yp","socketHostOverride","copyIsVisible","setCopyVisible","handleFieldChange","showConfigurationRestartMessage","showStreamKeyChangeMessage","showFfmpegChangeMessage","online","TEXTFIELD_PROPS_ADMIN_PASSWORD","TEXTFIELD_TYPE_PASSWORD","Tooltip","icon","RedoOutlined","key","i","Math","random","toString","substring","CopyOutlined","navigator","clipboard","writeText","streamKey","then","TEXTFIELD_PROPS_FFMPEG","TEXTFIELD_PROPS_WEB_PORT","TEXTFIELD_TYPE_NUMBER","TEXTFIELD_PROPS_RTMP_PORT","header","TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE","enabled","ConfigServerDetails","ConfigStorageInfo","a","href","target","rel","EditStorage","Paragraph","Item","Form","saveKeys","keys","setError","UPDATE_STREAM_KEYS","method","auth","console","AddKeyForm","setShowAddKeyForm","streamKeys","handleAddKey","updatedKeys","newkey","layout","autoComplete","onFinish","label","name","tooltip","Input","placeholder","htmlType","AddKeyButton","PlusOutlined","StreamKeys","showAddKeyForm","showKeyMap","setShowKeyMap","handleDeleteKey","keyToRemove","newKeys","filter","k","handleToggleShowKey","Space","direction","style","width","Alert","description","length","Table","rowKey","columns","dataIndex","render","text","copyable","top","EyeOutlined","DeleteOutlined","dataSource","pagination","footer","br","__webpack_exports__","PublicFacingDetails","Tabs","defaultActiveKey","centered","items","children","ServerConfig","StorageConfig"],"sourceRoot":""}