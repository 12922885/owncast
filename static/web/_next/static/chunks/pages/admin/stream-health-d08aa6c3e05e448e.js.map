{"version":3,"file":"static/chunks/pages/admin/stream-health-d08aa6c3e05e448e.js","mappings":"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","sources":["webpack://_N_E/?2a06","webpack://_N_E/./components/admin/Chart.tsx","webpack://_N_E/./components/admin/StreamHealthOverview.tsx","webpack://_N_E/./pages/admin/stream-health.tsx","webpack://_N_E/./utils/server-status-context.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/stream-health\",\n      function () {\n        return require(\"private-next-pages/admin/stream-health.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/stream-health\"])\n      });\n    }\n  ","import ChartJs from 'chart.js/auto';\nimport Chartkick from 'chartkick';\nimport format from 'date-fns/format';\nimport { LineChart } from 'react-chartkick';\nimport { FC } from 'react';\n\n// from https://github.com/ankane/chartkick.js/blob/master/chart.js/chart.esm.js\nChartkick.use(ChartJs);\n\ninterface TimedValue {\n  time: Date;\n  value: number;\n}\n\nexport type ChartProps = {\n  data?: TimedValue[];\n  title?: string;\n  color: string;\n  unit: string;\n  yFlipped?: boolean;\n  yLogarithmic?: boolean;\n  dataCollections?: any[];\n};\n\nfunction createGraphDataset(dataArray) {\n  const dataValues = {};\n  dataArray.forEach(item => {\n    const dateObject = new Date(item.time);\n    const dateString = format(dateObject, 'H:mma');\n    dataValues[dateString] = item.value;\n  });\n  return dataValues;\n}\n\nexport const Chart: FC<ChartProps> = ({\n  data,\n  title,\n  color,\n  unit,\n  dataCollections,\n  yFlipped,\n  yLogarithmic,\n}) => {\n  const renderData = [];\n\n  if (data && data.length > 0) {\n    renderData.push({\n      name: title,\n      color,\n      data: createGraphDataset(data),\n    });\n  }\n\n  dataCollections.forEach(collection => {\n    renderData.push({\n      name: collection.name,\n      data: createGraphDataset(collection.data),\n      color: collection.color,\n      dataset: collection.options,\n    });\n  });\n\n  // ChartJs.defaults.scales.linear.reverse = true;\n\n  const options = {\n    scales: {\n      y: { reverse: false, type: 'linear' },\n      x: {\n        type: 'time',\n      },\n    },\n  };\n\n  options.scales.y.reverse = yFlipped;\n  options.scales.y.type = yLogarithmic ? 'logarithmic' : 'linear';\n\n  return (\n    <div className=\"line-chart-container\">\n      <LineChart\n        xtitle=\"Time\"\n        ytitle={title}\n        suffix={unit}\n        legend=\"bottom\"\n        color={color}\n        data={renderData}\n        download={title}\n        library={options}\n      />\n    </div>\n  );\n};\n\nChart.defaultProps = {\n  dataCollections: [],\n  data: [],\n  title: '',\n  yFlipped: false,\n  yLogarithmic: false,\n};\n","import { CheckCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Alert, Button, Col, Row, Statistic, Typography } from 'antd';\nimport Link from 'next/link';\nimport React, { FC, useContext } from 'react';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type StreamHealthOverviewProps = {\n  showTroubleshootButton?: Boolean;\n};\n\nexport const StreamHealthOverview: FC<StreamHealthOverviewProps> = ({ showTroubleshootButton }) => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { health } = serverStatusData;\n  if (!health) {\n    return null;\n  }\n\n  const { healthy, healthPercentage, message, representation } = health;\n  let color = '#3f8600';\n  let icon: 'success' | 'info' | 'warning' | 'error' = 'info';\n  if (healthPercentage < 80) {\n    color = '#cf000f';\n    icon = 'error';\n  } else if (healthPercentage < 30) {\n    color = '#f0ad4e';\n    icon = 'error';\n  }\n\n  return (\n    <div>\n      <Row gutter={8}>\n        <Col span={12}>\n          <Statistic\n            title=\"Healthy Stream\"\n            value={healthy ? 'Yes' : 'No'}\n            valueStyle={{ color }}\n            prefix={healthy ? <CheckCircleOutlined /> : <ExclamationCircleOutlined />}\n          />\n        </Col>\n        <Col span={12}>\n          <Statistic\n            title=\"Playback Health\"\n            value={healthPercentage}\n            valueStyle={{ color }}\n            suffix=\"%\"\n          />\n        </Col>\n      </Row>\n      <Row style={{ display: representation < 100 && representation !== 0 ? 'grid' : 'none' }}>\n        <Typography.Text\n          type=\"secondary\"\n          style={{ textAlign: 'center', fontSize: '0.7em', opacity: '0.3' }}\n        >\n          Stream health represents {representation}% of all known players. Other player status is\n          unknown.\n        </Typography.Text>\n      </Row>\n      <Row\n        gutter={16}\n        style={{ width: '100%', display: message ? 'grid' : 'none', marginTop: '10px' }}\n      >\n        <Col span={24}>\n          <Alert\n            message={message}\n            type={icon}\n            showIcon\n            action={\n              showTroubleshootButton && (\n                <Link passHref href=\"/stream-health\">\n                  <Button size=\"small\" type=\"text\" style={{ color: 'black' }}>\n                    TROUBLESHOOT\n                  </Button>\n                </Link>\n              )\n            }\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nStreamHealthOverview.defaultProps = {\n  showTroubleshootButton: true,\n};\n","/* eslint-disable react/no-unescaped-entities */\n// import { BulbOutlined, LaptopOutlined, SaveOutlined } from '@ant-design/icons';\nimport { Row, Col, Typography, Space, Statistic, Card, Alert, Spin } from 'antd';\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { ClockCircleOutlined, WarningOutlined, WifiOutlined } from '@ant-design/icons';\nimport { fetchData, FETCH_INTERVAL, API_STREAM_HEALTH_METRICS } from '../../utils/apis';\nimport { Chart } from '../../components/admin/Chart';\nimport { StreamHealthOverview } from '../../components/admin/StreamHealthOverview';\n\ninterface TimedValue {\n  time: Date;\n  value: Number;\n}\n\ninterface DescriptionBoxProps {\n  title: String;\n  description: ReactNode;\n}\n\nconst DescriptionBox = ({ title, description }: DescriptionBoxProps) => (\n  <div className=\"description-box\">\n    <Typography.Title>{title}</Typography.Title>\n    <Typography.Paragraph>{description}</Typography.Paragraph>\n  </div>\n);\n\nconst StreamHealth = () => {\n  const [errors, setErrors] = useState<TimedValue[]>([]);\n  const [qualityVariantChanges, setQualityVariantChanges] = useState<TimedValue[]>([]);\n\n  const [lowestLatency, setLowestLatency] = useState<TimedValue[]>();\n  const [highestLatency, setHighestLatency] = useState<TimedValue[]>();\n  const [medianLatency, setMedianLatency] = useState<TimedValue[]>([]);\n\n  const [medianSegmentDownloadDurations, setMedianSegmentDownloadDurations] = useState<\n    TimedValue[]\n  >([]);\n  const [maximumSegmentDownloadDurations, setMaximumSegmentDownloadDurations] = useState<\n    TimedValue[]\n  >([]);\n  const [minimumSegmentDownloadDurations, setMinimumSegmentDownloadDurations] = useState<\n    TimedValue[]\n  >([]);\n  const [minimumPlayerBitrate, setMinimumPlayerBitrate] = useState<TimedValue[]>([]);\n  const [medianPlayerBitrate, setMedianPlayerBitrate] = useState<TimedValue[]>([]);\n  const [maximumPlayerBitrate, setMaximumPlayerBitrate] = useState<TimedValue[]>([]);\n  const [availableBitrates, setAvailableBitrates] = useState<Number[]>([]);\n  const [segmentLength, setSegmentLength] = useState(0);\n\n  const getMetrics = async () => {\n    try {\n      const result = await fetchData(API_STREAM_HEALTH_METRICS);\n      setErrors(result.errors);\n      setQualityVariantChanges(result.qualityVariantChanges);\n\n      setHighestLatency(result.highestLatency);\n      setLowestLatency(result.lowestLatency);\n      setMedianLatency(result.medianLatency);\n\n      setMedianSegmentDownloadDurations(result.medianSegmentDownloadDuration);\n      setMaximumSegmentDownloadDurations(result.maximumSegmentDownloadDuration);\n      setMinimumSegmentDownloadDurations(result.minimumSegmentDownloadDuration);\n\n      setMinimumPlayerBitrate(result.minPlayerBitrate);\n      setMedianPlayerBitrate(result.medianPlayerBitrate);\n      setMaximumPlayerBitrate(result.maxPlayerBitrate);\n\n      setAvailableBitrates(result.availableBitrates);\n      setSegmentLength(result.segmentLength - 0.3);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getMetrics();\n    getStatusIntervalId = setInterval(getMetrics, FETCH_INTERVAL); // runs every 1 min.\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  const noData = (\n    <div>\n      <Typography.Title>Stream Performance</Typography.Title>\n      <Alert\n        type=\"info\"\n        message=\"\n        Data has not yet been collected. Once a stream has begun and viewers are watching this page\n        will be available.\"\n      />\n      <Spin size=\"large\">\n        <div style={{ marginTop: '50px', height: '100px' }} />\n      </Spin>\n    </div>\n  );\n  if (!errors?.length) {\n    return noData;\n  }\n\n  if (!medianLatency?.length) {\n    return noData;\n  }\n\n  if (!medianSegmentDownloadDurations?.length) {\n    return noData;\n  }\n\n  const errorChart = [\n    {\n      name: 'Errors',\n      color: '#B63FFF',\n      options: { radius: 3 },\n      data: errors,\n    },\n    {\n      name: 'Quality changes',\n      color: '#2087E2',\n      options: { radius: 2 },\n      data: qualityVariantChanges,\n    },\n  ];\n\n  const latencyChart = [\n    {\n      name: 'Median stream latency',\n      color: '#00FFFF',\n      options: { radius: 2 },\n      data: medianLatency,\n    },\n    {\n      name: 'Lowest stream latency',\n      color: '#02FD0D',\n      options: { radius: 2 },\n      data: lowestLatency,\n    },\n    {\n      name: 'Highest stream latency',\n      color: '#B63FFF',\n      options: { radius: 2 },\n      data: highestLatency,\n    },\n  ];\n\n  const segmentDownloadDurationChart = [\n    {\n      name: 'Max download duration',\n      color: '#B63FFF',\n      options: { radius: 2 },\n      data: maximumSegmentDownloadDurations,\n    },\n    {\n      name: 'Median download duration',\n      color: '#00FFFF',\n      options: { radius: 2 },\n      data: medianSegmentDownloadDurations,\n    },\n    {\n      name: 'Min download duration',\n      color: '#02FD0D',\n      options: { radius: 2 },\n      data: minimumSegmentDownloadDurations,\n    },\n    {\n      name: `Approximate limit`,\n      color: '#003FFF',\n      data: medianSegmentDownloadDurations.map(item => ({\n        time: item.time,\n        value: segmentLength,\n      })),\n      options: { radius: 0 },\n    },\n  ];\n\n  const bitrateChart = [\n    {\n      name: 'Lowest player speed',\n      color: '#B63FFF',\n      data: minimumPlayerBitrate,\n      options: { radius: 2 },\n    },\n    {\n      name: 'Median player speed',\n      color: '#00FFFF',\n      data: medianPlayerBitrate,\n      options: { radius: 2 },\n    },\n    {\n      name: 'Maximum player speed',\n      color: '#02FD0D',\n      data: maximumPlayerBitrate,\n      options: { radius: 2 },\n    },\n  ];\n\n  availableBitrates.forEach(bitrate => {\n    bitrateChart.push({\n      name: `Available bitrate`,\n      color: '#003FFF',\n      data: minimumPlayerBitrate.map(item => ({\n        time: item.time,\n        value: bitrate,\n      })),\n      options: { radius: 0 },\n    });\n  });\n\n  const currentSpeed = bitrateChart[0]?.data[bitrateChart[0].data.length - 1]?.value;\n  const currentDownloadSeconds =\n    medianSegmentDownloadDurations[medianSegmentDownloadDurations.length - 1]?.value;\n  const lowestVariant = availableBitrates.reduce((bitrate1, bitrate2) =>\n    bitrate1.valueOf() < bitrate2.valueOf() ? bitrate1 : bitrate2,\n  );\n\n  const latencyMedian = medianLatency[medianLatency.length - 1]?.value || 0;\n  const latencyMax = highestLatency[highestLatency.length - 1]?.value || 0;\n  const latencyMin = lowestLatency[lowestLatency.length - 1]?.value || 0;\n  const latencyStat = (Number(latencyMax) + Number(latencyMin) + Number(latencyMedian)) / 3;\n\n  let recentErrorCount = 0;\n  const errorValueCount = errorChart[0]?.data.length || 0;\n  if (errorValueCount > 5) {\n    const values = errorChart[0].data.slice(-5);\n    recentErrorCount = values.reduce((acc, curr) => acc + Number(curr.value), 0);\n  } else {\n    recentErrorCount = errorChart[0].data.reduce((acc, curr) => acc + Number(curr.value), 0);\n  }\n  const showStats = currentSpeed > 0 || currentDownloadSeconds > 0 || recentErrorCount > 0;\n  let bitrateError = null;\n  let speedError = null;\n\n  if (currentSpeed !== 0 && currentSpeed < lowestVariant) {\n    bitrateError = `One of your viewers is playing your stream at ${currentSpeed}kbps, slower than ${lowestVariant}kbps, the lowest quality you made available. Consider adding a lower quality with a lower bitrate if the errors over time warrant this.`;\n  }\n\n  if (currentDownloadSeconds > segmentLength) {\n    speedError =\n      'Your viewers may be consuming your video slower than required. This may be due to slow networks or your latency configuration. You need to decrease the amount of time viewers are taking to consume your video. Consider adding a lower quality with a lower bitrate or experiment with increasing the latency buffer setting.';\n  }\n\n  const errorStatColor = recentErrorCount > 0 ? '#B63FFF' : 'unset';\n  const statStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '80px',\n  };\n  return (\n    <>\n      <Typography.Title>Stream Performance</Typography.Title>\n      <Typography.Paragraph>\n        This tool hopes to help you identify and troubleshoot problems you may be experiencing with\n        your stream. It aims to aggregate experiences across your viewers, meaning one viewer with\n        an exceptionally bad experience may throw off numbers for the whole, especially with a low\n        number of viewers.\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        The data is only collected by those using the Owncast web interface and is unable to gain\n        insight into external players people may be using such as VLC, MPV, QuickTime, etc.\n      </Typography.Paragraph>\n      <Space direction=\"vertical\" size=\"middle\">\n        <Row justify=\"space-around\">\n          <Col style={{ width: '100%' }}>\n            <Card type=\"inner\">\n              <StreamHealthOverview showTroubleshootButton={false} />\n            </Card>\n          </Col>\n        </Row>\n        <Row\n          gutter={[16, 16]}\n          justify=\"space-around\"\n          style={{ display: showStats ? 'flex' : 'none' }}\n        >\n          <Col>\n            <Card type=\"inner\">\n              <div style={statStyle}>\n                <Statistic\n                  title=\"Viewer Playback Speed\"\n                  value={`${currentSpeed}`}\n                  prefix={<WifiOutlined style={{ marginRight: '5px' }} />}\n                  precision={0}\n                  suffix=\"kbps\"\n                />\n              </div>\n            </Card>\n          </Col>\n          <Col>\n            <Card type=\"inner\">\n              <div style={statStyle}>\n                <Statistic\n                  title=\"Viewer Latency\"\n                  value={`${latencyStat}`}\n                  prefix={<ClockCircleOutlined style={{ marginRight: '5px' }} />}\n                  precision={0}\n                  suffix=\"seconds\"\n                />\n              </div>\n            </Card>\n          </Col>\n          <Col>\n            <Card type=\"inner\">\n              <div style={statStyle}>\n                <Statistic\n                  title=\"Recent Playback Errors\"\n                  value={`${recentErrorCount || 0}`}\n                  valueStyle={{ color: errorStatColor }}\n                  prefix={<WarningOutlined style={{ marginRight: '5px' }} />}\n                  suffix=\"\"\n                />\n              </div>\n            </Card>\n          </Col>\n        </Row>\n\n        <Card>\n          <DescriptionBox\n            title=\"Video Segment Download\"\n            description={\n              <>\n                <Typography.Paragraph>\n                  Once a video segment takes too long to download a viewer will experience\n                  buffering. If you see slow downloads you should offer a lower quality for your\n                  viewers, or find other ways, possibly an external storage provider, a CDN or a\n                  faster network, to improve your stream quality. Increasing your latency buffer can\n                  also help for some viewers.\n                </Typography.Paragraph>\n                <Typography.Paragraph>\n                  In short, once the pink line consistently gets near the blue line, your stream is\n                  likely experiencing problems for viewers.\n                </Typography.Paragraph>\n              </>\n            }\n          />\n          {speedError && (\n            <Alert message=\"Slow downloads\" description={speedError} type=\"error\" showIcon />\n          )}\n          <Chart\n            title=\"Seconds\"\n            dataCollections={segmentDownloadDurationChart}\n            color=\"#FF7700\"\n            unit=\"s\"\n            yLogarithmic\n          />\n        </Card>\n        <Card>\n          <DescriptionBox\n            title=\"Player Network Speed\"\n            description={\n              <>\n                <Typography.Paragraph>\n                  The playback bitrate of your viewers. Once somebody's bitrate drops below the\n                  lowest video variant bitrate they will experience buffering. If you see viewers\n                  with slow connections trying to play your video you should consider offering an\n                  additional, lower quality.\n                </Typography.Paragraph>\n                <Typography.Paragraph>\n                  In short, once the pink line gets near the lowest blue line, your stream is likely\n                  experiencing problems for at least one of your viewers.\n                </Typography.Paragraph>\n              </>\n            }\n          />\n          {bitrateError && (\n            <Alert\n              message=\"Low bandwidth viewers\"\n              description={bitrateError}\n              type=\"error\"\n              showIcon\n            />\n          )}\n          <Chart\n            title=\"Lowest Player Bitrate\"\n            dataCollections={bitrateChart}\n            color=\"#FF7700\"\n            unit=\"kbps\"\n            yLogarithmic\n          />\n        </Card>\n        <Card>\n          <DescriptionBox\n            title=\"Errors and Quality Changes\"\n            description={\n              <>\n                <Typography.Paragraph>\n                  Recent number of errors, including buffering, and quality changes from across all\n                  your viewers. Errors can occur for many reasons, including browser issues,\n                  plugins, wifi problems, and they don't all represent fatal issues or something you\n                  have control over.\n                </Typography.Paragraph>\n                A quality change is not necessarily a negative thing, but if it's excessive and\n                coinciding with errors you should consider adding another quality variant.\n                <Typography.Paragraph />\n              </>\n            }\n          />\n          <Chart title=\"#\" dataCollections={errorChart} color=\"#FF7700\" unit=\"\" />\n        </Card>\n        <Card>\n          <DescriptionBox\n            title=\"Viewer Latency\"\n            description=\"An approximate number of seconds that your viewers are behind your live video. The largest cause of latency spikes is buffering. High latency itself is not a problem, and optimizing for low latency can result in buffering, resulting in even higher latency.\"\n          />\n          <Chart title=\"Seconds\" dataCollections={latencyChart} color=\"#FF7700\" unit=\"s\" />\n        </Card>\n      </Space>\n    </>\n  );\n};\nexport default StreamHealth;\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","createGraphDataset","dataArray","dataValues","forEach","item","dateObject","Date","time","dateString","format","value","Chartkick","ChartJs","Chart","data","title","color","unit","dataCollections","yFlipped","yLogarithmic","renderData","length","name","collection","dataset","options","scales","y","reverse","type","x","div","className","LineChart","xtitle","ytitle","suffix","legend","download","library","defaultProps","StreamHealthOverview","showTroubleshootButton","serverStatusData","useContext","ServerStatusContext","health","healthy","healthPercentage","message","representation","icon","Row","gutter","Col","span","Statistic","valueStyle","prefix","CheckCircleOutlined","ExclamationCircleOutlined","style","display","Typography","textAlign","fontSize","opacity","width","marginTop","Alert","showIcon","action","Link","passHref","href","Button","size","DescriptionBox","description","bitrateChart","medianSegmentDownloadDurations","medianLatency","highestLatency","lowestLatency","errorChart","errors","setErrors","useState","qualityVariantChanges","setQualityVariantChanges","setLowestLatency","setHighestLatency","setMedianLatency","setMedianSegmentDownloadDurations","maximumSegmentDownloadDurations","setMaximumSegmentDownloadDurations","minimumSegmentDownloadDurations","setMinimumSegmentDownloadDurations","minimumPlayerBitrate","setMinimumPlayerBitrate","medianPlayerBitrate","setMedianPlayerBitrate","maximumPlayerBitrate","setMaximumPlayerBitrate","availableBitrates","setAvailableBitrates","segmentLength","setSegmentLength","getMetrics","async","result","fetchData","API_STREAM_HEALTH_METRICS","medianSegmentDownloadDuration","maximumSegmentDownloadDuration","minimumSegmentDownloadDuration","minPlayerBitrate","maxPlayerBitrate","error","console","useEffect","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","noData","Spin","height","radius","latencyChart","segmentDownloadDurationChart","map","bitrate","currentSpeed","currentDownloadSeconds","lowestVariant","reduce","bitrate1","bitrate2","valueOf","latencyMedian","latencyMax","latencyMin","latencyStat","Number","recentErrorCount","slice","acc","curr","showStats","bitrateError","speedError","errorStatColor","statStyle","alignItems","justifyContent","Space","direction","justify","Card","WifiOutlined","marginRight","precision","ClockCircleOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","instanceDetails","customStyles","extraPageContent","logo","nsfw","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","enabled","endpoint","region","secret","servingEndpoint","forcePathStyle","yp","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","React","serverConfig","setFieldInConfigState","args","ServerStatusProvider","children","status","setStatus","config","setConfig","getStatus","STATUS","SERVER_CONFIG","getConfig","providerValue","fieldName","path","updatedConfig","Provider","propTypes","PropTypes"],"sourceRoot":""}