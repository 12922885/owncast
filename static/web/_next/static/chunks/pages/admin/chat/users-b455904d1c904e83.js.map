{"version":3,"file":"static/chunks/pages/admin/chat/users-b455904d1c904e83.js","mappings":"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","sources":["webpack://_N_E/?66df","webpack://_N_E/./components/BanUserButton.tsx","webpack://_N_E/./components/ModeratorUserButton.tsx","webpack://_N_E/./components/UserPopover.tsx","webpack://_N_E/./components/UserTable.tsx","webpack://_N_E/./components/ClientTable.tsx","webpack://_N_E/./components/BannedIPsTable.tsx","webpack://_N_E/./pages/admin/chat/users.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/chat/users\",\n      function () {\n        return require(\"private-next-pages/admin/chat/users.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/chat/users\"])\n      });\n    }\n  ","import { Modal, Button } from 'antd';\nimport { ExclamationCircleFilled, QuestionCircleFilled, StopTwoTone } from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_ENABLED_TOGGLE, fetchData } from '../utils/apis';\nimport { User } from '../types/chat';\n\nexport type BanUserButtonProps = {\n  user: User;\n  isEnabled: Boolean; // = this user's current status\n  label?: string;\n  onClick?: () => void;\n};\n\nexport const BanUserButton: FC<BanUserButtonProps> = ({ user, isEnabled, label, onClick }) => {\n  async function buttonClicked({ id }): Promise<Boolean> {\n    const data = {\n      userId: id,\n      enabled: !isEnabled, // set user to this value\n    };\n    try {\n      const result = await fetchData(USER_ENABLED_TOGGLE, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const actionString = isEnabled ? 'ban' : 'unban';\n  const icon = isEnabled ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>\n      {isEnabled ? ' and remove their messages?' : '?'}\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isEnabled ? 'Absolutely' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={isEnabled ? <StopTwoTone twoToneColor=\"#ff4d4f\" /> : null}\n      className=\"block-user-button\"\n    >\n      {label || actionString}\n    </Button>\n  );\n};\nBanUserButton.defaultProps = {\n  label: '',\n  onClick: null,\n};\n","import { Modal, Button } from 'antd';\nimport {\n  ExclamationCircleFilled,\n  QuestionCircleFilled,\n  StopTwoTone,\n  SafetyCertificateTwoTone,\n} from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_SET_MODERATOR, fetchData } from '../utils/apis';\nimport { User } from '../types/chat';\n\nexport type ModeratorUserButtonProps = {\n  user: User;\n  onClick?: () => void;\n};\n\nexport const ModeratorUserButton: FC<ModeratorUserButtonProps> = ({ user, onClick }) => {\n  async function buttonClicked({ id }, setAsModerator: Boolean): Promise<Boolean> {\n    const data = {\n      userId: id,\n      isModerator: setAsModerator,\n    };\n    try {\n      const result = await fetchData(USER_SET_MODERATOR, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const isModerator = user.scopes?.includes('MODERATOR');\n  const actionString = isModerator ? 'remove moderator' : 'add moderator';\n  const icon = isModerator ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>?\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user, !isModerator);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isModerator ? 'Yup!' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={\n        isModerator ? (\n          <StopTwoTone twoToneColor=\"#ff4d4f\" />\n        ) : (\n          <SafetyCertificateTwoTone twoToneColor=\"#22bb44\" />\n        )\n      }\n      className=\"block-user-button\"\n    >\n      {actionString}\n    </Button>\n  );\n};\n\nModeratorUserButton.defaultProps = {\n  onClick: null,\n};\n","// This displays a clickable user name (or whatever children element you provide), and displays a simple tooltip of created time. OnClick a modal with more information about the user is displayed.\n\nimport { useState, ReactNode, FC } from 'react';\nimport { Divider, Modal, Tooltip, Typography, Row, Col, Space } from 'antd';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport format from 'date-fns/format';\nimport { uniq } from 'lodash';\n\nimport { BanUserButton } from './BanUserButton';\nimport { ModeratorUserButton } from './ModeratorUserButton';\n\nimport { User, UserConnectionInfo } from '../types/chat';\nimport { formatDisplayDate } from './UserTable';\nimport { formatUAstring } from '../utils/format';\n\nexport type UserPopoverProps = {\n  user: User;\n  connectionInfo?: UserConnectionInfo | null;\n  children: ReactNode;\n};\n\nexport const UserPopover: FC<UserPopoverProps> = ({ user, connectionInfo, children }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleShowModal = () => {\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const { displayName, createdAt, previousNames, nameChangedAt, disabledAt } = user;\n  const { connectedAt, messageCount, userAgent } = connectionInfo || {};\n\n  let lastNameChangeDate = null;\n  const nameList = previousNames && [...previousNames];\n\n  if (previousNames && previousNames.length > 1 && nameChangedAt) {\n    lastNameChangeDate = new Date(nameChangedAt);\n    // reverse prev names for display purposes\n    nameList.reverse();\n  }\n\n  const dateObject = new Date(createdAt);\n  const createdAtDate = format(dateObject, 'PP pp');\n\n  const lastNameChangeDuration = lastNameChangeDate\n    ? formatDistanceToNow(lastNameChangeDate)\n    : null;\n\n  return (\n    <>\n      <Tooltip\n        title={\n          <>\n            Created at: {createdAtDate}.\n            <br /> Click for more info.\n          </>\n        }\n        placement=\"bottomLeft\"\n      >\n        <button\n          type=\"button\"\n          aria-label=\"Display more details about this user\"\n          className=\"user-item-container\"\n          onClick={handleShowModal}\n        >\n          {children}\n        </button>\n      </Tooltip>\n\n      <Modal\n        destroyOnClose\n        width={600}\n        cancelText=\"Close\"\n        okButtonProps={{ style: { display: 'none' } }}\n        title={`User details: ${displayName}`}\n        open={isModalOpen}\n        onOk={handleCloseModal}\n        onCancel={handleCloseModal}\n      >\n        <div className=\"user-details\">\n          <Typography.Title level={4}>{displayName}</Typography.Title>\n          <p className=\"created-at\">User created at {createdAtDate}.</p>\n          <Row gutter={16}>\n            {connectionInfo && (\n              <Col md={lastNameChangeDate ? 12 : 24}>\n                <Typography.Title level={5}>\n                  This user is currently connected to Chat.\n                </Typography.Title>\n                <ul className=\"connection-info\">\n                  <li>\n                    <strong>Active for:</strong> {formatDistanceToNow(new Date(connectedAt))}\n                  </li>\n                  <li>\n                    <strong>Messages sent:</strong> {messageCount}\n                  </li>\n                  <li>\n                    <strong>User Agent:</strong>\n                    <br />\n                    {formatUAstring(userAgent)}\n                  </li>\n                </ul>\n              </Col>\n            )}\n            {lastNameChangeDate && (\n              <Col md={connectionInfo ? 12 : 24}>\n                <Typography.Title level={5}>This user is also seen as:</Typography.Title>\n                <ul className=\"previous-names-list\">\n                  {uniq(nameList).map((name, index) => (\n                    <li className={index === 0 ? 'latest' : ''}>\n                      <span className=\"user-name-item\">{name}</span>\n                      {index === 0 ? ` (Changed ${lastNameChangeDuration} ago)` : ''}\n                    </li>\n                  ))}\n                </ul>\n              </Col>\n            )}\n          </Row>\n          <Divider />\n          <Space direction=\"horizontal\">\n            {disabledAt ? (\n              <>\n                This user was banned on <code>{formatDisplayDate(disabledAt)}</code>.\n                <br />\n                <br />\n                <BanUserButton\n                  label=\"Unban this user\"\n                  user={user}\n                  isEnabled={false}\n                  onClick={handleCloseModal}\n                />\n              </>\n            ) : (\n              <BanUserButton\n                label=\"Ban this user\"\n                user={user}\n                isEnabled\n                onClick={handleCloseModal}\n              />\n            )}\n            <ModeratorUserButton user={user} onClick={handleCloseModal} />\n          </Space>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nUserPopover.defaultProps = {\n  connectionInfo: null,\n};\n","import { Table } from 'antd';\nimport format from 'date-fns/format';\nimport { SortOrder } from 'antd/lib/table/interface';\nimport { FC } from 'react';\nimport { User } from '../types/chat';\nimport { UserPopover } from './UserPopover';\nimport { BanUserButton } from './BanUserButton';\n\nexport function formatDisplayDate(date: string | Date) {\n  return format(new Date(date), 'MMM d H:mma');\n}\n\nexport type UserTableProps = {\n  data: User[];\n};\n\nexport const UserTable: FC<UserTableProps> = ({ data }) => {\n  const columns = [\n    {\n      title: 'Last Known Display Name',\n      dataIndex: 'displayName',\n      key: 'displayName',\n      // eslint-disable-next-line react/destructuring-assignment\n      render: (displayName: string, user: User) => (\n        <UserPopover user={user}>\n          <span className=\"display-name\">{displayName}</span>\n        </UserPopover>\n      ),\n    },\n    {\n      title: 'Created',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (date: Date) => formatDisplayDate(date),\n      sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'Disabled at',\n      dataIndex: 'disabledAt',\n      key: 'disabledAt',\n      defaultSortOrder: 'descend' as SortOrder,\n      render: (date: Date) => (date ? formatDisplayDate(date) : null),\n      sorter: (a: any, b: any) =>\n        new Date(a.disabledAt).getTime() - new Date(b.disabledAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, user) => <BanUserButton user={user} isEnabled={!user.disabledAt} />,\n    },\n  ];\n\n  return (\n    <Table\n      pagination={{ hideOnSinglePage: true }}\n      className=\"table-container\"\n      columns={columns}\n      dataSource={data}\n      size=\"small\"\n      rowKey=\"id\"\n    />\n  );\n};\n","import { Input, Table } from 'antd';\nimport { FilterDropdownProps, SortOrder } from 'antd/lib/table/interface';\nimport { ColumnsType } from 'antd/es/table';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { formatDistanceToNow } from 'date-fns';\nimport { FC } from 'react';\nimport { Client } from '../types/chat';\nimport { UserPopover } from './UserPopover';\nimport { BanUserButton } from './BanUserButton';\nimport { formatUAstring } from '../utils/format';\n\nexport type ClientTableProps = {\n  data: Client[];\n};\n\nexport const ClientTable: FC<ClientTableProps> = ({ data }) => {\n  const columns: ColumnsType<Client> = [\n    {\n      title: 'Display Name',\n      key: 'username',\n      // eslint-disable-next-line react/destructuring-assignment\n      render: (client: Client) => {\n        const { user, connectedAt, messageCount, userAgent } = client;\n        const connectionInfo = { connectedAt, messageCount, userAgent };\n        return (\n          <UserPopover user={user} connectionInfo={connectionInfo}>\n            <span className=\"display-name\">{user.displayName}</span>\n          </UserPopover>\n        );\n      },\n      sorter: (a: any, b: any) => b.user.displayName.localeCompare(a.user.displayName),\n      filterIcon: <SearchOutlined />,\n      // eslint-disable-next-line react/no-unstable-nested-components\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm }: FilterDropdownProps) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search display names...\"\n            value={selectedKeys[0]}\n            onChange={e => {\n              setSelectedKeys(e.target.value ? [e.target.value] : []);\n              confirm({ closeDropdown: false });\n            }}\n          />\n        </div>\n      ),\n      onFilter: (value: string, record: Client) => record.user.displayName.includes(value),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'Messages sent',\n      dataIndex: 'messageCount',\n      key: 'messageCount',\n      className: 'number-col',\n      width: '12%',\n      sorter: (a: any, b: any) => a.messageCount - b.messageCount,\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n      render: (count: number) => <div style={{ textAlign: 'center' }}>{count}</div>,\n    },\n    {\n      title: 'Connected Time',\n      dataIndex: 'connectedAt',\n      key: 'connectedAt',\n      defaultSortOrder: 'ascend',\n      render: (time: Date) => formatDistanceToNow(new Date(time)),\n      sorter: (a: any, b: any) =>\n        new Date(b.connectedAt).getTime() - new Date(a.connectedAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'User Agent',\n      dataIndex: 'userAgent',\n      key: 'userAgent',\n      render: (ua: string) => formatUAstring(ua),\n    },\n    {\n      title: 'Location',\n      dataIndex: 'geo',\n      key: 'geo',\n      render: geo => (geo ? `${geo.regionName}, ${geo.countryCode}` : '-'),\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, row) => <BanUserButton user={row.user} isEnabled={!row.user.disabledAt} />,\n    },\n  ];\n\n  return (\n    <Table\n      className=\"table-container\"\n      pagination={{ hideOnSinglePage: true }}\n      columns={columns}\n      dataSource={data}\n      size=\"small\"\n      rowKey=\"id\"\n    />\n  );\n};\n","import { Table, Button } from 'antd';\nimport format from 'date-fns/format';\nimport { SortOrder } from 'antd/lib/table/interface';\nimport React, { FC } from 'react';\nimport { StopTwoTone } from '@ant-design/icons';\nimport { User } from '../types/chat';\nimport { BANNED_IP_REMOVE, fetchData } from '../utils/apis';\n\nfunction formatDisplayDate(date: string | Date) {\n  return format(new Date(date), 'MMM d H:mma');\n}\n\nasync function removeIPAddressBan(ipAddress: String) {\n  try {\n    await fetchData(BANNED_IP_REMOVE, {\n      data: { value: ipAddress },\n      method: 'POST',\n      auth: true,\n    });\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n}\n\nexport type UserTableProps = {\n  data: User[];\n};\n\nexport const BannedIPsTable: FC<UserTableProps> = ({ data }) => {\n  const columns = [\n    {\n      title: 'IP Address',\n      dataIndex: 'ipAddress',\n      key: 'ipAddress',\n    },\n    {\n      title: 'Reason',\n      dataIndex: 'notes',\n      key: 'notes',\n    },\n    {\n      title: 'Created',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (date: Date) => formatDisplayDate(date),\n      sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, ip) => (\n        <Button\n          title=\"Remove IP Address Ban\"\n          onClick={() => removeIPAddressBan(ip.ipAddress)}\n          icon={<StopTwoTone twoToneColor=\"#ff4d4f\" />}\n          className=\"block-user-button\"\n        />\n      ),\n    },\n  ];\n\n  return (\n    <Table\n      pagination={{ hideOnSinglePage: true }}\n      className=\"table-container\"\n      columns={columns}\n      dataSource={data}\n      size=\"large\"\n      rowKey=\"ipAddress\"\n    />\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Tabs } from 'antd';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport {\n  CONNECTED_CLIENTS,\n  fetchData,\n  DISABLED_USERS,\n  MODERATORS,\n  BANNED_IPS,\n} from '../../../utils/apis';\nimport { UserTable } from '../../../components/UserTable';\nimport { ClientTable } from '../../../components/ClientTable';\nimport { BannedIPsTable } from '../../../components/BannedIPsTable';\n\nexport const FETCH_INTERVAL = 10 * 1000; // 10 sec\n\nexport default function ChatUsers() {\n  const context = useContext(ServerStatusContext);\n  const { online } = context || {};\n\n  const [disabledUsers, setDisabledUsers] = useState([]);\n  const [ipBans, setIPBans] = useState([]);\n  const [clients, setClients] = useState([]);\n  const [moderators, setModerators] = useState([]);\n\n  const getInfo = async () => {\n    try {\n      const result = await fetchData(DISABLED_USERS);\n      setDisabledUsers(result);\n    } catch (error) {\n      console.log('==== error', error);\n    }\n\n    try {\n      const result = await fetchData(CONNECTED_CLIENTS);\n      setClients(result);\n    } catch (error) {\n      console.log('==== error', error);\n    }\n\n    try {\n      const result = await fetchData(MODERATORS);\n      setModerators(result);\n    } catch (error) {\n      console.error('error fetching moderators', error);\n    }\n\n    try {\n      const result = await fetchData(BANNED_IPS);\n      setIPBans(result);\n    } catch (error) {\n      console.error('error fetching banned ips', error);\n    }\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getInfo();\n\n    getStatusIntervalId = setInterval(getInfo, FETCH_INTERVAL);\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, [online]);\n\n  const connectedUsers = online ? (\n    <>\n      <ClientTable data={clients} />\n      <p className=\"description\">\n        Visit the{' '}\n        <a\n          href=\"https://owncast.online/docs/viewers/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          documentation\n        </a>{' '}\n        to configure additional details about your viewers.\n      </p>\n    </>\n  ) : (\n    <p className=\"description\">\n      When a stream is active and chat is enabled, connected chat clients will be displayed here.\n    </p>\n  );\n\n  const connectedUserTabTitle = (\n    <span>Connected {online ? `(${clients.length})` : '(offline)'}</span>\n  );\n\n  const bannedUsersTabTitle = <span>Banned Users ({disabledUsers.length})</span>;\n  const bannedUsersTable = <UserTable data={disabledUsers} />;\n\n  const bannedIPTabTitle = <span>IP Bans ({ipBans.length})</span>;\n  const bannedIpTable = <BannedIPsTable data={ipBans} />;\n\n  const moderatorUsersTabTitle = <span>Moderators ({moderators.length})</span>;\n  const moderatorTable = <UserTable data={moderators} />;\n\n  const items = [\n    { label: connectedUserTabTitle, key: '1', children: connectedUsers },\n    { label: bannedUsersTabTitle, key: '2', children: bannedUsersTable },\n    { label: bannedIPTabTitle, key: '3', children: bannedIpTable },\n    { label: moderatorUsersTabTitle, key: '4', children: moderatorTable },\n  ];\n\n  return <Tabs defaultActiveKey=\"1\" items={items} />;\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","BanUserButton","user","isEnabled","label","onClick","param","buttonClicked","id","result","fetchData","USER_ENABLED_TOGGLE","data","userId","enabled","method","auth","success","e","console","error","actionString","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","ExclamationCircleFilled","style","color","QuestionCircleFilled","content","jsxs","Fragment","strong","displayName","confirmBlockAction","Modal","title","concat","onCancel","onOk","Promise","resolve","reject","setTimeout","okType","okText","Button","type","size","StopTwoTone","twoToneColor","className","defaultProps","ModeratorUserButton","setAsModerator","USER_SET_MODERATOR","isModerator","scopes","includes","jsx_runtime","SafetyCertificateTwoTone","UserPopover","connectionInfo","children","isModalOpen","setIsModalOpen","useState","handleShowModal","handleCloseModal","createdAt","previousNames","nameChangedAt","disabledAt","connectedAt","messageCount","userAgent","lastNameChangeDate","nameList","length","Date","reverse","dateObject","createdAtDate","format","lastNameChangeDuration","formatDistanceToNow","Tooltip","br","placement","button","aria-label","destroyOnClose","width","cancelText","okButtonProps","display","open","div","Typography","level","p","Row","gutter","Col","md","ul","li","formatUAstring","uniq","map","name","index","span","Divider","Space","direction","code","formatDisplayDate","date","UserTable","Table","pagination","hideOnSinglePage","columns","dataIndex","key","render","sorter","a","b","getTime","sortDirections","defaultSortOrder","_","dataSource","rowKey","ClientTable","client","localeCompare","filterIcon","SearchOutlined","filterDropdown","setSelectedKeys","selectedKeys","confirm","padding","Input","placeholder","value","onChange","target","closeDropdown","onFilter","record","textAlign","count","time","ua","geo","regionName","countryCode","row","removeIPAddressBan","ipAddress","BANNED_IP_REMOVE","BannedIPsTable","ip","FETCH_INTERVAL","ChatUsers","context","useContext","ServerStatusContext","online","disabledUsers","setDisabledUsers","ipBans","setIPBans","clients","setClients","moderators","setModerators","getInfo","DISABLED_USERS","log","CONNECTED_CLIENTS","MODERATORS","BANNED_IPS","useEffect","getStatusIntervalId","setInterval","clearInterval","connectedUsers","href","rel","connectedUserTabTitle","bannedUsersTabTitle","bannedUsersTable","bannedIPTabTitle","bannedIpTable","moderatorUsersTabTitle","moderatorTable","Tabs","defaultActiveKey","items"],"sourceRoot":""}