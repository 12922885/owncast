{"version":3,"file":"static/chunks/pages/admin/chat/messages-c537aff9be87cf72.js","mappings":"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","sources":["webpack://_N_E/?6feb","webpack://_N_E/./components/admin/MessageVisiblityToggle.tsx","webpack://_N_E/./pages/admin/chat/messages.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/chat/messages\",\n      function () {\n        return require(\"private-next-pages/admin/chat/messages.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/chat/messages\"])\n      });\n    }\n  ","// Custom component for AntDesign Button that makes an api call, then displays a confirmation icon upon\nimport React, { useState, useEffect, FC } from 'react';\nimport { Button, Tooltip } from 'antd';\nimport {\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n} from '@ant-design/icons';\nimport { fetchData, UPDATE_CHAT_MESSGAE_VIZ } from '../../utils/apis';\nimport { MessageType } from '../../types/chat';\nimport { isEmptyObject } from '../../utils/format';\n\nexport type MessageToggleProps = {\n  isVisible: boolean;\n  message: MessageType;\n  setMessage: (message: MessageType) => void;\n};\n\nexport const MessageVisiblityToggle: FC<MessageToggleProps> = ({\n  isVisible,\n  message,\n  setMessage,\n}) => {\n  if (!message || isEmptyObject(message)) {\n    return null;\n  }\n\n  let outcomeTimeout = null;\n  const [outcome, setOutcome] = useState(0);\n\n  const { id: messageId } = message || {};\n\n  const resetOutcome = () => {\n    outcomeTimeout = setTimeout(() => {\n      setOutcome(0);\n    }, 3000);\n  };\n\n  useEffect(() => () => {\n    clearTimeout(outcomeTimeout);\n  });\n\n  const updateChatMessage = async () => {\n    clearTimeout(outcomeTimeout);\n    setOutcome(0);\n    const result = await fetchData(UPDATE_CHAT_MESSGAE_VIZ, {\n      auth: true,\n      method: 'POST',\n      data: {\n        visible: !isVisible,\n        idArray: [messageId],\n      },\n    });\n\n    if (result.success && result.message === 'changed') {\n      setMessage({ ...message, visible: !isVisible });\n      setOutcome(1);\n    } else {\n      setMessage({ ...message, visible: isVisible });\n      setOutcome(-1);\n    }\n    resetOutcome();\n  };\n\n  let outcomeIcon = <CheckCircleFilled style={{ color: 'transparent' }} />;\n  if (outcome) {\n    outcomeIcon =\n      outcome > 0 ? (\n        <CheckCircleFilled style={{ color: 'var(--ant-success)' }} />\n      ) : (\n        <ExclamationCircleFilled style={{ color: 'var(--ant-warning)' }} />\n      );\n  }\n\n  const toolTipMessage = `Click to ${isVisible ? 'hide' : 'show'} this message`;\n  return (\n    <div className={`toggle-switch ${isVisible ? '' : 'hidden'}`}>\n      <span className=\"outcome-icon\">{outcomeIcon}</span>\n      <Tooltip title={toolTipMessage} placement=\"topRight\">\n        <Button\n          shape=\"circle\"\n          size=\"small\"\n          type=\"text\"\n          icon={isVisible ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n          onClick={updateChatMessage}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Table, Typography, Button } from 'antd';\nimport { CheckCircleFilled, ExclamationCircleFilled } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport { ColumnsType } from 'antd/es/table';\nimport format from 'date-fns/format';\n\nimport { MessageType } from '../../../types/chat';\nimport {\n  CHAT_HISTORY,\n  fetchData,\n  FETCH_INTERVAL,\n  UPDATE_CHAT_MESSGAE_VIZ,\n} from '../../../utils/apis';\nimport { isEmptyObject } from '../../../utils/format';\nimport { MessageVisiblityToggle } from '../../../components/admin/MessageVisiblityToggle';\nimport { UserPopover } from '../../../components/admin/UserPopover';\n\nconst { Title } = Typography;\n\nfunction createUserNameFilters(messages: MessageType[]) {\n  const filtered = messages.reduce((acc, curItem) => {\n    const curAuthor = curItem.user.id;\n    if (!acc.some(item => item.text === curAuthor)) {\n      acc.push({ text: curAuthor, value: curAuthor });\n    }\n    return acc;\n  }, []);\n\n  // sort by name\n  return filtered.sort((a, b) => {\n    const nameA = a.text.toUpperCase(); // ignore upper and lowercase\n    const nameB = b.text.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n}\nexport const OUTCOME_TIMEOUT = 3000;\n\nexport default function Chat() {\n  const [messages, setMessages] = useState([]);\n  const [selectedRowKeys, setSelectedRows] = useState([]);\n  const [bulkProcessing, setBulkProcessing] = useState(false);\n  const [bulkOutcome, setBulkOutcome] = useState(null);\n  const [bulkAction, setBulkAction] = useState('');\n  let outcomeTimeout = null;\n  let chatReloadInterval = null;\n\n  const getInfo = async () => {\n    try {\n      const result = await fetchData(CHAT_HISTORY, { auth: true });\n      if (isEmptyObject(result)) {\n        setMessages([]);\n      } else {\n        setMessages(result);\n      }\n    } catch (error) {\n      console.log('==== error', error);\n    }\n  };\n\n  useEffect(() => {\n    getInfo();\n\n    chatReloadInterval = setInterval(() => {\n      getInfo();\n    }, FETCH_INTERVAL);\n\n    return () => {\n      clearTimeout(outcomeTimeout);\n      clearTimeout(chatReloadInterval);\n    };\n  }, []);\n\n  const nameFilters = createUserNameFilters(messages);\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys: string[]) => {\n      setSelectedRows(selectedKeys);\n    },\n  };\n\n  const updateMessage = message => {\n    const messageIndex = messages.findIndex(m => m.id === message.id);\n    messages.splice(messageIndex, 1, message);\n    setMessages([...messages]);\n  };\n\n  const resetBulkOutcome = () => {\n    outcomeTimeout = setTimeout(() => {\n      setBulkOutcome(null);\n      setBulkAction('');\n    }, OUTCOME_TIMEOUT);\n  };\n  const handleSubmitBulk = async bulkVisibility => {\n    setBulkProcessing(true);\n    const result = await fetchData(UPDATE_CHAT_MESSGAE_VIZ, {\n      auth: true,\n      method: 'POST',\n      data: {\n        visible: bulkVisibility,\n        idArray: selectedRowKeys,\n      },\n    });\n\n    if (result.success && result.message === 'changed') {\n      setBulkOutcome(<CheckCircleFilled />);\n      resetBulkOutcome();\n\n      // update messages\n      const updatedList = [...messages];\n      selectedRowKeys.map(key => {\n        const messageIndex = updatedList.findIndex(m => m.id === key);\n        const newMessage = { ...messages[messageIndex], visible: bulkVisibility };\n        updatedList.splice(messageIndex, 1, newMessage);\n        return null;\n      });\n      setMessages(updatedList);\n      setSelectedRows([]);\n    } else {\n      setBulkOutcome(<ExclamationCircleFilled />);\n      resetBulkOutcome();\n    }\n    setBulkProcessing(false);\n  };\n  const handleSubmitBulkShow = () => {\n    setBulkAction('show');\n    handleSubmitBulk(true);\n  };\n  const handleSubmitBulkHide = () => {\n    setBulkAction('hide');\n    handleSubmitBulk(false);\n  };\n\n  const chatColumns: ColumnsType<MessageType> = [\n    {\n      title: 'Time',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      className: 'timestamp-col',\n      defaultSortOrder: 'descend',\n      render: timestamp => {\n        const dateObject = new Date(timestamp);\n        return format(dateObject, 'PP pp');\n      },\n      sorter: (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime(),\n      width: 90,\n    },\n    {\n      title: 'User',\n      dataIndex: 'user',\n      key: 'user',\n      className: 'name-col',\n      filters: nameFilters,\n      onFilter: (value, record) => record.user.id === value,\n      sorter: (a, b) => a.user.displayName.localeCompare(b.user.displayName),\n      sortDirections: ['ascend', 'descend'],\n      ellipsis: true,\n      render: user => {\n        const { displayName } = user;\n        return <UserPopover user={user}>{displayName}</UserPopover>;\n      },\n      width: 110,\n    },\n    {\n      title: 'Message',\n      dataIndex: 'body',\n      key: 'body',\n      className: 'message-col',\n      width: 320,\n      render: body => (\n        <div\n          className=\"message-contents\"\n          // eslint-disable-next-line react/no-danger\n          dangerouslySetInnerHTML={{ __html: body }}\n        />\n      ),\n    },\n    {\n      title: '',\n      dataIndex: 'hiddenAt',\n      key: 'hiddenAt',\n      className: 'toggle-col',\n      filters: [\n        { text: 'Visible messages', value: true },\n        { text: 'Hidden messages', value: false },\n      ],\n      onFilter: (value, record) => record.visible === value,\n      render: (hiddenAt, record) => (\n        <MessageVisiblityToggle isVisible={!hiddenAt} message={record} setMessage={updateMessage} />\n      ),\n      width: 30,\n    },\n  ];\n\n  const bulkDivClasses = classNames({\n    'bulk-editor': true,\n    active: selectedRowKeys.length,\n  });\n\n  return (\n    <div className=\"chat-messages\">\n      <Title>Chat Messages</Title>\n      <p>Manage the messages from viewers that show up on your stream.</p>\n      <div className={bulkDivClasses}>\n        <span className=\"label\">Check multiple messages to change their visibility to: </span>\n\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          shape=\"round\"\n          className=\"button\"\n          loading={bulkAction === 'show' && bulkProcessing}\n          icon={bulkAction === 'show' && bulkOutcome}\n          disabled={!selectedRowKeys.length || (bulkAction && bulkAction !== 'show')}\n          onClick={handleSubmitBulkShow}\n        >\n          Show\n        </Button>\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          shape=\"round\"\n          className=\"button\"\n          loading={bulkAction === 'hide' && bulkProcessing}\n          icon={bulkAction === 'hide' && bulkOutcome}\n          disabled={!selectedRowKeys.length || (bulkAction && bulkAction !== 'hide')}\n          onClick={handleSubmitBulkHide}\n        >\n          Hide\n        </Button>\n      </div>\n      <Table\n        size=\"small\"\n        className=\"table-container\"\n        pagination={{ defaultPageSize: 100, showSizeChanger: true }}\n        scroll={{ y: 540 }}\n        rowClassName={record => (record.hiddenAt ? 'hidden' : '')}\n        dataSource={messages}\n        columns={chatColumns}\n        rowKey={row => row.id}\n        rowSelection={rowSelection}\n      />\n    </div>\n  );\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","MessageVisiblityToggle","isVisible","message","setMessage","param","isEmptyObject","outcomeTimeout","outcome","setOutcome","useState","id","messageId","resetOutcome","setTimeout","useEffect","clearTimeout","updateChatMessage","result","fetchData","UPDATE_CHAT_MESSGAE_VIZ","auth","method","data","visible","idArray","success","outcomeIcon","jsx_runtime","jsx","CheckCircleFilled","style","color","ExclamationCircleFilled","jsxs","div","className","concat","span","Tooltip","title","placement","Button","shape","size","type","icon","EyeOutlined","EyeInvisibleOutlined","onClick","Title","Typography","OUTCOME_TIMEOUT","Chat","messages","setMessages","selectedRowKeys","setSelectedRows","bulkProcessing","setBulkProcessing","bulkOutcome","setBulkOutcome","bulkAction","setBulkAction","chatReloadInterval","getInfo","CHAT_HISTORY","error","console","log","setInterval","FETCH_INTERVAL","nameFilters","createUserNameFilters","filtered","reduce","acc","curItem","curAuthor","user","some","item","text","value","sort","a","b","nameA","toUpperCase","nameB","updateMessage","messageIndex","findIndex","m","splice","resetBulkOutcome","handleSubmitBulk","bulkVisibility","updatedList","map","key","newMessage","handleSubmitBulkShow","handleSubmitBulkHide","bulkDivClasses","classNames","active","length","p","loading","disabled","Table","pagination","defaultPageSize","showSizeChanger","scroll","y","rowClassName","record","hiddenAt","dataSource","columns","dataIndex","defaultSortOrder","render","timestamp","dateObject","Date","format","sorter","getTime","width","filters","onFilter","displayName","localeCompare","sortDirections","ellipsis","UserPopover","body","dangerouslySetInnerHTML","__html","rowKey","row","rowSelection","onChange","selectedKeys"],"sourceRoot":""}