{"version":3,"file":"static/chunks/pages/admin/chat/users-6efaf55769eeb64b.js","mappings":"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","sources":["webpack://_N_E/?66df","webpack://_N_E/./components/admin/BanUserButton.tsx","webpack://_N_E/./components/admin/ModeratorUserButton.tsx","webpack://_N_E/./components/admin/UserPopover.tsx","webpack://_N_E/./components/admin/UserTable.tsx","webpack://_N_E/./components/admin/ClientTable.tsx","webpack://_N_E/./components/admin/BannedIPsTable.tsx","webpack://_N_E/./pages/admin/chat/users.tsx","webpack://_N_E/./utils/format.ts","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://_N_E/./node_modules/prop-types/index.js","webpack://_N_E/./node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/chat/users\",\n      function () {\n        return require(\"private-next-pages/admin/chat/users.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/chat/users\"])\n      });\n    }\n  ","import { Modal, Button } from 'antd';\nimport { ExclamationCircleFilled, QuestionCircleFilled, StopTwoTone } from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_ENABLED_TOGGLE, fetchData } from '../../utils/apis';\nimport { User } from '../../types/chat';\n\nexport type BanUserButtonProps = {\n  user: User;\n  isEnabled: Boolean; // = this user's current status\n  label?: string;\n  onClick?: () => void;\n};\n\nexport const BanUserButton: FC<BanUserButtonProps> = ({ user, isEnabled, label, onClick }) => {\n  async function buttonClicked({ id }): Promise<Boolean> {\n    const data = {\n      userId: id,\n      enabled: !isEnabled, // set user to this value\n    };\n    try {\n      const result = await fetchData(USER_ENABLED_TOGGLE, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const actionString = isEnabled ? 'ban' : 'unban';\n  const icon = isEnabled ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>\n      {isEnabled ? ' and remove their messages?' : '?'}\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isEnabled ? 'Absolutely' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={isEnabled ? <StopTwoTone twoToneColor=\"#ff4d4f\" /> : null}\n      className=\"block-user-button\"\n    >\n      {label || actionString}\n    </Button>\n  );\n};\nBanUserButton.defaultProps = {\n  label: '',\n  onClick: null,\n};\n","import { Modal, Button } from 'antd';\nimport {\n  ExclamationCircleFilled,\n  QuestionCircleFilled,\n  StopTwoTone,\n  SafetyCertificateTwoTone,\n} from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_SET_MODERATOR, fetchData } from '../../utils/apis';\nimport { User } from '../../types/chat';\n\nexport type ModeratorUserButtonProps = {\n  user: User;\n  onClick?: () => void;\n};\n\nexport const ModeratorUserButton: FC<ModeratorUserButtonProps> = ({ user, onClick }) => {\n  async function buttonClicked({ id }, setAsModerator: Boolean): Promise<Boolean> {\n    const data = {\n      userId: id,\n      isModerator: setAsModerator,\n    };\n    try {\n      const result = await fetchData(USER_SET_MODERATOR, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const isModerator = user.scopes?.includes('MODERATOR');\n  const actionString = isModerator ? 'remove moderator' : 'add moderator';\n  const icon = isModerator ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>?\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user, !isModerator);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isModerator ? 'Yup!' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={\n        isModerator ? (\n          <StopTwoTone twoToneColor=\"#ff4d4f\" />\n        ) : (\n          <SafetyCertificateTwoTone twoToneColor=\"#22bb44\" />\n        )\n      }\n      className=\"block-user-button\"\n    >\n      {actionString}\n    </Button>\n  );\n};\n\nModeratorUserButton.defaultProps = {\n  onClick: null,\n};\n","// This displays a clickable user name (or whatever children element you provide), and displays a simple tooltip of created time. OnClick a modal with more information about the user is displayed.\n\nimport { useState, ReactNode, FC } from 'react';\nimport { Divider, Modal, Typography, Row, Col, Space } from 'antd';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport format from 'date-fns/format';\nimport { uniq } from 'lodash';\n\nimport dynamic from 'next/dynamic';\nimport { BanUserButton } from './BanUserButton';\nimport { ModeratorUserButton } from './ModeratorUserButton';\n\nimport { User, UserConnectionInfo } from '../../types/chat';\nimport { formatDisplayDate } from './UserTable';\nimport { formatUAstring } from '../../utils/format';\n\n// Lazy loaded components\n\nconst Tooltip = dynamic(() => import('antd').then(mod => mod.Tooltip), {\n  ssr: false,\n});\n\nexport type UserPopoverProps = {\n  user: User;\n  connectionInfo?: UserConnectionInfo | null;\n  children: ReactNode;\n};\n\nexport const UserPopover: FC<UserPopoverProps> = ({ user, connectionInfo, children }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleShowModal = () => {\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const { displayName, createdAt, previousNames, nameChangedAt, disabledAt } = user;\n  const { connectedAt, messageCount, userAgent } = connectionInfo || {};\n\n  let lastNameChangeDate = null;\n  const nameList = previousNames && [...previousNames];\n\n  if (previousNames && previousNames.length > 1 && nameChangedAt) {\n    lastNameChangeDate = new Date(nameChangedAt);\n    // reverse prev names for display purposes\n    nameList.reverse();\n  }\n\n  const dateObject = new Date(createdAt);\n  const createdAtDate = format(dateObject, 'PP pp');\n\n  const lastNameChangeDuration = lastNameChangeDate\n    ? formatDistanceToNow(lastNameChangeDate)\n    : null;\n\n  return (\n    <>\n      <Tooltip\n        title={\n          <>\n            Created at: {createdAtDate}.\n            <br /> Click for more info.\n          </>\n        }\n        placement=\"bottomLeft\"\n      >\n        <button\n          type=\"button\"\n          aria-label=\"Display more details about this user\"\n          className=\"user-item-container\"\n          onClick={handleShowModal}\n        >\n          {children}\n        </button>\n      </Tooltip>\n\n      <Modal\n        destroyOnClose\n        width={600}\n        cancelText=\"Close\"\n        okButtonProps={{ style: { display: 'none' } }}\n        title={`User details: ${displayName}`}\n        open={isModalOpen}\n        onOk={handleCloseModal}\n        onCancel={handleCloseModal}\n      >\n        <div className=\"user-details\">\n          <Typography.Title level={4}>{displayName}</Typography.Title>\n          <p className=\"created-at\">User created at {createdAtDate}.</p>\n          <Row gutter={16}>\n            {connectionInfo && (\n              <Col md={lastNameChangeDate ? 12 : 24}>\n                <Typography.Title level={5}>\n                  This user is currently connected to Chat.\n                </Typography.Title>\n                <ul className=\"connection-info\">\n                  <li>\n                    <strong>Active for:</strong> {formatDistanceToNow(new Date(connectedAt))}\n                  </li>\n                  <li>\n                    <strong>Messages sent:</strong> {messageCount}\n                  </li>\n                  <li>\n                    <strong>User Agent:</strong>\n                    <br />\n                    {formatUAstring(userAgent)}\n                  </li>\n                </ul>\n              </Col>\n            )}\n            {lastNameChangeDate && (\n              <Col md={connectionInfo ? 12 : 24}>\n                <Typography.Title level={5}>This user is also seen as:</Typography.Title>\n                <ul className=\"previous-names-list\">\n                  {uniq(nameList).map((name, index) => (\n                    <li className={index === 0 ? 'latest' : ''}>\n                      <span className=\"user-name-item\">{name}</span>\n                      {index === 0 ? ` (Changed ${lastNameChangeDuration} ago)` : ''}\n                    </li>\n                  ))}\n                </ul>\n              </Col>\n            )}\n          </Row>\n          <Divider />\n          <Space direction=\"horizontal\">\n            {disabledAt ? (\n              <>\n                This user was banned on <code>{formatDisplayDate(disabledAt)}</code>.\n                <br />\n                <br />\n                <BanUserButton\n                  label=\"Unban this user\"\n                  user={user}\n                  isEnabled={false}\n                  onClick={handleCloseModal}\n                />\n              </>\n            ) : (\n              <BanUserButton\n                label=\"Ban this user\"\n                user={user}\n                isEnabled\n                onClick={handleCloseModal}\n              />\n            )}\n            <ModeratorUserButton user={user} onClick={handleCloseModal} />\n          </Space>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nUserPopover.defaultProps = {\n  connectionInfo: null,\n};\n","import { Table } from 'antd';\nimport format from 'date-fns/format';\nimport { SortOrder } from 'antd/lib/table/interface';\nimport { FC } from 'react';\nimport { User } from '../../types/chat';\nimport { UserPopover } from './UserPopover';\nimport { BanUserButton } from './BanUserButton';\n\nexport function formatDisplayDate(date: string | Date) {\n  return format(new Date(date), 'MMM d H:mma');\n}\n\nexport type UserTableProps = {\n  data: User[];\n};\n\nexport const UserTable: FC<UserTableProps> = ({ data }) => {\n  const columns = [\n    {\n      title: 'Last Known Display Name',\n      dataIndex: 'displayName',\n      key: 'displayName',\n      // eslint-disable-next-line react/destructuring-assignment\n      render: (displayName: string, user: User) => (\n        <UserPopover user={user}>\n          <span className=\"display-name\">{displayName}</span>\n        </UserPopover>\n      ),\n    },\n    {\n      title: 'Created',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (date: Date) => formatDisplayDate(date),\n      sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'Disabled at',\n      dataIndex: 'disabledAt',\n      key: 'disabledAt',\n      defaultSortOrder: 'descend' as SortOrder,\n      render: (date: Date) => (date ? formatDisplayDate(date) : null),\n      sorter: (a: any, b: any) =>\n        new Date(a.disabledAt).getTime() - new Date(b.disabledAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, user) => <BanUserButton user={user} isEnabled={!user.disabledAt} />,\n    },\n  ];\n\n  return (\n    <Table\n      pagination={{ hideOnSinglePage: true }}\n      className=\"table-container\"\n      columns={columns}\n      dataSource={data}\n      size=\"small\"\n      rowKey=\"id\"\n    />\n  );\n};\n","import { Input, Table } from 'antd';\nimport { FilterDropdownProps, SortOrder } from 'antd/lib/table/interface';\nimport { ColumnsType } from 'antd/es/table';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { formatDistanceToNow } from 'date-fns';\nimport { FC } from 'react';\nimport { Client } from '../../types/chat';\nimport { UserPopover } from './UserPopover';\nimport { BanUserButton } from './BanUserButton';\nimport { formatUAstring } from '../../utils/format';\n\nexport type ClientTableProps = {\n  data: Client[];\n};\n\nexport const ClientTable: FC<ClientTableProps> = ({ data }) => {\n  const columns: ColumnsType<Client> = [\n    {\n      title: 'Display Name',\n      key: 'username',\n      // eslint-disable-next-line react/destructuring-assignment\n      render: (client: Client) => {\n        const { user, connectedAt, messageCount, userAgent } = client;\n        const connectionInfo = { connectedAt, messageCount, userAgent };\n        return (\n          <UserPopover user={user} connectionInfo={connectionInfo}>\n            <span className=\"display-name\">{user.displayName}</span>\n          </UserPopover>\n        );\n      },\n      sorter: (a: any, b: any) => b.user.displayName.localeCompare(a.user.displayName),\n      filterIcon: <SearchOutlined />,\n      // eslint-disable-next-line react/no-unstable-nested-components\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm }: FilterDropdownProps) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search display names...\"\n            value={selectedKeys[0]}\n            onChange={e => {\n              setSelectedKeys(e.target.value ? [e.target.value] : []);\n              confirm({ closeDropdown: false });\n            }}\n          />\n        </div>\n      ),\n      onFilter: (value: string, record: Client) => record.user.displayName.includes(value),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'Messages sent',\n      dataIndex: 'messageCount',\n      key: 'messageCount',\n      className: 'number-col',\n      width: '12%',\n      sorter: (a: any, b: any) => a.messageCount - b.messageCount,\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n      render: (count: number) => <div style={{ textAlign: 'center' }}>{count}</div>,\n    },\n    {\n      title: 'Connected Time',\n      dataIndex: 'connectedAt',\n      key: 'connectedAt',\n      defaultSortOrder: 'ascend',\n      render: (time: Date) => formatDistanceToNow(new Date(time)),\n      sorter: (a: any, b: any) =>\n        new Date(b.connectedAt).getTime() - new Date(a.connectedAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'User Agent',\n      dataIndex: 'userAgent',\n      key: 'userAgent',\n      render: (ua: string) => formatUAstring(ua),\n    },\n    {\n      title: 'Location',\n      dataIndex: 'geo',\n      key: 'geo',\n      render: geo => (geo ? `${geo.regionName}, ${geo.countryCode}` : '-'),\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, row) => <BanUserButton user={row.user} isEnabled={!row.user.disabledAt} />,\n    },\n  ];\n\n  return (\n    <Table\n      className=\"table-container\"\n      pagination={{ hideOnSinglePage: true }}\n      columns={columns}\n      dataSource={data}\n      size=\"small\"\n      rowKey=\"id\"\n    />\n  );\n};\n","import { Table, Button } from 'antd';\nimport format from 'date-fns/format';\nimport { SortOrder } from 'antd/lib/table/interface';\nimport React, { FC } from 'react';\nimport { StopTwoTone } from '@ant-design/icons';\nimport { User } from '../../types/chat';\nimport { BANNED_IP_REMOVE, fetchData } from '../../utils/apis';\n\nfunction formatDisplayDate(date: string | Date) {\n  return format(new Date(date), 'MMM d H:mma');\n}\n\nasync function removeIPAddressBan(ipAddress: String) {\n  try {\n    await fetchData(BANNED_IP_REMOVE, {\n      data: { value: ipAddress },\n      method: 'POST',\n      auth: true,\n    });\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n}\n\nexport type UserTableProps = {\n  data: User[];\n};\n\nexport const BannedIPsTable: FC<UserTableProps> = ({ data }) => {\n  const columns = [\n    {\n      title: 'IP Address',\n      dataIndex: 'ipAddress',\n      key: 'ipAddress',\n    },\n    {\n      title: 'Reason',\n      dataIndex: 'notes',\n      key: 'notes',\n    },\n    {\n      title: 'Created',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (date: Date) => formatDisplayDate(date),\n      sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, ip) => (\n        <Button\n          title=\"Remove IP Address Ban\"\n          onClick={() => removeIPAddressBan(ip.ipAddress)}\n          icon={<StopTwoTone twoToneColor=\"#ff4d4f\" />}\n          className=\"block-user-button\"\n        />\n      ),\n    },\n  ];\n\n  return (\n    <Table\n      pagination={{ hideOnSinglePage: true }}\n      className=\"table-container\"\n      columns={columns}\n      dataSource={data}\n      size=\"large\"\n      rowKey=\"ipAddress\"\n    />\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Tabs } from 'antd';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport {\n  CONNECTED_CLIENTS,\n  fetchData,\n  DISABLED_USERS,\n  MODERATORS,\n  BANNED_IPS,\n} from '../../../utils/apis';\nimport { UserTable } from '../../../components/admin/UserTable';\nimport { ClientTable } from '../../../components/admin/ClientTable';\nimport { BannedIPsTable } from '../../../components/admin/BannedIPsTable';\n\nexport const FETCH_INTERVAL = 10 * 1000; // 10 sec\n\nexport default function ChatUsers() {\n  const context = useContext(ServerStatusContext);\n  const { online } = context || {};\n\n  const [disabledUsers, setDisabledUsers] = useState([]);\n  const [ipBans, setIPBans] = useState([]);\n  const [clients, setClients] = useState([]);\n  const [moderators, setModerators] = useState([]);\n\n  const getInfo = async () => {\n    try {\n      const result = await fetchData(DISABLED_USERS);\n      setDisabledUsers(result);\n    } catch (error) {\n      console.log('==== error', error);\n    }\n\n    try {\n      const result = await fetchData(CONNECTED_CLIENTS);\n      setClients(result);\n    } catch (error) {\n      console.log('==== error', error);\n    }\n\n    try {\n      const result = await fetchData(MODERATORS);\n      setModerators(result);\n    } catch (error) {\n      console.error('error fetching moderators', error);\n    }\n\n    try {\n      const result = await fetchData(BANNED_IPS);\n      setIPBans(result);\n    } catch (error) {\n      console.error('error fetching banned ips', error);\n    }\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getInfo();\n\n    getStatusIntervalId = setInterval(getInfo, FETCH_INTERVAL);\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, [online]);\n\n  const connectedUsers = online ? (\n    <>\n      <ClientTable data={clients} />\n      <p className=\"description\">\n        Visit the{' '}\n        <a\n          href=\"https://owncast.online/docs/viewers/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          documentation\n        </a>{' '}\n        to configure additional details about your viewers.\n      </p>\n    </>\n  ) : (\n    <p className=\"description\">\n      When a stream is active and chat is enabled, connected chat clients will be displayed here.\n    </p>\n  );\n\n  const connectedUserTabTitle = (\n    <span>Connected {online ? `(${clients.length})` : '(offline)'}</span>\n  );\n\n  const bannedUsersTabTitle = <span>Banned Users ({disabledUsers.length})</span>;\n  const bannedUsersTable = <UserTable data={disabledUsers} />;\n\n  const bannedIPTabTitle = <span>IP Bans ({ipBans.length})</span>;\n  const bannedIpTable = <BannedIPsTable data={ipBans} />;\n\n  const moderatorUsersTabTitle = <span>Moderators ({moderators.length})</span>;\n  const moderatorTable = <UserTable data={moderators} />;\n\n  const items = [\n    { label: connectedUserTabTitle, key: '1', children: connectedUsers },\n    { label: bannedUsersTabTitle, key: '2', children: bannedUsersTable },\n    { label: bannedIPTabTitle, key: '3', children: bannedIpTable },\n    { label: moderatorUsersTabTitle, key: '4', children: moderatorTable },\n  ];\n\n  return <Tabs defaultActiveKey=\"1\" items={items} />;\n}\n","import UAParser from 'ua-parser-js';\n\nexport function formatIPAddress(ipAddress: string): string {\n  const ipAddressComponents = ipAddress.split(':');\n\n  // Wipe out the port component\n  ipAddressComponents[ipAddressComponents.length - 1] = '';\n\n  let ip = ipAddressComponents.join(':');\n  ip = ip.slice(0, ip.length - 1);\n  if (ip === '[::1]' || ip === '127.0.0.1') {\n    return 'Localhost';\n  }\n\n  return ip;\n}\n\n// check if obj is {}\nexport function isEmptyObject(obj) {\n  return !obj || (Object.keys(obj).length === 0 && obj.constructor === Object);\n}\n\nexport function padLeft(text, pad, size) {\n  return String(pad.repeat(size) + text).slice(-size);\n}\n\nexport function parseSecondsToDurationString(seconds = 0) {\n  const finiteSeconds = Number.isFinite(+seconds) ? Math.abs(seconds) : 0;\n\n  const days = Math.floor(finiteSeconds / 86400);\n  const daysString = days > 0 ? `${days} day${days > 1 ? 's' : ''} ` : '';\n\n  const hours = Math.floor((finiteSeconds / 3600) % 24);\n  const hoursString = hours || days ? padLeft(`${hours}:`, '0', 3) : '';\n\n  const mins = Math.floor((finiteSeconds / 60) % 60);\n  const minString = padLeft(`${mins}:`, '0', 3);\n\n  const secs = Math.floor(finiteSeconds % 60);\n  const secsString = padLeft(`${secs}`, '0', 2);\n\n  return daysString + hoursString + minString + secsString;\n}\n\nexport function makeAndStringFromArray(arr: string[]): string {\n  if (arr.length === 1) return arr[0];\n  const firsts = arr.slice(0, arr.length - 1);\n  const last = arr[arr.length - 1];\n  return `${firsts.join(', ')} and ${last}`;\n}\n\nexport function formatUAstring(uaString: string) {\n  const parser = UAParser(uaString);\n  const { device, os, browser } = parser;\n  const { major: browserVersion, name } = browser;\n  const { version: osVersion, name: osName } = os;\n  const { model, type } = device;\n\n  if (uaString === 'libmpv') {\n    return 'mpv media player';\n  }\n  // Fallback to just displaying the raw agent string.\n  if (!name || !browserVersion || !osName) {\n    return uaString;\n  }\n\n  const deviceString = model || type ? ` (${model || type})` : '';\n  return `${name} ${browserVersion} on ${osName} ${osVersion}\n  ${deviceString}`;\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["window","__NEXT_P","push","BanUserButton","user","isEnabled","label","onClick","actionString","icon","ExclamationCircleFilled","style","color","QuestionCircleFilled","content","strong","displayName","Button","type","Modal","title","onCancel","onOk","Promise","resolve","reject","result","async","id","data","userId","enabled","fetchData","USER_ENABLED_TOGGLE","method","auth","success","e","console","error","buttonClicked","setTimeout","okType","okText","size","StopTwoTone","twoToneColor","className","defaultProps","ModeratorUserButton","isModerator","scopes","includes","setAsModerator","USER_SET_MODERATOR","SafetyCertificateTwoTone","Tooltip","dynamic","then","mod","ssr","UserPopover","connectionInfo","children","isModalOpen","setIsModalOpen","useState","handleCloseModal","createdAt","previousNames","nameChangedAt","disabledAt","connectedAt","messageCount","userAgent","lastNameChangeDate","nameList","length","Date","reverse","dateObject","createdAtDate","format","lastNameChangeDuration","formatDistanceToNow","br","placement","button","aria-label","destroyOnClose","width","cancelText","okButtonProps","display","open","div","Typography","level","p","Row","gutter","Col","md","ul","li","formatUAstring","uniq","map","name","index","span","Divider","Space","direction","code","formatDisplayDate","date","UserTable","columns","dataIndex","key","render","sorter","a","b","getTime","sortDirections","defaultSortOrder","_","Table","pagination","hideOnSinglePage","dataSource","rowKey","ClientTable","client","localeCompare","filterIcon","SearchOutlined","filterDropdown","setSelectedKeys","selectedKeys","confirm","padding","Input","placeholder","value","onChange","target","closeDropdown","onFilter","record","count","textAlign","time","ua","geo","regionName","countryCode","row","BannedIPsTable","ip","ipAddress","BANNED_IP_REMOVE","removeIPAddressBan","FETCH_INTERVAL","ChatUsers","context","useContext","ServerStatusContext","online","disabledUsers","setDisabledUsers","ipBans","setIPBans","clients","setClients","moderators","setModerators","getInfo","DISABLED_USERS","log","CONNECTED_CLIENTS","MODERATORS","BANNED_IPS","useEffect","getStatusIntervalId","setInterval","clearInterval","connectedUsers","href","rel","items","Tabs","defaultActiveKey","formatIPAddress","ipAddressComponents","split","join","slice","isEmptyObject","obj","Object","keys","constructor","padLeft","text","pad","String","repeat","parseSecondsToDurationString","seconds","finiteSeconds","Number","isFinite","Math","abs","days","floor","daysString","hours","hoursString","mins","minString","secs","secsString","uaString","parser","UAParser","device","os","browser","major","browserVersion","version","osVersion","osName","model","deviceString","initialServerConfigState","streamKeys","adminPassword","instanceDetails","customStyles","extraPageContent","logo","nsfw","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","yp","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","message","representation","React","serverConfig","setFieldInConfigState","args","ServerStatusProvider","status","setStatus","config","setConfig","getStatus","STATUS","SERVER_CONFIG","getConfig","providerValue","fieldName","path","updatedConfig","Provider","propTypes","PropTypes","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}