{"version":3,"file":"static/chunks/pages/admin/chat/messages-e505a27567ef2dbb.js","mappings":"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","sources":["webpack://_N_E/?6feb","webpack://_N_E/./components/BanUserButton.tsx","webpack://_N_E/./components/ModeratorUserButton.tsx","webpack://_N_E/./components/UserPopover.tsx","webpack://_N_E/./components/UserTable.tsx","webpack://_N_E/./components/MessageVisiblityToggle.tsx","webpack://_N_E/./pages/admin/chat/messages.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/chat/messages\",\n      function () {\n        return require(\"private-next-pages/admin/chat/messages.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/chat/messages\"])\n      });\n    }\n  ","import { Modal, Button } from 'antd';\nimport { ExclamationCircleFilled, QuestionCircleFilled, StopTwoTone } from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_ENABLED_TOGGLE, fetchData } from '../utils/apis';\nimport { User } from '../types/chat';\n\nexport type BanUserButtonProps = {\n  user: User;\n  isEnabled: Boolean; // = this user's current status\n  label?: string;\n  onClick?: () => void;\n};\n\nexport const BanUserButton: FC<BanUserButtonProps> = ({ user, isEnabled, label, onClick }) => {\n  async function buttonClicked({ id }): Promise<Boolean> {\n    const data = {\n      userId: id,\n      enabled: !isEnabled, // set user to this value\n    };\n    try {\n      const result = await fetchData(USER_ENABLED_TOGGLE, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const actionString = isEnabled ? 'ban' : 'unban';\n  const icon = isEnabled ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>\n      {isEnabled ? ' and remove their messages?' : '?'}\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isEnabled ? 'Absolutely' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={isEnabled ? <StopTwoTone twoToneColor=\"#ff4d4f\" /> : null}\n      className=\"block-user-button\"\n    >\n      {label || actionString}\n    </Button>\n  );\n};\nBanUserButton.defaultProps = {\n  label: '',\n  onClick: null,\n};\n","import { Modal, Button } from 'antd';\nimport {\n  ExclamationCircleFilled,\n  QuestionCircleFilled,\n  StopTwoTone,\n  SafetyCertificateTwoTone,\n} from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_SET_MODERATOR, fetchData } from '../utils/apis';\nimport { User } from '../types/chat';\n\nexport type ModeratorUserButtonProps = {\n  user: User;\n  onClick?: () => void;\n};\n\nexport const ModeratorUserButton: FC<ModeratorUserButtonProps> = ({ user, onClick }) => {\n  async function buttonClicked({ id }, setAsModerator: Boolean): Promise<Boolean> {\n    const data = {\n      userId: id,\n      isModerator: setAsModerator,\n    };\n    try {\n      const result = await fetchData(USER_SET_MODERATOR, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const isModerator = user.scopes?.includes('MODERATOR');\n  const actionString = isModerator ? 'remove moderator' : 'add moderator';\n  const icon = isModerator ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>?\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user, !isModerator);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isModerator ? 'Yup!' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={\n        isModerator ? (\n          <StopTwoTone twoToneColor=\"#ff4d4f\" />\n        ) : (\n          <SafetyCertificateTwoTone twoToneColor=\"#22bb44\" />\n        )\n      }\n      className=\"block-user-button\"\n    >\n      {actionString}\n    </Button>\n  );\n};\n\nModeratorUserButton.defaultProps = {\n  onClick: null,\n};\n","// This displays a clickable user name (or whatever children element you provide), and displays a simple tooltip of created time. OnClick a modal with more information about the user is displayed.\n\nimport { useState, ReactNode, FC } from 'react';\nimport { Divider, Modal, Tooltip, Typography, Row, Col, Space } from 'antd';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport format from 'date-fns/format';\nimport { uniq } from 'lodash';\n\nimport { BanUserButton } from './BanUserButton';\nimport { ModeratorUserButton } from './ModeratorUserButton';\n\nimport { User, UserConnectionInfo } from '../types/chat';\nimport { formatDisplayDate } from './UserTable';\nimport { formatUAstring } from '../utils/format';\n\nexport type UserPopoverProps = {\n  user: User;\n  connectionInfo?: UserConnectionInfo | null;\n  children: ReactNode;\n};\n\nexport const UserPopover: FC<UserPopoverProps> = ({ user, connectionInfo, children }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleShowModal = () => {\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const { displayName, createdAt, previousNames, nameChangedAt, disabledAt } = user;\n  const { connectedAt, messageCount, userAgent } = connectionInfo || {};\n\n  let lastNameChangeDate = null;\n  const nameList = previousNames && [...previousNames];\n\n  if (previousNames && previousNames.length > 1 && nameChangedAt) {\n    lastNameChangeDate = new Date(nameChangedAt);\n    // reverse prev names for display purposes\n    nameList.reverse();\n  }\n\n  const dateObject = new Date(createdAt);\n  const createdAtDate = format(dateObject, 'PP pp');\n\n  const lastNameChangeDuration = lastNameChangeDate\n    ? formatDistanceToNow(lastNameChangeDate)\n    : null;\n\n  return (\n    <>\n      <Tooltip\n        title={\n          <>\n            Created at: {createdAtDate}.\n            <br /> Click for more info.\n          </>\n        }\n        placement=\"bottomLeft\"\n      >\n        <button\n          type=\"button\"\n          aria-label=\"Display more details about this user\"\n          className=\"user-item-container\"\n          onClick={handleShowModal}\n        >\n          {children}\n        </button>\n      </Tooltip>\n\n      <Modal\n        destroyOnClose\n        width={600}\n        cancelText=\"Close\"\n        okButtonProps={{ style: { display: 'none' } }}\n        title={`User details: ${displayName}`}\n        open={isModalOpen}\n        onOk={handleCloseModal}\n        onCancel={handleCloseModal}\n      >\n        <div className=\"user-details\">\n          <Typography.Title level={4}>{displayName}</Typography.Title>\n          <p className=\"created-at\">User created at {createdAtDate}.</p>\n          <Row gutter={16}>\n            {connectionInfo && (\n              <Col md={lastNameChangeDate ? 12 : 24}>\n                <Typography.Title level={5}>\n                  This user is currently connected to Chat.\n                </Typography.Title>\n                <ul className=\"connection-info\">\n                  <li>\n                    <strong>Active for:</strong> {formatDistanceToNow(new Date(connectedAt))}\n                  </li>\n                  <li>\n                    <strong>Messages sent:</strong> {messageCount}\n                  </li>\n                  <li>\n                    <strong>User Agent:</strong>\n                    <br />\n                    {formatUAstring(userAgent)}\n                  </li>\n                </ul>\n              </Col>\n            )}\n            {lastNameChangeDate && (\n              <Col md={connectionInfo ? 12 : 24}>\n                <Typography.Title level={5}>This user is also seen as:</Typography.Title>\n                <ul className=\"previous-names-list\">\n                  {uniq(nameList).map((name, index) => (\n                    <li className={index === 0 ? 'latest' : ''}>\n                      <span className=\"user-name-item\">{name}</span>\n                      {index === 0 ? ` (Changed ${lastNameChangeDuration} ago)` : ''}\n                    </li>\n                  ))}\n                </ul>\n              </Col>\n            )}\n          </Row>\n          <Divider />\n          <Space direction=\"horizontal\">\n            {disabledAt ? (\n              <>\n                This user was banned on <code>{formatDisplayDate(disabledAt)}</code>.\n                <br />\n                <br />\n                <BanUserButton\n                  label=\"Unban this user\"\n                  user={user}\n                  isEnabled={false}\n                  onClick={handleCloseModal}\n                />\n              </>\n            ) : (\n              <BanUserButton\n                label=\"Ban this user\"\n                user={user}\n                isEnabled\n                onClick={handleCloseModal}\n              />\n            )}\n            <ModeratorUserButton user={user} onClick={handleCloseModal} />\n          </Space>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nUserPopover.defaultProps = {\n  connectionInfo: null,\n};\n","import { Table } from 'antd';\nimport format from 'date-fns/format';\nimport { SortOrder } from 'antd/lib/table/interface';\nimport { FC } from 'react';\nimport { User } from '../types/chat';\nimport { UserPopover } from './UserPopover';\nimport { BanUserButton } from './BanUserButton';\n\nexport function formatDisplayDate(date: string | Date) {\n  return format(new Date(date), 'MMM d H:mma');\n}\n\nexport type UserTableProps = {\n  data: User[];\n};\n\nexport const UserTable: FC<UserTableProps> = ({ data }) => {\n  const columns = [\n    {\n      title: 'Last Known Display Name',\n      dataIndex: 'displayName',\n      key: 'displayName',\n      // eslint-disable-next-line react/destructuring-assignment\n      render: (displayName: string, user: User) => (\n        <UserPopover user={user}>\n          <span className=\"display-name\">{displayName}</span>\n        </UserPopover>\n      ),\n    },\n    {\n      title: 'Created',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (date: Date) => formatDisplayDate(date),\n      sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'Disabled at',\n      dataIndex: 'disabledAt',\n      key: 'disabledAt',\n      defaultSortOrder: 'descend' as SortOrder,\n      render: (date: Date) => (date ? formatDisplayDate(date) : null),\n      sorter: (a: any, b: any) =>\n        new Date(a.disabledAt).getTime() - new Date(b.disabledAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, user) => <BanUserButton user={user} isEnabled={!user.disabledAt} />,\n    },\n  ];\n\n  return (\n    <Table\n      pagination={{ hideOnSinglePage: true }}\n      className=\"table-container\"\n      columns={columns}\n      dataSource={data}\n      size=\"small\"\n      rowKey=\"id\"\n    />\n  );\n};\n","// Custom component for AntDesign Button that makes an api call, then displays a confirmation icon upon\nimport React, { useState, useEffect, FC } from 'react';\nimport { Button, Tooltip } from 'antd';\nimport {\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n} from '@ant-design/icons';\nimport { fetchData, UPDATE_CHAT_MESSGAE_VIZ } from '../utils/apis';\nimport { MessageType } from '../types/chat';\nimport { OUTCOME_TIMEOUT } from '../pages/admin/chat/messages';\nimport { isEmptyObject } from '../utils/format';\n\nexport type MessageToggleProps = {\n  isVisible: boolean;\n  message: MessageType;\n  setMessage: (message: MessageType) => void;\n};\n\nexport const MessageVisiblityToggle: FC<MessageToggleProps> = ({\n  isVisible,\n  message,\n  setMessage,\n}) => {\n  if (!message || isEmptyObject(message)) {\n    return null;\n  }\n\n  let outcomeTimeout = null;\n  const [outcome, setOutcome] = useState(0);\n\n  const { id: messageId } = message || {};\n\n  const resetOutcome = () => {\n    outcomeTimeout = setTimeout(() => {\n      setOutcome(0);\n    }, OUTCOME_TIMEOUT);\n  };\n\n  useEffect(() => () => {\n    clearTimeout(outcomeTimeout);\n  });\n\n  const updateChatMessage = async () => {\n    clearTimeout(outcomeTimeout);\n    setOutcome(0);\n    const result = await fetchData(UPDATE_CHAT_MESSGAE_VIZ, {\n      auth: true,\n      method: 'POST',\n      data: {\n        visible: !isVisible,\n        idArray: [messageId],\n      },\n    });\n\n    if (result.success && result.message === 'changed') {\n      setMessage({ ...message, visible: !isVisible });\n      setOutcome(1);\n    } else {\n      setMessage({ ...message, visible: isVisible });\n      setOutcome(-1);\n    }\n    resetOutcome();\n  };\n\n  let outcomeIcon = <CheckCircleFilled style={{ color: 'transparent' }} />;\n  if (outcome) {\n    outcomeIcon =\n      outcome > 0 ? (\n        <CheckCircleFilled style={{ color: 'var(--ant-success)' }} />\n      ) : (\n        <ExclamationCircleFilled style={{ color: 'var(--ant-warning)' }} />\n      );\n  }\n\n  const toolTipMessage = `Click to ${isVisible ? 'hide' : 'show'} this message`;\n  return (\n    <div className={`toggle-switch ${isVisible ? '' : 'hidden'}`}>\n      <span className=\"outcome-icon\">{outcomeIcon}</span>\n      <Tooltip title={toolTipMessage} placement=\"topRight\">\n        <Button\n          shape=\"circle\"\n          size=\"small\"\n          type=\"text\"\n          icon={isVisible ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n          onClick={updateChatMessage}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Table, Typography, Button } from 'antd';\nimport { CheckCircleFilled, ExclamationCircleFilled } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport { ColumnsType } from 'antd/es/table';\nimport format from 'date-fns/format';\n\nimport { MessageType } from '../../../types/chat';\nimport {\n  CHAT_HISTORY,\n  fetchData,\n  FETCH_INTERVAL,\n  UPDATE_CHAT_MESSGAE_VIZ,\n} from '../../../utils/apis';\nimport { isEmptyObject } from '../../../utils/format';\nimport { MessageVisiblityToggle } from '../../../components/MessageVisiblityToggle';\nimport { UserPopover } from '../../../components/UserPopover';\n\nconst { Title } = Typography;\n\nfunction createUserNameFilters(messages: MessageType[]) {\n  const filtered = messages.reduce((acc, curItem) => {\n    const curAuthor = curItem.user.id;\n    if (!acc.some(item => item.text === curAuthor)) {\n      acc.push({ text: curAuthor, value: curAuthor });\n    }\n    return acc;\n  }, []);\n\n  // sort by name\n  return filtered.sort((a, b) => {\n    const nameA = a.text.toUpperCase(); // ignore upper and lowercase\n    const nameB = b.text.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n}\nexport const OUTCOME_TIMEOUT = 3000;\n\nexport default function Chat() {\n  const [messages, setMessages] = useState([]);\n  const [selectedRowKeys, setSelectedRows] = useState([]);\n  const [bulkProcessing, setBulkProcessing] = useState(false);\n  const [bulkOutcome, setBulkOutcome] = useState(null);\n  const [bulkAction, setBulkAction] = useState('');\n  let outcomeTimeout = null;\n  let chatReloadInterval = null;\n\n  const getInfo = async () => {\n    try {\n      const result = await fetchData(CHAT_HISTORY, { auth: true });\n      if (isEmptyObject(result)) {\n        setMessages([]);\n      } else {\n        setMessages(result);\n      }\n    } catch (error) {\n      console.log('==== error', error);\n    }\n  };\n\n  useEffect(() => {\n    getInfo();\n\n    chatReloadInterval = setInterval(() => {\n      getInfo();\n    }, FETCH_INTERVAL);\n\n    return () => {\n      clearTimeout(outcomeTimeout);\n      clearTimeout(chatReloadInterval);\n    };\n  }, []);\n\n  const nameFilters = createUserNameFilters(messages);\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys: string[]) => {\n      setSelectedRows(selectedKeys);\n    },\n  };\n\n  const updateMessage = message => {\n    const messageIndex = messages.findIndex(m => m.id === message.id);\n    messages.splice(messageIndex, 1, message);\n    setMessages([...messages]);\n  };\n\n  const resetBulkOutcome = () => {\n    outcomeTimeout = setTimeout(() => {\n      setBulkOutcome(null);\n      setBulkAction('');\n    }, OUTCOME_TIMEOUT);\n  };\n  const handleSubmitBulk = async bulkVisibility => {\n    setBulkProcessing(true);\n    const result = await fetchData(UPDATE_CHAT_MESSGAE_VIZ, {\n      auth: true,\n      method: 'POST',\n      data: {\n        visible: bulkVisibility,\n        idArray: selectedRowKeys,\n      },\n    });\n\n    if (result.success && result.message === 'changed') {\n      setBulkOutcome(<CheckCircleFilled />);\n      resetBulkOutcome();\n\n      // update messages\n      const updatedList = [...messages];\n      selectedRowKeys.map(key => {\n        const messageIndex = updatedList.findIndex(m => m.id === key);\n        const newMessage = { ...messages[messageIndex], visible: bulkVisibility };\n        updatedList.splice(messageIndex, 1, newMessage);\n        return null;\n      });\n      setMessages(updatedList);\n      setSelectedRows([]);\n    } else {\n      setBulkOutcome(<ExclamationCircleFilled />);\n      resetBulkOutcome();\n    }\n    setBulkProcessing(false);\n  };\n  const handleSubmitBulkShow = () => {\n    setBulkAction('show');\n    handleSubmitBulk(true);\n  };\n  const handleSubmitBulkHide = () => {\n    setBulkAction('hide');\n    handleSubmitBulk(false);\n  };\n\n  const chatColumns: ColumnsType<MessageType> = [\n    {\n      title: 'Time',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      className: 'timestamp-col',\n      defaultSortOrder: 'descend',\n      render: timestamp => {\n        const dateObject = new Date(timestamp);\n        return format(dateObject, 'PP pp');\n      },\n      sorter: (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime(),\n      width: 90,\n    },\n    {\n      title: 'User',\n      dataIndex: 'user',\n      key: 'user',\n      className: 'name-col',\n      filters: nameFilters,\n      onFilter: (value, record) => record.user.id === value,\n      sorter: (a, b) => a.user.displayName.localeCompare(b.user.displayName),\n      sortDirections: ['ascend', 'descend'],\n      ellipsis: true,\n      render: user => {\n        const { displayName } = user;\n        return <UserPopover user={user}>{displayName}</UserPopover>;\n      },\n      width: 110,\n    },\n    {\n      title: 'Message',\n      dataIndex: 'body',\n      key: 'body',\n      className: 'message-col',\n      width: 320,\n      render: body => (\n        <div\n          className=\"message-contents\"\n          // eslint-disable-next-line react/no-danger\n          dangerouslySetInnerHTML={{ __html: body }}\n        />\n      ),\n    },\n    {\n      title: '',\n      dataIndex: 'hiddenAt',\n      key: 'hiddenAt',\n      className: 'toggle-col',\n      filters: [\n        { text: 'Visible messages', value: true },\n        { text: 'Hidden messages', value: false },\n      ],\n      onFilter: (value, record) => record.visible === value,\n      render: (hiddenAt, record) => (\n        <MessageVisiblityToggle isVisible={!hiddenAt} message={record} setMessage={updateMessage} />\n      ),\n      width: 30,\n    },\n  ];\n\n  const bulkDivClasses = classNames({\n    'bulk-editor': true,\n    active: selectedRowKeys.length,\n  });\n\n  return (\n    <div className=\"chat-messages\">\n      <Title>Chat Messages</Title>\n      <p>Manage the messages from viewers that show up on your stream.</p>\n      <div className={bulkDivClasses}>\n        <span className=\"label\">Check multiple messages to change their visibility to: </span>\n\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          shape=\"round\"\n          className=\"button\"\n          loading={bulkAction === 'show' && bulkProcessing}\n          icon={bulkAction === 'show' && bulkOutcome}\n          disabled={!selectedRowKeys.length || (bulkAction && bulkAction !== 'show')}\n          onClick={handleSubmitBulkShow}\n        >\n          Show\n        </Button>\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          shape=\"round\"\n          className=\"button\"\n          loading={bulkAction === 'hide' && bulkProcessing}\n          icon={bulkAction === 'hide' && bulkOutcome}\n          disabled={!selectedRowKeys.length || (bulkAction && bulkAction !== 'hide')}\n          onClick={handleSubmitBulkHide}\n        >\n          Hide\n        </Button>\n      </div>\n      <Table\n        size=\"small\"\n        className=\"table-container\"\n        pagination={{ defaultPageSize: 100, showSizeChanger: true }}\n        scroll={{ y: 540 }}\n        rowClassName={record => (record.hiddenAt ? 'hidden' : '')}\n        dataSource={messages}\n        columns={chatColumns}\n        rowKey={row => row.id}\n        rowSelection={rowSelection}\n      />\n    </div>\n  );\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","BanUserButton","user","isEnabled","label","onClick","param","buttonClicked","id","result","fetchData","USER_ENABLED_TOGGLE","data","userId","enabled","method","auth","success","e","console","error","actionString","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","ExclamationCircleFilled","style","color","QuestionCircleFilled","content","jsxs","Fragment","strong","displayName","confirmBlockAction","Modal","title","concat","onCancel","onOk","Promise","resolve","reject","setTimeout","okType","okText","Button","type","size","StopTwoTone","twoToneColor","className","defaultProps","ModeratorUserButton","setAsModerator","USER_SET_MODERATOR","isModerator","scopes","includes","jsx_runtime","SafetyCertificateTwoTone","UserPopover","connectionInfo","children","isModalOpen","setIsModalOpen","useState","handleShowModal","handleCloseModal","createdAt","previousNames","nameChangedAt","disabledAt","connectedAt","messageCount","userAgent","lastNameChangeDate","nameList","length","Date","reverse","dateObject","createdAtDate","format","lastNameChangeDuration","formatDistanceToNow","Tooltip","br","placement","button","aria-label","destroyOnClose","width","cancelText","okButtonProps","display","open","div","Typography","level","p","Row","gutter","Col","md","ul","li","formatUAstring","uniq","map","name","index","span","Divider","Space","direction","code","formatDisplayDate","date","UserTable","Table","pagination","hideOnSinglePage","columns","dataIndex","key","render","sorter","a","b","getTime","sortDirections","defaultSortOrder","_","dataSource","rowKey","MessageVisiblityToggle","isVisible","message","setMessage","isEmptyObject","outcomeTimeout","outcome","setOutcome","messageId","resetOutcome","OUTCOME_TIMEOUT","useEffect","clearTimeout","updateChatMessage","UPDATE_CHAT_MESSGAE_VIZ","visible","idArray","outcomeIcon","CheckCircleFilled","shape","EyeOutlined","EyeInvisibleOutlined","Title","Chat","messages","setMessages","selectedRowKeys","setSelectedRows","bulkProcessing","setBulkProcessing","bulkOutcome","setBulkOutcome","bulkAction","setBulkAction","chatReloadInterval","getInfo","CHAT_HISTORY","log","setInterval","FETCH_INTERVAL","nameFilters","createUserNameFilters","filtered","reduce","acc","curItem","curAuthor","some","item","text","value","sort","nameA","toUpperCase","nameB","updateMessage","messageIndex","findIndex","m","splice","resetBulkOutcome","handleSubmitBulk","bulkVisibility","updatedList","newMessage","handleSubmitBulkShow","handleSubmitBulkHide","bulkDivClasses","classNames","active","loading","disabled","defaultPageSize","showSizeChanger","scroll","y","rowClassName","record","hiddenAt","timestamp","filters","onFilter","localeCompare","ellipsis","body","dangerouslySetInnerHTML","__html","row","rowSelection","onChange","selectedKeys"],"sourceRoot":""}