{"version":3,"file":"static/chunks/pages/admin/chat/messages-fdf4cde190252b52.js","mappings":"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","sources":["webpack://_N_E/?6feb","webpack://_N_E/./components/admin/BanUserButton.tsx","webpack://_N_E/./components/admin/ModeratorUserButton.tsx","webpack://_N_E/./components/admin/UserPopover.tsx","webpack://_N_E/./components/admin/UserTable.tsx","webpack://_N_E/./components/admin/MessageVisiblityToggle.tsx","webpack://_N_E/./pages/admin/chat/messages.tsx","webpack://_N_E/./utils/apis.ts","webpack://_N_E/./utils/format.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/chat/messages\",\n      function () {\n        return require(\"private-next-pages/admin/chat/messages.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/chat/messages\"])\n      });\n    }\n  ","import { Modal, Button } from 'antd';\nimport { ExclamationCircleFilled, QuestionCircleFilled, StopTwoTone } from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_ENABLED_TOGGLE, fetchData } from '../../utils/apis';\nimport { User } from '../../types/chat';\n\nexport type BanUserButtonProps = {\n  user: User;\n  isEnabled: Boolean; // = this user's current status\n  label?: string;\n  onClick?: () => void;\n};\n\nexport const BanUserButton: FC<BanUserButtonProps> = ({ user, isEnabled, label, onClick }) => {\n  async function buttonClicked({ id }): Promise<Boolean> {\n    const data = {\n      userId: id,\n      enabled: !isEnabled, // set user to this value\n    };\n    try {\n      const result = await fetchData(USER_ENABLED_TOGGLE, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const actionString = isEnabled ? 'ban' : 'unban';\n  const icon = isEnabled ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>\n      {isEnabled ? ' and remove their messages?' : '?'}\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isEnabled ? 'Absolutely' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={isEnabled ? <StopTwoTone twoToneColor=\"#ff4d4f\" /> : null}\n      className=\"block-user-button\"\n    >\n      {label || actionString}\n    </Button>\n  );\n};\nBanUserButton.defaultProps = {\n  label: '',\n  onClick: null,\n};\n","import { Modal, Button } from 'antd';\nimport {\n  ExclamationCircleFilled,\n  QuestionCircleFilled,\n  StopTwoTone,\n  SafetyCertificateTwoTone,\n} from '@ant-design/icons';\nimport { FC } from 'react';\nimport { USER_SET_MODERATOR, fetchData } from '../../utils/apis';\nimport { User } from '../../types/chat';\n\nexport type ModeratorUserButtonProps = {\n  user: User;\n  onClick?: () => void;\n};\n\nexport const ModeratorUserButton: FC<ModeratorUserButtonProps> = ({ user, onClick }) => {\n  async function buttonClicked({ id }, setAsModerator: Boolean): Promise<Boolean> {\n    const data = {\n      userId: id,\n      isModerator: setAsModerator,\n    };\n    try {\n      const result = await fetchData(USER_SET_MODERATOR, {\n        data,\n        method: 'POST',\n        auth: true,\n      });\n      return result.success;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n    return false;\n  }\n\n  const isModerator = user.scopes?.includes('MODERATOR');\n  const actionString = isModerator ? 'remove moderator' : 'add moderator';\n  const icon = isModerator ? (\n    <ExclamationCircleFilled style={{ color: 'var(--ant-error)' }} />\n  ) : (\n    <QuestionCircleFilled style={{ color: 'var(--ant-warning)' }} />\n  );\n\n  const content = (\n    <>\n      Are you sure you want to {actionString} <strong>{user.displayName}</strong>?\n    </>\n  );\n\n  const confirmBlockAction = () => {\n    Modal.confirm({\n      title: `Confirm ${actionString}`,\n      content,\n      onCancel: () => {},\n      onOk: () =>\n        new Promise((resolve, reject) => {\n          const result = buttonClicked(user, !isModerator);\n          if (result) {\n            // wait a bit before closing so the user/client tables repopulate\n            // GW: TODO: put users/clients data in global app context instead, then call a function here to update that state. (current in another branch)\n            setTimeout(() => {\n              resolve(result);\n              onClick?.();\n            }, 3000);\n          } else {\n            reject();\n          }\n        }),\n      okType: 'danger',\n      okText: isModerator ? 'Yup!' : null,\n      icon,\n    });\n  };\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={confirmBlockAction}\n      size=\"small\"\n      icon={\n        isModerator ? (\n          <StopTwoTone twoToneColor=\"#ff4d4f\" />\n        ) : (\n          <SafetyCertificateTwoTone twoToneColor=\"#22bb44\" />\n        )\n      }\n      className=\"block-user-button\"\n    >\n      {actionString}\n    </Button>\n  );\n};\n\nModeratorUserButton.defaultProps = {\n  onClick: null,\n};\n","// This displays a clickable user name (or whatever children element you provide), and displays a simple tooltip of created time. OnClick a modal with more information about the user is displayed.\n\nimport { useState, ReactNode, FC } from 'react';\nimport { Divider, Modal, Typography, Row, Col, Space } from 'antd';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport format from 'date-fns/format';\nimport { uniq } from 'lodash';\n\nimport dynamic from 'next/dynamic';\nimport { BanUserButton } from './BanUserButton';\nimport { ModeratorUserButton } from './ModeratorUserButton';\n\nimport { User, UserConnectionInfo } from '../../types/chat';\nimport { formatDisplayDate } from './UserTable';\nimport { formatUAstring } from '../../utils/format';\n\n// Lazy loaded components\n\nconst Tooltip = dynamic(() => import('antd').then(mod => mod.Tooltip), {\n  ssr: false,\n});\n\nexport type UserPopoverProps = {\n  user: User;\n  connectionInfo?: UserConnectionInfo | null;\n  children: ReactNode;\n};\n\nexport const UserPopover: FC<UserPopoverProps> = ({ user, connectionInfo, children }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleShowModal = () => {\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const { displayName, createdAt, previousNames, nameChangedAt, disabledAt } = user;\n  const { connectedAt, messageCount, userAgent } = connectionInfo || {};\n\n  let lastNameChangeDate = null;\n  const nameList = previousNames && [...previousNames];\n\n  if (previousNames && previousNames.length > 1 && nameChangedAt) {\n    lastNameChangeDate = new Date(nameChangedAt);\n    // reverse prev names for display purposes\n    nameList.reverse();\n  }\n\n  const dateObject = new Date(createdAt);\n  const createdAtDate = format(dateObject, 'PP pp');\n\n  const lastNameChangeDuration = lastNameChangeDate\n    ? formatDistanceToNow(lastNameChangeDate)\n    : null;\n\n  return (\n    <>\n      <Tooltip\n        title={\n          <>\n            Created at: {createdAtDate}.\n            <br /> Click for more info.\n          </>\n        }\n        placement=\"bottomLeft\"\n      >\n        <button\n          type=\"button\"\n          aria-label=\"Display more details about this user\"\n          className=\"user-item-container\"\n          onClick={handleShowModal}\n        >\n          {children}\n        </button>\n      </Tooltip>\n\n      <Modal\n        destroyOnClose\n        width={600}\n        cancelText=\"Close\"\n        okButtonProps={{ style: { display: 'none' } }}\n        title={`User details: ${displayName}`}\n        open={isModalOpen}\n        onOk={handleCloseModal}\n        onCancel={handleCloseModal}\n      >\n        <div className=\"user-details\">\n          <Typography.Title level={4}>{displayName}</Typography.Title>\n          <p className=\"created-at\">User created at {createdAtDate}.</p>\n          <Row gutter={16}>\n            {connectionInfo && (\n              <Col md={lastNameChangeDate ? 12 : 24}>\n                <Typography.Title level={5}>\n                  This user is currently connected to Chat.\n                </Typography.Title>\n                <ul className=\"connection-info\">\n                  <li>\n                    <strong>Active for:</strong> {formatDistanceToNow(new Date(connectedAt))}\n                  </li>\n                  <li>\n                    <strong>Messages sent:</strong> {messageCount}\n                  </li>\n                  <li>\n                    <strong>User Agent:</strong>\n                    <br />\n                    {formatUAstring(userAgent)}\n                  </li>\n                </ul>\n              </Col>\n            )}\n            {lastNameChangeDate && (\n              <Col md={connectionInfo ? 12 : 24}>\n                <Typography.Title level={5}>This user is also seen as:</Typography.Title>\n                <ul className=\"previous-names-list\">\n                  {uniq(nameList).map((name, index) => (\n                    <li className={index === 0 ? 'latest' : ''}>\n                      <span className=\"user-name-item\">{name}</span>\n                      {index === 0 ? ` (Changed ${lastNameChangeDuration} ago)` : ''}\n                    </li>\n                  ))}\n                </ul>\n              </Col>\n            )}\n          </Row>\n          <Divider />\n          <Space direction=\"horizontal\">\n            {disabledAt ? (\n              <>\n                This user was banned on <code>{formatDisplayDate(disabledAt)}</code>.\n                <br />\n                <br />\n                <BanUserButton\n                  label=\"Unban this user\"\n                  user={user}\n                  isEnabled={false}\n                  onClick={handleCloseModal}\n                />\n              </>\n            ) : (\n              <BanUserButton\n                label=\"Ban this user\"\n                user={user}\n                isEnabled\n                onClick={handleCloseModal}\n              />\n            )}\n            <ModeratorUserButton user={user} onClick={handleCloseModal} />\n          </Space>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nUserPopover.defaultProps = {\n  connectionInfo: null,\n};\n","import { Table } from 'antd';\nimport format from 'date-fns/format';\nimport { SortOrder } from 'antd/lib/table/interface';\nimport { FC } from 'react';\nimport { User } from '../../types/chat';\nimport { UserPopover } from './UserPopover';\nimport { BanUserButton } from './BanUserButton';\n\nexport function formatDisplayDate(date: string | Date) {\n  return format(new Date(date), 'MMM d H:mma');\n}\n\nexport type UserTableProps = {\n  data: User[];\n};\n\nexport const UserTable: FC<UserTableProps> = ({ data }) => {\n  const columns = [\n    {\n      title: 'Last Known Display Name',\n      dataIndex: 'displayName',\n      key: 'displayName',\n      // eslint-disable-next-line react/destructuring-assignment\n      render: (displayName: string, user: User) => (\n        <UserPopover user={user}>\n          <span className=\"display-name\">{displayName}</span>\n        </UserPopover>\n      ),\n    },\n    {\n      title: 'Created',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (date: Date) => formatDisplayDate(date),\n      sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: 'Disabled at',\n      dataIndex: 'disabledAt',\n      key: 'disabledAt',\n      defaultSortOrder: 'descend' as SortOrder,\n      render: (date: Date) => (date ? formatDisplayDate(date) : null),\n      sorter: (a: any, b: any) =>\n        new Date(a.disabledAt).getTime() - new Date(b.disabledAt).getTime(),\n      sortDirections: ['descend', 'ascend'] as SortOrder[],\n    },\n    {\n      title: '',\n      key: 'block',\n      className: 'actions-col',\n      render: (_, user) => <BanUserButton user={user} isEnabled={!user.disabledAt} />,\n    },\n  ];\n\n  return (\n    <Table\n      pagination={{ hideOnSinglePage: true }}\n      className=\"table-container\"\n      columns={columns}\n      dataSource={data}\n      size=\"small\"\n      rowKey=\"id\"\n    />\n  );\n};\n","// Custom component for AntDesign Button that makes an api call, then displays a confirmation icon upon\nimport React, { useState, useEffect, FC } from 'react';\nimport { Button } from 'antd';\nimport {\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n} from '@ant-design/icons';\nimport dynamic from 'next/dynamic';\nimport { fetchData, UPDATE_CHAT_MESSGAE_VIZ } from '../../utils/apis';\nimport { MessageType } from '../../types/chat';\nimport { isEmptyObject } from '../../utils/format';\n\n// Lazy loaded components\n\nconst Tooltip = dynamic(() => import('antd').then(mod => mod.Tooltip), {\n  ssr: false,\n});\n\nexport type MessageToggleProps = {\n  isVisible: boolean;\n  message: MessageType;\n  setMessage: (message: MessageType) => void;\n};\n\nexport const MessageVisiblityToggle: FC<MessageToggleProps> = ({\n  isVisible,\n  message,\n  setMessage,\n}) => {\n  if (!message || isEmptyObject(message)) {\n    return null;\n  }\n\n  let outcomeTimeout = null;\n  const [outcome, setOutcome] = useState(0);\n\n  const { id: messageId } = message || {};\n\n  const resetOutcome = () => {\n    outcomeTimeout = setTimeout(() => {\n      setOutcome(0);\n    }, 3000);\n  };\n\n  useEffect(() => () => {\n    clearTimeout(outcomeTimeout);\n  });\n\n  const updateChatMessage = async () => {\n    clearTimeout(outcomeTimeout);\n    setOutcome(0);\n    const result = await fetchData(UPDATE_CHAT_MESSGAE_VIZ, {\n      auth: true,\n      method: 'POST',\n      data: {\n        visible: !isVisible,\n        idArray: [messageId],\n      },\n    });\n\n    if (result.success && result.message === 'changed') {\n      setMessage({ ...message, visible: !isVisible });\n      setOutcome(1);\n    } else {\n      setMessage({ ...message, visible: isVisible });\n      setOutcome(-1);\n    }\n    resetOutcome();\n  };\n\n  let outcomeIcon = <CheckCircleFilled style={{ color: 'transparent' }} />;\n  if (outcome) {\n    outcomeIcon =\n      outcome > 0 ? (\n        <CheckCircleFilled style={{ color: 'var(--ant-success)' }} />\n      ) : (\n        <ExclamationCircleFilled style={{ color: 'var(--ant-warning)' }} />\n      );\n  }\n\n  const toolTipMessage = `Click to ${isVisible ? 'hide' : 'show'} this message`;\n  return (\n    <div className={`toggle-switch ${isVisible ? '' : 'hidden'}`}>\n      <span className=\"outcome-icon\">{outcomeIcon}</span>\n      <Tooltip title={toolTipMessage} placement=\"topRight\">\n        <Button\n          shape=\"circle\"\n          size=\"small\"\n          type=\"text\"\n          icon={isVisible ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n          onClick={updateChatMessage}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Table, Typography, Button } from 'antd';\nimport { CheckCircleFilled, ExclamationCircleFilled } from '@ant-design/icons';\nimport classNames from 'classnames';\nimport { ColumnsType } from 'antd/es/table';\nimport format from 'date-fns/format';\n\nimport { MessageType } from '../../../types/chat';\nimport {\n  CHAT_HISTORY,\n  fetchData,\n  FETCH_INTERVAL,\n  UPDATE_CHAT_MESSGAE_VIZ,\n} from '../../../utils/apis';\nimport { isEmptyObject } from '../../../utils/format';\nimport { MessageVisiblityToggle } from '../../../components/admin/MessageVisiblityToggle';\nimport { UserPopover } from '../../../components/admin/UserPopover';\n\nconst { Title } = Typography;\n\nfunction createUserNameFilters(messages: MessageType[]) {\n  const filtered = messages.reduce((acc, curItem) => {\n    const curAuthor = curItem.user.id;\n    if (!acc.some(item => item.text === curAuthor)) {\n      acc.push({ text: curAuthor, value: curAuthor });\n    }\n    return acc;\n  }, []);\n\n  // sort by name\n  return filtered.sort((a, b) => {\n    const nameA = a.text.toUpperCase(); // ignore upper and lowercase\n    const nameB = b.text.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n}\nexport const OUTCOME_TIMEOUT = 3000;\n\nexport default function Chat() {\n  const [messages, setMessages] = useState([]);\n  const [selectedRowKeys, setSelectedRows] = useState([]);\n  const [bulkProcessing, setBulkProcessing] = useState(false);\n  const [bulkOutcome, setBulkOutcome] = useState(null);\n  const [bulkAction, setBulkAction] = useState('');\n  let outcomeTimeout = null;\n  let chatReloadInterval = null;\n\n  const getInfo = async () => {\n    try {\n      const result = await fetchData(CHAT_HISTORY, { auth: true });\n      if (isEmptyObject(result)) {\n        setMessages([]);\n      } else {\n        setMessages(result);\n      }\n    } catch (error) {\n      console.log('==== error', error);\n    }\n  };\n\n  useEffect(() => {\n    getInfo();\n\n    chatReloadInterval = setInterval(() => {\n      getInfo();\n    }, FETCH_INTERVAL);\n\n    return () => {\n      clearTimeout(outcomeTimeout);\n      clearTimeout(chatReloadInterval);\n    };\n  }, []);\n\n  const nameFilters = createUserNameFilters(messages);\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys: string[]) => {\n      setSelectedRows(selectedKeys);\n    },\n  };\n\n  const updateMessage = message => {\n    const messageIndex = messages.findIndex(m => m.id === message.id);\n    messages.splice(messageIndex, 1, message);\n    setMessages([...messages]);\n  };\n\n  const resetBulkOutcome = () => {\n    outcomeTimeout = setTimeout(() => {\n      setBulkOutcome(null);\n      setBulkAction('');\n    }, OUTCOME_TIMEOUT);\n  };\n  const handleSubmitBulk = async bulkVisibility => {\n    setBulkProcessing(true);\n    const result = await fetchData(UPDATE_CHAT_MESSGAE_VIZ, {\n      auth: true,\n      method: 'POST',\n      data: {\n        visible: bulkVisibility,\n        idArray: selectedRowKeys,\n      },\n    });\n\n    if (result.success && result.message === 'changed') {\n      setBulkOutcome(<CheckCircleFilled />);\n      resetBulkOutcome();\n\n      // update messages\n      const updatedList = [...messages];\n      selectedRowKeys.map(key => {\n        const messageIndex = updatedList.findIndex(m => m.id === key);\n        const newMessage = { ...messages[messageIndex], visible: bulkVisibility };\n        updatedList.splice(messageIndex, 1, newMessage);\n        return null;\n      });\n      setMessages(updatedList);\n      setSelectedRows([]);\n    } else {\n      setBulkOutcome(<ExclamationCircleFilled />);\n      resetBulkOutcome();\n    }\n    setBulkProcessing(false);\n  };\n  const handleSubmitBulkShow = () => {\n    setBulkAction('show');\n    handleSubmitBulk(true);\n  };\n  const handleSubmitBulkHide = () => {\n    setBulkAction('hide');\n    handleSubmitBulk(false);\n  };\n\n  const chatColumns: ColumnsType<MessageType> = [\n    {\n      title: 'Time',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      className: 'timestamp-col',\n      defaultSortOrder: 'descend',\n      render: timestamp => {\n        const dateObject = new Date(timestamp);\n        return format(dateObject, 'PP pp');\n      },\n      sorter: (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime(),\n      width: 90,\n    },\n    {\n      title: 'User',\n      dataIndex: 'user',\n      key: 'user',\n      className: 'name-col',\n      filters: nameFilters,\n      onFilter: (value, record) => record.user.id === value,\n      sorter: (a, b) => a.user.displayName.localeCompare(b.user.displayName),\n      sortDirections: ['ascend', 'descend'],\n      ellipsis: true,\n      render: user => {\n        const { displayName } = user;\n        return <UserPopover user={user}>{displayName}</UserPopover>;\n      },\n      width: 110,\n    },\n    {\n      title: 'Message',\n      dataIndex: 'body',\n      key: 'body',\n      className: 'message-col',\n      width: 320,\n      render: body => (\n        <div\n          className=\"message-contents\"\n          // eslint-disable-next-line react/no-danger\n          dangerouslySetInnerHTML={{ __html: body }}\n        />\n      ),\n    },\n    {\n      title: '',\n      dataIndex: 'hiddenAt',\n      key: 'hiddenAt',\n      className: 'toggle-col',\n      filters: [\n        { text: 'Visible messages', value: true },\n        { text: 'Hidden messages', value: false },\n      ],\n      onFilter: (value, record) => record.visible === value,\n      render: (hiddenAt, record) => (\n        <MessageVisiblityToggle isVisible={!hiddenAt} message={record} setMessage={updateMessage} />\n      ),\n      width: 30,\n    },\n  ];\n\n  const bulkDivClasses = classNames({\n    'bulk-editor': true,\n    active: selectedRowKeys.length,\n  });\n\n  return (\n    <div className=\"chat-messages\">\n      <Title>Chat Messages</Title>\n      <p>Manage the messages from viewers that show up on your stream.</p>\n      <div className={bulkDivClasses}>\n        <span className=\"label\">Check multiple messages to change their visibility to: </span>\n\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          shape=\"round\"\n          className=\"button\"\n          loading={bulkAction === 'show' && bulkProcessing}\n          icon={bulkAction === 'show' && bulkOutcome}\n          disabled={!selectedRowKeys.length || (bulkAction && bulkAction !== 'show')}\n          onClick={handleSubmitBulkShow}\n        >\n          Show\n        </Button>\n        <Button\n          type=\"primary\"\n          size=\"small\"\n          shape=\"round\"\n          className=\"button\"\n          loading={bulkAction === 'hide' && bulkProcessing}\n          icon={bulkAction === 'hide' && bulkOutcome}\n          disabled={!selectedRowKeys.length || (bulkAction && bulkAction !== 'hide')}\n          onClick={handleSubmitBulkHide}\n        >\n          Hide\n        </Button>\n      </div>\n      <Table\n        size=\"small\"\n        className=\"table-container\"\n        pagination={{ defaultPageSize: 100, showSizeChanger: true }}\n        scroll={{ y: 540 }}\n        rowClassName={record => (record.hiddenAt ? 'hidden' : '')}\n        dataSource={messages}\n        columns={chatColumns}\n        rowKey={row => row.id}\n        rowSelection={rowSelection}\n      />\n    </div>\n  );\n}\n","/* eslint-disable prefer-destructuring */\nconst ADMIN_USERNAME = process.env.NEXT_PUBLIC_ADMIN_USERNAME;\nconst ADMIN_STREAMKEY = process.env.NEXT_PUBLIC_ADMIN_STREAMKEY;\nexport const NEXT_PUBLIC_API_HOST = process.env.NEXT_PUBLIC_API_HOST;\n\nconst API_LOCATION = `${NEXT_PUBLIC_API_HOST}api/admin/`;\n\nexport const FETCH_INTERVAL = 15000;\n\n// Current inbound broadcaster info\nexport const STATUS = `${API_LOCATION}status`;\n\n// Disconnect inbound stream\nexport const DISCONNECT = `${API_LOCATION}disconnect`;\n\n// Change the current streaming key in memory\nexport const STREAMKEY_CHANGE = `${API_LOCATION}changekey`;\n\n// Current server config\nexport const SERVER_CONFIG = `${API_LOCATION}serverconfig`;\n\n// Base url to update config settings\nexport const SERVER_CONFIG_UPDATE_URL = `${API_LOCATION}config`;\n\n// Get viewer count over time\nexport const VIEWERS_OVER_TIME = `${API_LOCATION}viewersOverTime`;\n\n// Get active viewer details\nexport const ACTIVE_VIEWER_DETAILS = `${API_LOCATION}viewers`;\n\n// Get currently connected chat clients\nexport const CONNECTED_CLIENTS = `${API_LOCATION}chat/clients`;\n\n// Get list of disabled/blocked chat users\nexport const DISABLED_USERS = `${API_LOCATION}chat/users/disabled`;\n\n// Disable/enable a single user\nexport const USER_ENABLED_TOGGLE = `${API_LOCATION}chat/users/setenabled`;\n\n// Get banned IP addresses\nexport const BANNED_IPS = `${API_LOCATION}chat/users/ipbans`;\n\n// Remove IP ban\nexport const BANNED_IP_REMOVE = `${API_LOCATION}chat/users/ipbans/remove`;\n\n// Disable/enable a single user\nexport const USER_SET_MODERATOR = `${API_LOCATION}chat/users/setmoderator`;\n\n// Get list of moderators\nexport const MODERATORS = `${API_LOCATION}chat/users/moderators`;\n\n// Get hardware stats\nexport const HARDWARE_STATS = `${API_LOCATION}hardwarestats`;\n\n// Get all logs\nexport const LOGS_ALL = `${API_LOCATION}logs`;\n\n// Get warnings + errors\nexport const LOGS_WARN = `${API_LOCATION}logs/warnings`;\n\n// Get chat history\nexport const CHAT_HISTORY = `${API_LOCATION}chat/messages`;\n\n// Get chat history\nexport const UPDATE_CHAT_MESSGAE_VIZ = `/api/admin/chat/messagevisibility`;\n\n// Upload a new custom emoji\nexport const UPLOAD_EMOJI = `${API_LOCATION}emoji/upload`;\n\n// Delete a custom emoji\nexport const DELETE_EMOJI = `${API_LOCATION}emoji/delete`;\n\n// Get all access tokens\nexport const ACCESS_TOKENS = `${API_LOCATION}accesstokens`;\n\n// Delete a single access token\nexport const DELETE_ACCESS_TOKEN = `${API_LOCATION}accesstokens/delete`;\n\n// Create a new access token\nexport const CREATE_ACCESS_TOKEN = `${API_LOCATION}accesstokens/create`;\n\n// Get webhooks\nexport const WEBHOOKS = `${API_LOCATION}webhooks`;\n\n// Delete a single webhook\nexport const DELETE_WEBHOOK = `${API_LOCATION}webhooks/delete`;\n\n// Create a single webhook\nexport const CREATE_WEBHOOK = `${API_LOCATION}webhooks/create`;\n\n// hard coded social icons list\nexport const SOCIAL_PLATFORMS_LIST = `${NEXT_PUBLIC_API_HOST}api/socialplatforms`;\n\n// set external action links\nexport const EXTERNAL_ACTIONS = `${API_LOCATION}api/externalactions`;\n\n// send a message to the fediverse\nexport const FEDERATION_MESSAGE_SEND = `${API_LOCATION}federation/send`;\n\n// Get followers\nexport const FOLLOWERS = `${API_LOCATION}followers`;\n\n// Get followers pending approval\nexport const FOLLOWERS_PENDING = `${API_LOCATION}followers/pending`;\n\n// Get followers who were blocked or rejected\nexport const FOLLOWERS_BLOCKED = `${API_LOCATION}followers/blocked`;\n\n// Approve, reject a follow request\nexport const SET_FOLLOWER_APPROVAL = `${API_LOCATION}followers/approve`;\n\n// List of inbound federated actions that took place.\nexport const FEDERATION_ACTIONS = `${API_LOCATION}federation/actions`;\n\nexport const API_STREAM_HEALTH_METRICS = `${API_LOCATION}metrics/video`;\n\n// Save an array of stream keys\nexport const UPDATE_STREAM_KEYS = `${API_LOCATION}config/streamkeys`;\n\nexport const API_YP_RESET = `${API_LOCATION}yp/reset`;\n\nexport const TEMP_UPDATER_API = LOGS_ALL;\n\nconst GITHUB_RELEASE_URL = 'https://api.github.com/repos/owncast/owncast/releases/latest';\n\ninterface FetchOptions {\n  data?: any;\n  method?: string;\n  auth?: boolean;\n}\n\nexport async function fetchData(url: string, options?: FetchOptions) {\n  const { data, method = 'GET', auth = true } = options || {};\n\n  // eslint-disable-next-line no-undef\n  const requestOptions: RequestInit = {\n    method,\n  };\n\n  if (data) {\n    requestOptions.body = JSON.stringify(data);\n  }\n\n  if (auth && ADMIN_USERNAME && ADMIN_STREAMKEY) {\n    const encoded = btoa(`${ADMIN_USERNAME}:${ADMIN_STREAMKEY}`);\n    requestOptions.headers = {\n      Authorization: `Basic ${encoded}`,\n    };\n    requestOptions.mode = 'cors';\n    requestOptions.credentials = 'include';\n  }\n\n  try {\n    const response = await fetch(url, requestOptions);\n    const json = await response.json();\n\n    if (!response.ok) {\n      const message = json.message || `An error has occurred: ${response.status}`;\n      throw new Error(message);\n    }\n    return json;\n  } catch (error) {\n    console.error(error);\n    return error;\n    // console.log(error)\n    // throw new Error(error)\n  }\n}\n\nexport async function getUnauthedData(url: string, options?: FetchOptions) {\n  const opts = {\n    method: 'GET',\n    auth: false,\n    ...options,\n  };\n  return fetchData(url, opts);\n}\n\nexport async function fetchExternalData(url: string) {\n  try {\n    const response = await fetch(url, {\n      referrerPolicy: 'no-referrer', // Send no referrer header for privacy reasons.\n      referrer: '',\n    });\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      throw new Error(message);\n    }\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.log(error);\n  }\n  return {};\n}\n\nexport async function getGithubRelease() {\n  return fetchExternalData(GITHUB_RELEASE_URL);\n}\n\n// Stolen from https://gist.github.com/prenagha/98bbb03e27163bc2f5e4\nconst VPAT = /^\\d+(\\.\\d+){0,2}$/;\nfunction upToDate(local, remote) {\n  if (!local || !remote || local.length === 0 || remote.length === 0) return false;\n  if (local === remote) return true;\n  if (VPAT.test(local) && VPAT.test(remote)) {\n    const lparts = local.split('.');\n    while (lparts.length < 3) lparts.push('0');\n    const rparts = remote.split('.');\n    while (rparts.length < 3) rparts.push('0');\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < 3; i++) {\n      const l = parseInt(lparts[i], 10);\n      const r = parseInt(rparts[i], 10);\n      if (l === r)\n        // eslint-disable-next-line no-continue\n        continue;\n      return l > r;\n    }\n    return true;\n  }\n  return local >= remote;\n}\n\n// Make a request to the server status API and the Github releases API\n// and return a release if it's newer than the server version.\nexport async function upgradeVersionAvailable(currentVersion) {\n  const recentRelease = await getGithubRelease();\n  let recentReleaseVersion = recentRelease.tag_name;\n\n  if (recentReleaseVersion.substr(0, 1) === 'v') {\n    recentReleaseVersion = recentReleaseVersion.substr(1);\n  }\n\n  if (!upToDate(currentVersion, recentReleaseVersion)) {\n    return recentReleaseVersion;\n  }\n\n  return null;\n}\n","import UAParser from 'ua-parser-js';\n\nexport function formatIPAddress(ipAddress: string): string {\n  const ipAddressComponents = ipAddress.split(':');\n\n  // Wipe out the port component\n  ipAddressComponents[ipAddressComponents.length - 1] = '';\n\n  let ip = ipAddressComponents.join(':');\n  ip = ip.slice(0, ip.length - 1);\n  if (ip === '[::1]' || ip === '127.0.0.1') {\n    return 'Localhost';\n  }\n\n  return ip;\n}\n\n// check if obj is {}\nexport function isEmptyObject(obj) {\n  return !obj || (Object.keys(obj).length === 0 && obj.constructor === Object);\n}\n\nexport function padLeft(text, pad, size) {\n  return String(pad.repeat(size) + text).slice(-size);\n}\n\nexport function parseSecondsToDurationString(seconds = 0) {\n  const finiteSeconds = Number.isFinite(+seconds) ? Math.abs(seconds) : 0;\n\n  const days = Math.floor(finiteSeconds / 86400);\n  const daysString = days > 0 ? `${days} day${days > 1 ? 's' : ''} ` : '';\n\n  const hours = Math.floor((finiteSeconds / 3600) % 24);\n  const hoursString = hours || days ? padLeft(`${hours}:`, '0', 3) : '';\n\n  const mins = Math.floor((finiteSeconds / 60) % 60);\n  const minString = padLeft(`${mins}:`, '0', 3);\n\n  const secs = Math.floor(finiteSeconds % 60);\n  const secsString = padLeft(`${secs}`, '0', 2);\n\n  return daysString + hoursString + minString + secsString;\n}\n\nexport function makeAndStringFromArray(arr: string[]): string {\n  if (arr.length === 1) return arr[0];\n  const firsts = arr.slice(0, arr.length - 1);\n  const last = arr[arr.length - 1];\n  return `${firsts.join(', ')} and ${last}`;\n}\n\nexport function formatUAstring(uaString: string) {\n  const parser = UAParser(uaString);\n  const { device, os, browser } = parser;\n  const { major: browserVersion, name } = browser;\n  const { version: osVersion, name: osName } = os;\n  const { model, type } = device;\n\n  if (uaString === 'libmpv') {\n    return 'mpv media player';\n  }\n  // Fallback to just displaying the raw agent string.\n  if (!name || !browserVersion || !osName) {\n    return uaString;\n  }\n\n  const deviceString = model || type ? ` (${model || type})` : '';\n  return `${name} ${browserVersion} on ${osName} ${osVersion}\n  ${deviceString}`;\n}\n"],"names":["window","__NEXT_P","push","BanUserButton","user","isEnabled","label","onClick","actionString","icon","ExclamationCircleFilled","style","color","QuestionCircleFilled","content","strong","displayName","Button","type","Modal","title","onCancel","onOk","Promise","resolve","reject","result","async","id","data","userId","enabled","fetchData","USER_ENABLED_TOGGLE","method","auth","success","e","console","error","buttonClicked","setTimeout","okType","okText","size","StopTwoTone","twoToneColor","className","defaultProps","ModeratorUserButton","isModerator","scopes","includes","setAsModerator","USER_SET_MODERATOR","SafetyCertificateTwoTone","Tooltip","dynamic","then","mod","ssr","UserPopover","connectionInfo","children","isModalOpen","setIsModalOpen","useState","handleCloseModal","createdAt","previousNames","nameChangedAt","disabledAt","connectedAt","messageCount","userAgent","lastNameChangeDate","nameList","length","Date","reverse","dateObject","createdAtDate","format","lastNameChangeDuration","formatDistanceToNow","br","placement","button","aria-label","destroyOnClose","width","cancelText","okButtonProps","display","open","div","Typography","level","p","Row","gutter","Col","md","ul","li","formatUAstring","uniq","map","name","index","span","Divider","Space","direction","code","formatDisplayDate","date","UserTable","columns","dataIndex","key","render","sorter","a","b","getTime","sortDirections","defaultSortOrder","_","Table","pagination","hideOnSinglePage","dataSource","rowKey","MessageVisiblityToggle","isVisible","message","setMessage","isEmptyObject","outcomeTimeout","outcome","setOutcome","messageId","useEffect","clearTimeout","outcomeIcon","CheckCircleFilled","toolTipMessage","shape","EyeOutlined","EyeInvisibleOutlined","UPDATE_CHAT_MESSGAE_VIZ","visible","idArray","Title","OUTCOME_TIMEOUT","Chat","messages","setMessages","selectedRowKeys","setSelectedRows","bulkProcessing","setBulkProcessing","bulkOutcome","setBulkOutcome","bulkAction","setBulkAction","chatReloadInterval","getInfo","CHAT_HISTORY","log","setInterval","FETCH_INTERVAL","nameFilters","reduce","acc","curItem","curAuthor","some","item","text","value","sort","nameA","toUpperCase","nameB","createUserNameFilters","rowSelection","onChange","selectedKeys","updateMessage","messageIndex","findIndex","m","splice","resetBulkOutcome","handleSubmitBulk","bulkVisibility","updatedList","newMessage","chatColumns","timestamp","filters","onFilter","record","localeCompare","ellipsis","body","dangerouslySetInnerHTML","__html","hiddenAt","bulkDivClasses","classNames","active","loading","disabled","defaultPageSize","showSizeChanger","scroll","y","rowClassName","row","ADMIN_USERNAME","process","env","NEXT_PUBLIC_ADMIN_USERNAME","ADMIN_STREAMKEY","NEXT_PUBLIC_ADMIN_STREAMKEY","NEXT_PUBLIC_API_HOST","API_LOCATION","STATUS","SERVER_CONFIG","SERVER_CONFIG_UPDATE_URL","VIEWERS_OVER_TIME","ACTIVE_VIEWER_DETAILS","CONNECTED_CLIENTS","DISABLED_USERS","BANNED_IPS","BANNED_IP_REMOVE","MODERATORS","HARDWARE_STATS","LOGS_ALL","LOGS_WARN","UPLOAD_EMOJI","DELETE_EMOJI","ACCESS_TOKENS","DELETE_ACCESS_TOKEN","CREATE_ACCESS_TOKEN","WEBHOOKS","DELETE_WEBHOOK","CREATE_WEBHOOK","SOCIAL_PLATFORMS_LIST","FEDERATION_MESSAGE_SEND","FOLLOWERS","FOLLOWERS_PENDING","FOLLOWERS_BLOCKED","SET_FOLLOWER_APPROVAL","FEDERATION_ACTIONS","API_STREAM_HEALTH_METRICS","UPDATE_STREAM_KEYS","API_YP_RESET","url","options","requestOptions","JSON","stringify","encoded","btoa","headers","Authorization","mode","credentials","response","fetch","json","ok","status","Error","getUnauthedData","fetchExternalData","referrerPolicy","referrer","getGithubRelease","VPAT","upgradeVersionAvailable","currentVersion","recentReleaseVersion","tag_name","substr","local","remote","test","lparts","split","rparts","i","l","parseInt","r","upToDate","formatIPAddress","ipAddress","ipAddressComponents","ip","join","slice","obj","Object","keys","constructor","padLeft","pad","String","repeat","parseSecondsToDurationString","seconds","finiteSeconds","Number","isFinite","Math","abs","days","floor","daysString","hours","hoursString","mins","minString","secs","secsString","uaString","parser","UAParser","device","os","browser","major","browserVersion","version","osVersion","osName","model","deviceString"],"sourceRoot":""}