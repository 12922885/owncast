{"version":3,"file":"static/chunks/pages/admin/config-notify-ef602659d18ada39.js","mappings":"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","sources":["webpack://_N_E/?4f4e","webpack://_N_E/./components/admin/TextFieldWithSubmit.tsx","webpack://_N_E/./components/admin/ToggleSwitch.tsx","webpack://_N_E/./components/admin/notification/discord.tsx","webpack://_N_E/./components/admin/notification/browser.tsx","webpack://_N_E/./components/admin/notification/twitter.tsx","webpack://_N_E/./components/admin/notification/federation.tsx","webpack://_N_E/./pages/admin/config-notify.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config-notify\",\n      function () {\n        return require(\"private-next-pages/admin/config-notify.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config-notify\"])\n      });\n    }\n  ","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField } from '../TextField';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  DISCORD_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { discord } = notifications || {};\n\n  const { enabled, webhook, goLiveMessage } = discord || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      webhook,\n      goLiveMessage,\n    });\n  }, [notifications, discord]);\n\n  const canSave = (): boolean => {\n    if (webhook === '' || goLiveMessage === '') {\n      return false;\n    }\n\n    return true;\n  };\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n\n    setEnableSaveButton(canSave());\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/discord',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'discord',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    // setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n  };\n\n  return (\n    <>\n      <Title>Discord</Title>\n      <p className=\"description reduced-margins\">\n        Let your Discord channel know each time you go live.\n      </p>\n      <p className=\"description reduced-margins\">\n        <a\n          href=\"https://support.discord.com/hc/en-us/articles/228383668\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Create a webhook\n        </a>{' '}\n        under <i>Edit Channel / Integrations</i> on your Discord channel and provide it below.\n      </p>\n\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"discordEnabled\"\n        label=\"Enable Discord\"\n        checked={formDataValues.enabled}\n        onChange={handleSwitchChange}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...DISCORD_CONFIG_FIELDS.webhookUrl}\n          required\n          value={formDataValues.webhook}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...DISCORD_CONFIG_FIELDS.goLiveMessage}\n          required\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n\n      <Button\n        type=\"primary\"\n        onClick={save}\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField, TEXTFIELD_TYPE_TEXTAREA } from '../TextField';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  BROWSER_PUSH_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { browser } = notifications || {};\n\n  const { enabled, goLiveMessage } = browser || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      goLiveMessage,\n    });\n  }, [notifications, browser]);\n\n  const canSave = (): boolean => true;\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    console.log(fieldName, value);\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n\n    setEnableSaveButton(canSave());\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    // setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/browser',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'browser',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Title>Browser Alerts</Title>\n      <p className=\"description reduced-margins\">\n        Viewers can opt into being notified when you go live with their browser.\n      </p>\n      <p className=\"description reduced-margins\">Not all browsers support this.</p>\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"enabled\"\n        label=\"Enable browser notifications\"\n        onChange={handleSwitchChange}\n        checked={formDataValues.enabled}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...BROWSER_PUSH_CONFIG_FIELDS.goLiveMessage}\n          required\n          type={TEXTFIELD_TYPE_TEXTAREA}\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <Button\n        type=\"primary\"\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n        onClick={save}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField, TEXTFIELD_TYPE_PASSWORD } from '../TextField';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  TWITTER_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\nimport { TEXTFIELD_TYPE_TEXT } from '../TextFieldWithSubmit';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { twitter } = notifications || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    const {\n      enabled,\n      apiKey,\n      apiSecret,\n      accessToken,\n      accessTokenSecret,\n      bearerToken,\n      goLiveMessage,\n    } = twitter || {};\n    setFormDataValues({\n      enabled,\n      apiKey,\n      apiSecret,\n      accessToken,\n      accessTokenSecret,\n      bearerToken,\n      goLiveMessage,\n    });\n  }, [twitter]);\n\n  const canSave = (): boolean => {\n    const { apiKey, apiSecret, accessToken, accessTokenSecret, bearerToken, goLiveMessage } =\n      formDataValues;\n\n    return (\n      !!apiKey &&\n      !!apiSecret &&\n      !!accessToken &&\n      !!accessTokenSecret &&\n      !!bearerToken &&\n      !!goLiveMessage\n    );\n  };\n\n  useEffect(() => {\n    setEnableSaveButton(canSave());\n  }, [formDataValues]);\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    const previouslySaved = formDataValues.enabled;\n\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n\n    return switchEnabled !== previouslySaved;\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n    setEnableSaveButton(false);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/twitter',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'twitter',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Title>Twitter</Title>\n      <p className=\"description reduced-margins\">\n        Let your Twitter followers know each time you go live.\n      </p>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <p className=\"description reduced-margins\">\n          <a href=\"https://owncast.online/docs/notifications\" target=\"_blank\" rel=\"noreferrer\">\n            Read how to configure your Twitter account\n          </a>{' '}\n          to support posting from Owncast.\n        </p>\n        <p className=\"description reduced-margins\">\n          <a\n            href=\"https://developer.twitter.com/en/portal/dashboard\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            And then get your Twitter developer credentials\n          </a>{' '}\n          to fill in below.\n        </p>\n      </div>\n\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"enabled\"\n        label=\"Enable Twitter\"\n        onChange={handleSwitchChange}\n        checked={formDataValues.enabled}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.apiKey}\n          required\n          value={formDataValues.apiKey}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.apiSecret}\n          type={TEXTFIELD_TYPE_PASSWORD}\n          required\n          value={formDataValues.apiSecret}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.accessToken}\n          required\n          value={formDataValues.accessToken}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.accessTokenSecret}\n          type={TEXTFIELD_TYPE_PASSWORD}\n          required\n          value={formDataValues.accessTokenSecret}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.bearerToken}\n          required\n          value={formDataValues.bearerToken}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.goLiveMessage}\n          type={TEXTFIELD_TYPE_TEXT}\n          required\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <Button\n        type=\"primary\"\n        onClick={save}\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport Link from 'next/link';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n  const { federation } = serverConfig || {};\n\n  const { enabled } = federation || {};\n  const [formDataValues, setFormDataValues] = useState<any>({});\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n    });\n  }, [enabled]);\n\n  return (\n    <>\n      <Title>Fediverse Social</Title>\n      <p className=\"description\">\n        Enabling the Fediverse social features will not just alert people to when you go live, but\n        also enable other functionality.\n      </p>\n      <p>\n        Fediverse social features:{' '}\n        <span style={{ color: federation.enabled ? 'green' : 'red' }}>\n          {formDataValues.enabled ? 'Enabled' : 'Disabled'}\n        </span>\n      </p>\n\n      <Link passHref href=\"/config-federation\">\n        <Button\n          type=\"primary\"\n          style={{\n            position: 'relative',\n            marginLeft: 'auto',\n            right: '0',\n            marginTop: '20px',\n          }}\n        >\n          Configure\n        </Button>\n      </Link>\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Alert, Button, Col, Row, Typography } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport Link from 'next/link';\n\nimport Discord from '../../components/admin/notification/discord';\nimport Browser from '../../components/admin/notification/browser';\nimport Twitter from '../../components/admin/notification/twitter';\nimport Federation from '../../components/admin/notification/federation';\nimport {\n  TextFieldWithSubmit,\n  TEXTFIELD_TYPE_URL,\n} from '../../components/admin/TextFieldWithSubmit';\nimport { TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { UpdateArgs } from '../../types/config-section';\nimport { isValidUrl } from '../../utils/urls';\n\nconst { Title } = Typography;\n\nexport default function ConfigNotify() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n  const { yp } = serverConfig;\n  const { instanceUrl } = yp;\n  const [urlValid, setUrlValid] = useState(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      instanceUrl,\n    });\n  }, [yp]);\n\n  const handleSubmitInstanceUrl = () => {\n    if (!urlValid) {\n      return;\n    }\n\n    setFormDataValues({\n      ...formDataValues,\n      enabled: false,\n    });\n  };\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setUrlValid(isValidUrl(value));\n\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const enabled = instanceUrl !== '';\n  const configurationWarning = !enabled && (\n    <>\n      <Alert\n        message=\"You must set your server URL before you can enable this feature.\"\n        type=\"warning\"\n        showIcon\n      />\n      <br />\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL}\n        value={formDataValues?.instanceUrl || ''}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n        required\n      />\n    </>\n  );\n\n  return (\n    <>\n      <Title>Notifications</Title>\n      <p className=\"description\">\n        Let your viewers know when you go live by supporting any of the below notification channels.{' '}\n        <a\n          href=\"https://owncast.online/docs/notifications/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more about live notifications.\n        </a>\n      </p>\n\n      {configurationWarning}\n\n      <Row>\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Browser />\n        </Col>\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Twitter />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Discord />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Federation />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Title>Custom</Title>\n          <p className=\"description\">Build your own notifications by using custom webhooks.</p>\n\n          <Link passHref href=\"/webhooks\">\n            <Button\n              type=\"primary\"\n              style={{\n                position: 'relative',\n                marginLeft: 'auto',\n                right: '0',\n                marginTop: '20px',\n              }}\n            >\n              Create\n            </Button>\n          </Link>\n        </Col>\n      </Row>\n    </>\n  );\n}\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","submitStatus","setSubmitStatus","useState","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","fieldName","required","tip","status","value","onChange","onSubmit","resetStates","clearTimeout","useEffect","textfieldContainerClass","classNames","submittable","div","className","TextField","onBlur","changedValue","changedFieldName","newValue","trim","replace","p","FormStatusIndicator","Button","type","size","onClick","async","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","message","STATUS_ERROR","setTimeout","RESET_TIMEOUT","disabled","defaultProps","ToggleSwitch","checked","reversed","label","useSubmit","loading","span","Switch","isChecked","isCheckedSend","defaultChecked","checkedChildren","unCheckedChildren","Title","Typography","serverConfig","notifications","discord","enabled","webhook","goLiveMessage","formDataValues","setFormDataValues","enableSaveButton","setEnableSaveButton","handleFieldChange","a","href","target","rel","i","switchEnabled","style","display","DISCORD_CONFIG_FIELDS","postValue","position","marginLeft","right","marginTop","browser","console","log","BROWSER_PUSH_CONFIG_FIELDS","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","canSave","previouslySaved","TWITTER_CONFIG_FIELDS","TEXTFIELD_TYPE_PASSWORD","federation","color","Link","passHref","ConfigNotify","yp","instanceUrl","urlValid","setUrlValid","configurationWarning","Alert","showIcon","br","TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL","isValidUrl","Row","Col","margin","flexDirection","Browser","Twitter","Discord","Federation","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","icon","CheckCircleFilled","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","instanceDetails","customStyles","extraPageContent","logo","name","nsfw","socialHandles","streamTitle","summary","tags","title","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","isPrivate","username","showEngagement","blockedDomains","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","args","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","result","fetchData","STATUS","error","getStatusIntervalId","setInterval","FETCH_INTERVAL","SERVER_CONFIG","getConfig","clearInterval","providerValue","updatedConfig","Provider","propTypes","PropTypes"],"sourceRoot":""}