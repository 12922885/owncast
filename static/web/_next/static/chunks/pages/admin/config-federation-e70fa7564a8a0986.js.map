{"version":3,"file":"static/chunks/pages/admin/config-federation-e70fa7564a8a0986.js","mappings":"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","sources":["webpack://_N_E/?28df","webpack://_N_E/./components/admin/EditValueArray.tsx","webpack://_N_E/./components/admin/ToggleSwitch.tsx","webpack://_N_E/./pages/admin/config-federation.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config-federation\",\n      function () {\n        return require(\"private-next-pages/admin/config-federation.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config-federation\"])\n      });\n    }\n  ","/* eslint-disable react/no-array-index-key */\nimport React, { FC, useState } from 'react';\nimport { Typography, Tag } from 'antd';\n\nimport { TextField } from './TextField';\nimport { UpdateArgs } from '../../types/config-section';\nimport { StatusState } from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const TAG_COLOR = '#5a67d8';\n\nexport type EditStringArrayProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  maxLength?: number;\n  values: string[];\n  submitStatus?: StatusState;\n  continuousStatusMessage?: StatusState;\n  handleDeleteIndex: (index: number) => void;\n  handleCreateString: (arg: string) => void;\n};\n\nexport const EditValueArray: FC<EditStringArrayProps> = ({\n  title,\n  description,\n  placeholder,\n  maxLength,\n  values,\n  handleDeleteIndex,\n  handleCreateString,\n  submitStatus,\n  continuousStatusMessage,\n}) => {\n  const [newStringInput, setNewStringInput] = useState<string>('');\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    setNewStringInput(value);\n  };\n\n  const handleSubmitNewString = () => {\n    const newString = newStringInput.trim();\n    handleCreateString(newString);\n    setNewStringInput('');\n  };\n\n  return (\n    <div className=\"edit-string-array-container\">\n      <Title level={3} className=\"section-title\">\n        {title}\n      </Title>\n      <p className=\"description\">{description}</p>\n\n      <div className=\"edit-current-strings\">\n        {values?.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteIndex(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n      {continuousStatusMessage && (\n        <div className=\"continuous-status-section\">\n          <FormStatusIndicator status={continuousStatusMessage} />\n        </div>\n      )}\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"string-input\"\n          value={newStringInput}\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewString}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nEditValueArray.defaultProps = {\n  maxLength: 50,\n  description: null,\n  submitStatus: null,\n  continuousStatusMessage: null,\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","/* eslint-disable react/no-unescaped-entities */\nimport { Typography, Modal, Button, Row, Col, Alert } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TEXTFIELD_TYPE_TEXT,\n  TEXTFIELD_TYPE_TEXTAREA,\n  TEXTFIELD_TYPE_URL,\n} from '../../components/admin/TextField';\nimport { TextFieldWithSubmit } from '../../components/admin/TextFieldWithSubmit';\nimport { ToggleSwitch } from '../../components/admin/ToggleSwitch';\nimport { EditValueArray } from '../../components/admin/EditValueArray';\nimport { UpdateArgs } from '../../types/config-section';\nimport {\n  FIELD_PROPS_ENABLE_FEDERATION,\n  TEXTFIELD_PROPS_FEDERATION_LIVE_MESSAGE,\n  TEXTFIELD_PROPS_FEDERATION_DEFAULT_USER,\n  FIELD_PROPS_FEDERATION_IS_PRIVATE,\n  FIELD_PROPS_SHOW_FEDERATION_ENGAGEMENT,\n  TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL,\n  FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS,\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  API_FEDERATION_BLOCKED_DOMAINS,\n  FIELD_PROPS_FEDERATION_NSFW,\n} from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { createInputStatus, STATUS_ERROR, STATUS_SUCCESS } from '../../utils/input-statuses';\n\nconst FederationInfoModal = ({ cancelPressed, okPressed }) => (\n  <Modal\n    width=\"70%\"\n    title=\"Enable Social Features\"\n    visible\n    onCancel={cancelPressed}\n    footer={\n      <div>\n        <Button onClick={cancelPressed}>Do not enable</Button>\n        <Button type=\"primary\" onClick={okPressed}>\n          Enable Social Features\n        </Button>\n      </div>\n    }\n  >\n    <Typography.Title level={3}>How do Owncast's social features work?</Typography.Title>\n    <Typography.Paragraph>\n      Owncast's social features are accomplished by having your server join The{' '}\n      <a href=\"https://en.wikipedia.org/wiki/Fediverse\" rel=\"noopener noreferrer\" target=\"_blank\">\n        Fediverse\n      </a>\n      , a decentralized, open, collection of independent servers, like yours.\n    </Typography.Paragraph>\n    Please{' '}\n    <a href=\"https://owncast.online/docs/social\" rel=\"noopener noreferrer\" target=\"_blank\">\n      read more\n    </a>{' '}\n    about these features, the details behind them, and how they work.\n    <Typography.Paragraph />\n    <Typography.Title level={3}>What do you need to know?</Typography.Title>\n    <ul>\n      <li>\n        These features are brand new. Given the variability of interfacing with the rest of the\n        world, bugs are possible. Please report anything that you think isn't working quite right.\n      </li>\n      <li>You must always host your Owncast server with SSL using a https url.</li>\n      <li>\n        You should not change your server name URL or social username once people begin following\n        you, as your server will be seen as a completely different user on the Fediverse, and the\n        old user will disappear.\n      </li>\n      <li>\n        Turning on <i>Private mode</i> will allow you to manually approve each follower and limit\n        the visibility of your posts to followers only.\n      </li>\n    </ul>\n    <Typography.Title level={3}>Learn more about The Fediverse</Typography.Title>\n    <Typography.Paragraph>\n      If these concepts are new you should discover more about what this functionality has to offer.\n      Visit{' '}\n      <a href=\"https://owncast.online/docs/social\" rel=\"noopener noreferrer\" target=\"_blank\">\n        our documentation\n      </a>{' '}\n      to be pointed at some resources that will help get you started on The Fediverse.\n    </Typography.Paragraph>\n  </Modal>\n);\n\nFederationInfoModal.propTypes = {\n  cancelPressed: PropTypes.func.isRequired,\n  okPressed: PropTypes.func.isRequired,\n};\n\nconst ConfigFederation = () => {\n  const { Title } = Typography;\n  const [formDataValues, setFormDataValues] = useState(null);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const [blockedDomainSaveState, setBlockedDomainSaveState] = useState(null);\n\n  const { federation, yp, instanceDetails } = serverConfig;\n  const { enabled, isPrivate, username, goLiveMessage, showEngagement, blockedDomains } =\n    federation;\n  const { instanceUrl } = yp;\n  const { nsfw } = instanceDetails;\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const handleEnabledSwitchChange = (value: boolean) => {\n    if (!value) {\n      setFormDataValues({\n        ...formDataValues,\n        enabled: false,\n      });\n    } else {\n      setIsInfoModalOpen(true);\n    }\n  };\n\n  // if instanceUrl is empty, we should also turn OFF the `enabled` field of directory.\n  const handleSubmitInstanceUrl = () => {\n    const hasInstanceUrl = formDataValues.instanceUrl !== '';\n    const isInstanceUrlSecure = formDataValues.instanceUrl.startsWith('https://');\n\n    if (!hasInstanceUrl || !isInstanceUrlSecure) {\n      postConfigUpdateToAPI({\n        apiPath: FIELD_PROPS_ENABLE_FEDERATION.apiPath,\n        data: { value: false },\n      });\n      setFormDataValues({\n        ...formDataValues,\n        enabled: false,\n      });\n    }\n  };\n\n  function federationInfoModalCancelPressed() {\n    setIsInfoModalOpen(false);\n    setFormDataValues({\n      ...formDataValues,\n      enabled: false,\n    });\n  }\n\n  function federationInfoModalOkPressed() {\n    setIsInfoModalOpen(false);\n    setFormDataValues({\n      ...formDataValues,\n      enabled: true,\n    });\n  }\n\n  function resetBlockedDomainsSaveState() {\n    setBlockedDomainSaveState(null);\n  }\n\n  function saveBlockedDomains() {\n    try {\n      postConfigUpdateToAPI({\n        apiPath: API_FEDERATION_BLOCKED_DOMAINS,\n        data: { value: formDataValues.blockedDomains },\n        onSuccess: () => {\n          setFieldInConfigState({\n            fieldName: 'forbiddenUsernames',\n            value: formDataValues.forbiddenUsernames,\n          });\n          setBlockedDomainSaveState(STATUS_SUCCESS);\n          setTimeout(resetBlockedDomainsSaveState, RESET_TIMEOUT);\n        },\n        onError: (message: string) => {\n          setBlockedDomainSaveState(createInputStatus(STATUS_ERROR, message));\n          setTimeout(resetBlockedDomainsSaveState, RESET_TIMEOUT);\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      setBlockedDomainSaveState(STATUS_ERROR);\n    }\n  }\n\n  function handleDeleteBlockedDomain(index: number) {\n    formDataValues.blockedDomains.splice(index, 1);\n    saveBlockedDomains();\n  }\n\n  function handleCreateBlockedDomain(domain: string) {\n    let newDomain;\n    try {\n      const u = new URL(domain);\n      newDomain = u.host;\n    } catch (_) {\n      newDomain = domain;\n    }\n\n    formDataValues.blockedDomains.push(newDomain);\n    handleFieldChange({\n      fieldName: 'blockedDomains',\n      value: formDataValues.blockedDomains,\n    });\n    saveBlockedDomains();\n  }\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      isPrivate,\n      username,\n      goLiveMessage,\n      showEngagement,\n      blockedDomains,\n      nsfw,\n      instanceUrl: yp.instanceUrl,\n    });\n  }, [serverConfig, yp]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  const hasInstanceUrl = instanceUrl !== '';\n  const isInstanceUrlSecure = instanceUrl.startsWith('https://');\n  const configurationWarning = !isInstanceUrlSecure && (\n    <>\n      <Alert\n        message=\"You must set your server URL before you can enable this feature.\"\n        type=\"warning\"\n        showIcon\n      />\n      <br />\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL}\n        value={formDataValues.instanceUrl}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n        required\n      />\n    </>\n  );\n\n  const invalidPortWarning = (\n    <Alert\n      message=\"Only Owncast instances available on the default SSL port 443 support this feature.\"\n      type=\"warning\"\n      showIcon\n    />\n  );\n\n  const hasInvalidPort =\n    instanceUrl && new URL(instanceUrl).port !== '' && new URL(instanceUrl).port !== '443';\n\n  return (\n    <div>\n      <Title>Configure Social Features</Title>\n      <p>\n        Owncast provides the ability for people to follow and engage with your instance. It's a\n        great way to promote alerting, sharing and engagement of your stream.\n      </p>\n      <p>\n        Once enabled you'll alert your followers when you go live as well as gain the ability to\n        compose custom posts to share any information you like.\n      </p>\n      <p>\n        <a href=\"https://owncast.online/docs/social\" rel=\"noopener noreferrer\" target=\"_blank\">\n          Read more about the specifics of these social features.\n        </a>\n      </p>\n      <Row>\n        <Col span={15} className=\"form-module\" style={{ marginRight: '15px' }}>\n          {configurationWarning}\n          {hasInvalidPort && invalidPortWarning}\n          <ToggleSwitch\n            fieldName=\"enabled\"\n            onChange={handleEnabledSwitchChange}\n            {...FIELD_PROPS_ENABLE_FEDERATION}\n            checked={formDataValues.enabled}\n            disabled={hasInvalidPort || !hasInstanceUrl || !isInstanceUrlSecure}\n          />\n          <ToggleSwitch\n            fieldName=\"isPrivate\"\n            {...FIELD_PROPS_FEDERATION_IS_PRIVATE}\n            checked={formDataValues.isPrivate}\n            disabled={!enabled}\n          />\n          <ToggleSwitch\n            fieldName=\"nsfw\"\n            useSubmit\n            {...FIELD_PROPS_FEDERATION_NSFW}\n            checked={formDataValues.nsfw}\n            disabled={hasInvalidPort || !hasInstanceUrl}\n          />\n          <TextFieldWithSubmit\n            required\n            fieldName=\"username\"\n            type={TEXTFIELD_TYPE_TEXT}\n            {...TEXTFIELD_PROPS_FEDERATION_DEFAULT_USER}\n            value={formDataValues.username}\n            initialValue={username}\n            onChange={handleFieldChange}\n            disabled={!enabled}\n          />\n          <TextFieldWithSubmit\n            fieldName=\"goLiveMessage\"\n            {...TEXTFIELD_PROPS_FEDERATION_LIVE_MESSAGE}\n            type={TEXTFIELD_TYPE_TEXTAREA}\n            value={formDataValues.goLiveMessage}\n            initialValue={goLiveMessage}\n            onChange={handleFieldChange}\n            disabled={!enabled}\n          />\n          <ToggleSwitch\n            fieldName=\"showEngagement\"\n            {...FIELD_PROPS_SHOW_FEDERATION_ENGAGEMENT}\n            checked={formDataValues.showEngagement}\n            disabled={!enabled}\n          />\n        </Col>\n        <Col span={8} className=\"form-module\">\n          <EditValueArray\n            title={FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS.label}\n            placeholder={FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS.placeholder}\n            description={FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS.tip}\n            values={formDataValues.blockedDomains}\n            handleDeleteIndex={handleDeleteBlockedDomain}\n            handleCreateString={handleCreateBlockedDomain}\n            submitStatus={createInputStatus(blockedDomainSaveState)}\n          />\n        </Col>\n      </Row>\n      {isInfoModalOpen && (\n        <FederationInfoModal\n          cancelPressed={federationInfoModalCancelPressed}\n          okPressed={federationInfoModalOkPressed}\n        />\n      )}\n    </div>\n  );\n};\nexport default ConfigFederation;\n"],"names":["window","__NEXT_P","push","__webpack_require__","Title","Typography","TAG_COLOR","EditValueArray","title","description","placeholder","maxLength","values","handleDeleteIndex","handleCreateString","submitStatus","continuousStatusMessage","param","newStringInput","setNewStringInput","useState","handleInputChange","value","handleSubmitNewString","newString","trim","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","level","p","map","tag","index","handleClose","Tag","closable","onClose","color","concat","FormStatusIndicator","status","TextField","fieldName","onChange","onPressEnter","defaultProps","ToggleSwitch","apiPath","checked","reversed","configPath","disabled","label","tip","useSubmit","setSubmitStatus","resetTimer","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetStates","clearTimeout","handleChange","isChecked","createInputStatus","STATUS_PROCESSING","isCheckedSend","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","message","setTimeout","RESET_TIMEOUT","loading","type","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","FederationInfoModal","cancelPressed","okPressed","Modal","width","visible","onCancel","footer","Button","onClick","a","href","rel","target","ul","li","i","propTypes","PropTypes","ConfigFederation","formDataValues","setFormDataValues","isInfoModalOpen","setIsInfoModalOpen","serverConfig","blockedDomainSaveState","setBlockedDomainSaveState","federation","yp","instanceDetails","enabled","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","instanceUrl","nsfw","handleFieldChange","handleEnabledSwitchChange","handleSubmitInstanceUrl","hasInstanceUrl","isInstanceUrlSecure","startsWith","FIELD_PROPS_ENABLE_FEDERATION","resetBlockedDomainsSaveState","saveBlockedDomains","API_FEDERATION_BLOCKED_DOMAINS","forbiddenUsernames","e","console","error","useEffect","configurationWarning","Fragment","Alert","showIcon","br","TextFieldWithSubmit","TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL","initialValue","TEXTFIELD_TYPE_URL","onSubmit","required","invalidPortWarning","hasInvalidPort","URL","port","Row","Col","style","marginRight","FIELD_PROPS_FEDERATION_IS_PRIVATE","FIELD_PROPS_FEDERATION_NSFW","TEXTFIELD_TYPE_TEXT","TEXTFIELD_PROPS_FEDERATION_DEFAULT_USER","TEXTFIELD_PROPS_FEDERATION_LIVE_MESSAGE","TEXTFIELD_TYPE_TEXTAREA","FIELD_PROPS_SHOW_FEDERATION_ENGAGEMENT","FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS","splice","domain","newDomain","u","host","_","__webpack_exports__"],"sourceRoot":""}