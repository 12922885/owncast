{"version":3,"file":"static/chunks/pages/admin/config-chat-47c0ea0b9aea8632.js","mappings":"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","sources":["webpack://_N_E/?a2be","webpack://_N_E/./components/config/EditValueArray.tsx","webpack://_N_E/./components/config/TextFieldWithSubmit.tsx","webpack://_N_E/./components/config/ToggleSwitch.tsx","webpack://_N_E/./pages/admin/config-chat.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config-chat\",\n      function () {\n        return require(\"private-next-pages/admin/config-chat.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config-chat\"])\n      });\n    }\n  ","/* eslint-disable react/no-array-index-key */\nimport React, { FC, useState } from 'react';\nimport { Typography, Tag } from 'antd';\n\nimport { TextField } from './TextField';\nimport { UpdateArgs } from '../../types/config-section';\nimport { StatusState } from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const TAG_COLOR = '#5a67d8';\n\nexport type EditStringArrayProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  maxLength?: number;\n  values: string[];\n  submitStatus?: StatusState;\n  continuousStatusMessage?: StatusState;\n  handleDeleteIndex: (index: number) => void;\n  handleCreateString: (arg: string) => void;\n};\n\nexport const EditValueArray: FC<EditStringArrayProps> = ({\n  title,\n  description,\n  placeholder,\n  maxLength,\n  values,\n  handleDeleteIndex,\n  handleCreateString,\n  submitStatus,\n  continuousStatusMessage,\n}) => {\n  const [newStringInput, setNewStringInput] = useState<string>('');\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    setNewStringInput(value);\n  };\n\n  const handleSubmitNewString = () => {\n    const newString = newStringInput.trim();\n    handleCreateString(newString);\n    setNewStringInput('');\n  };\n\n  return (\n    <div className=\"edit-string-array-container\">\n      <Title level={3} className=\"section-title\">\n        {title}\n      </Title>\n      <p className=\"description\">{description}</p>\n\n      <div className=\"edit-current-strings\">\n        {values?.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteIndex(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n      {continuousStatusMessage && (\n        <div className=\"continuous-status-section\">\n          <FormStatusIndicator status={continuousStatusMessage} />\n        </div>\n      )}\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"string-input\"\n          value={newStringInput}\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewString}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nEditValueArray.defaultProps = {\n  maxLength: 50,\n  description: null,\n  submitStatus: null,\n  continuousStatusMessage: null,\n};\n","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import { Typography } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { TEXTFIELD_TYPE_TEXTAREA } from '../../components/config/TextField';\nimport { TextFieldWithSubmit } from '../../components/config/TextFieldWithSubmit';\nimport { ToggleSwitch } from '../../components/config/ToggleSwitch';\nimport { EditValueArray } from '../../components/config/EditValueArray';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\n\nimport { UpdateArgs } from '../../types/config-section';\nimport {\n  API_CHAT_FORBIDDEN_USERNAMES,\n  API_CHAT_SUGGESTED_USERNAMES,\n  FIELD_PROPS_CHAT_JOIN_MESSAGES_ENABLED,\n  CHAT_ESTABLISHED_USER_MODE,\n  FIELD_PROPS_DISABLE_CHAT,\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  TEXTFIELD_PROPS_CHAT_FORBIDDEN_USERNAMES,\n  TEXTFIELD_PROPS_CHAT_SUGGESTED_USERNAMES,\n  TEXTFIELD_PROPS_SERVER_WELCOME_MESSAGE,\n} from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport default function ConfigChat() {\n  const { Title } = Typography;\n  const [formDataValues, setFormDataValues] = useState(null);\n  const [forbiddenUsernameSaveState, setForbiddenUsernameSaveState] = useState<StatusState>(null);\n  const [suggestedUsernameSaveState, setSuggestedUsernameSaveState] = useState<StatusState>(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const {\n    chatDisabled,\n    chatJoinMessagesEnabled,\n    forbiddenUsernames,\n    instanceDetails,\n    suggestedUsernames,\n    chatEstablishedUserMode,\n  } = serverConfig;\n  const { welcomeMessage } = instanceDetails;\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  function handleChatDisableChange(disabled: boolean) {\n    handleFieldChange({ fieldName: 'chatDisabled', value: !disabled });\n  }\n\n  function handleChatJoinMessagesEnabledChange(enabled: boolean) {\n    handleFieldChange({ fieldName: 'chatJoinMessagesEnabled', value: enabled });\n  }\n\n  function handleEstablishedUserModeChange(enabled: boolean) {\n    handleFieldChange({ fieldName: 'chatEstablishedUserMode', value: enabled });\n  }\n\n  function resetForbiddenUsernameState() {\n    setForbiddenUsernameSaveState(null);\n  }\n\n  function saveForbiddenUsernames() {\n    postConfigUpdateToAPI({\n      apiPath: API_CHAT_FORBIDDEN_USERNAMES,\n      data: { value: formDataValues.forbiddenUsernames },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'forbiddenUsernames',\n          value: formDataValues.forbiddenUsernames,\n        });\n        setForbiddenUsernameSaveState(createInputStatus(STATUS_SUCCESS));\n        setTimeout(resetForbiddenUsernameState, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setForbiddenUsernameSaveState(createInputStatus(STATUS_ERROR, message));\n        setTimeout(resetForbiddenUsernameState, RESET_TIMEOUT);\n      },\n    });\n  }\n\n  function handleDeleteForbiddenUsernameIndex(index: number) {\n    formDataValues.forbiddenUsernames.splice(index, 1);\n    saveForbiddenUsernames();\n  }\n\n  function handleCreateForbiddenUsername(tag: string) {\n    formDataValues.forbiddenUsernames.push(tag);\n    handleFieldChange({\n      fieldName: 'forbiddenUsernames',\n      value: formDataValues.forbiddenUsernames,\n    });\n    saveForbiddenUsernames();\n  }\n\n  function resetSuggestedUsernameState() {\n    setSuggestedUsernameSaveState(null);\n  }\n\n  function saveSuggestedUsernames() {\n    postConfigUpdateToAPI({\n      apiPath: API_CHAT_SUGGESTED_USERNAMES,\n      data: { value: formDataValues.suggestedUsernames },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'suggestedUsernames',\n          value: formDataValues.suggestedUsernames,\n        });\n        setSuggestedUsernameSaveState(createInputStatus(STATUS_SUCCESS));\n        setTimeout(resetSuggestedUsernameState, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setForbiddenUsernameSaveState(createInputStatus(STATUS_ERROR, message));\n        setTimeout(resetSuggestedUsernameState, RESET_TIMEOUT);\n      },\n    });\n  }\n\n  function handleDeleteSuggestedUsernameIndex(index: number) {\n    formDataValues.suggestedUsernames.splice(index, 1);\n    saveSuggestedUsernames();\n  }\n\n  function handleCreateSuggestedUsername(tag: string) {\n    formDataValues.suggestedUsernames.push(tag);\n    handleFieldChange({\n      fieldName: 'suggestedUsernames',\n      value: formDataValues.suggestedUsernames,\n    });\n    saveSuggestedUsernames();\n  }\n\n  function getSuggestedUsernamesLimitWarning(length: number): StatusState | null {\n    if (length === 0)\n      return createInputStatus('success', TEXTFIELD_PROPS_CHAT_SUGGESTED_USERNAMES.no_entries);\n    if (length > 0 && length < 10)\n      return createInputStatus('warning', TEXTFIELD_PROPS_CHAT_SUGGESTED_USERNAMES.min_not_reached);\n    return null;\n  }\n\n  useEffect(() => {\n    setFormDataValues({\n      chatDisabled,\n      chatJoinMessagesEnabled,\n      forbiddenUsernames,\n      suggestedUsernames,\n      welcomeMessage,\n      chatEstablishedUserMode,\n    });\n  }, [serverConfig]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  return (\n    <div className=\"config-server-details-form\">\n      <Title>Chat Settings</Title>\n      <div className=\"form-module config-server-details-container\">\n        <ToggleSwitch\n          fieldName=\"chatDisabled\"\n          {...FIELD_PROPS_DISABLE_CHAT}\n          checked={!formDataValues.chatDisabled}\n          reversed\n          onChange={handleChatDisableChange}\n        />\n        <ToggleSwitch\n          fieldName=\"chatJoinMessagesEnabled\"\n          {...FIELD_PROPS_CHAT_JOIN_MESSAGES_ENABLED}\n          checked={formDataValues.chatJoinMessagesEnabled}\n          onChange={handleChatJoinMessagesEnabledChange}\n        />\n        <ToggleSwitch\n          fieldName=\"establishedUserMode\"\n          {...CHAT_ESTABLISHED_USER_MODE}\n          checked={formDataValues.chatEstablishedUserMode}\n          onChange={handleEstablishedUserModeChange}\n        />\n        <TextFieldWithSubmit\n          fieldName=\"welcomeMessage\"\n          {...TEXTFIELD_PROPS_SERVER_WELCOME_MESSAGE}\n          type={TEXTFIELD_TYPE_TEXTAREA}\n          value={formDataValues.welcomeMessage}\n          initialValue={welcomeMessage}\n          onChange={handleFieldChange}\n        />\n        <br />\n        <br />\n        <EditValueArray\n          title={TEXTFIELD_PROPS_CHAT_FORBIDDEN_USERNAMES.label}\n          placeholder={TEXTFIELD_PROPS_CHAT_FORBIDDEN_USERNAMES.placeholder}\n          description={TEXTFIELD_PROPS_CHAT_FORBIDDEN_USERNAMES.tip}\n          values={formDataValues.forbiddenUsernames}\n          handleDeleteIndex={handleDeleteForbiddenUsernameIndex}\n          handleCreateString={handleCreateForbiddenUsername}\n          submitStatus={forbiddenUsernameSaveState}\n        />\n        <br />\n        <br />\n        <EditValueArray\n          title={TEXTFIELD_PROPS_CHAT_SUGGESTED_USERNAMES.label}\n          placeholder={TEXTFIELD_PROPS_CHAT_SUGGESTED_USERNAMES.placeholder}\n          description={TEXTFIELD_PROPS_CHAT_SUGGESTED_USERNAMES.tip}\n          values={formDataValues.suggestedUsernames}\n          handleDeleteIndex={handleDeleteSuggestedUsernameIndex}\n          handleCreateString={handleCreateSuggestedUsername}\n          submitStatus={suggestedUsernameSaveState}\n          continuousStatusMessage={getSuggestedUsernamesLimitWarning(\n            formDataValues.suggestedUsernames.length,\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","__webpack_require__","Title","Typography","TAG_COLOR","EditValueArray","title","description","placeholder","maxLength","values","handleDeleteIndex","handleCreateString","submitStatus","continuousStatusMessage","param","newStringInput","setNewStringInput","useState","handleInputChange","value","handleSubmitNewString","newString","trim","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","level","p","map","tag","index","handleClose","Tag","closable","onClose","color","concat","FormStatusIndicator","status","TextField","fieldName","onChange","onPressEnter","defaultProps","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","setSubmitStatus","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","required","tip","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","onBlur","Button","type","size","onClick","disabled","ToggleSwitch","checked","reversed","label","useSubmit","isChecked","isCheckedSend","loading","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","ConfigChat","length","formDataValues","setFormDataValues","forbiddenUsernameSaveState","setForbiddenUsernameSaveState","suggestedUsernameSaveState","setSuggestedUsernameSaveState","serverConfig","chatDisabled","chatJoinMessagesEnabled","forbiddenUsernames","instanceDetails","suggestedUsernames","chatEstablishedUserMode","welcomeMessage","handleFieldChange","resetForbiddenUsernameState","saveForbiddenUsernames","API_CHAT_FORBIDDEN_USERNAMES","resetSuggestedUsernameState","saveSuggestedUsernames","API_CHAT_SUGGESTED_USERNAMES","FIELD_PROPS_DISABLE_CHAT","FIELD_PROPS_CHAT_JOIN_MESSAGES_ENABLED","enabled","CHAT_ESTABLISHED_USER_MODE","TEXTFIELD_PROPS_SERVER_WELCOME_MESSAGE","br","TEXTFIELD_PROPS_CHAT_FORBIDDEN_USERNAMES","splice","TEXTFIELD_PROPS_CHAT_SUGGESTED_USERNAMES","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","icon","CheckCircleFilled","style","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","customStyles","extraPageContent","logo","name","nsfw","socialHandles","streamTitle","summary","tags","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","yp","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","result","fetchData","STATUS","error","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue","Provider","propTypes","PropTypes","__webpack_exports__"],"sourceRoot":""}