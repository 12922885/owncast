{"version":3,"file":"static/chunks/pages/admin/config-notify-56ed560464cc3de8.js","mappings":"qFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,uBACA,WACA,OAAeC,EAAQ,MACvB,EACA,+PCUO,IAAMC,EAAsB,UAGtBC,EAA0B,WAC1BC,EAAqB,MAQrBC,EAAoD,GAO3D,IAP4D,CAChEC,QAAAA,CAAAA,CACAC,WAAAA,EAAa,GACbC,aAAAA,CAAAA,CACAC,QAAAA,CAAAA,CACAC,YAAAA,CAAAA,CACA,GAAGC,EACJ,CAAAC,EACO,CAACC,EAAcC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,IAAI,EAE5D,CAACC,EAAYC,EAAc,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAEvCG,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAmBA,EACjD,CAAEC,sBAAAA,CAAAA,CAAuB,CAAGH,GAAoB,CAAC,EAEnDI,EAAa,IAAI,CAEf,CAAEC,UAAAA,CAAAA,CAAWC,SAAAA,CAAAA,CAAUC,IAAAA,CAAAA,CAAKC,OAAAA,CAAAA,CAAQC,MAAAA,CAAAA,CAAOC,SAAAA,CAAAA,CAAUC,SAAAA,CAAAA,CAAU,CAAGlB,EAGlEmB,EAAc,IAAM,CACxBhB,EAAgB,IAAI,EACpBG,EAAc,IACdc,aAAaT,GACbA,EAAa,IAAI,EAGnBU,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CAIVR,GAAcG,CAAAA,KAAAA,GAAgBA,IAAc,GAAdA,CAAU,GAAUA,IAAUnB,EAC9DS,EAAc,KAGda,IACAb,EAAc,IAElB,EAAG,CAACU,EAAM,EAGV,IAAMM,EAAe,GAAsE,IAArE,CAAEV,UAAWW,CAAAA,CAAkBP,MAAOQ,CAAAA,CAA0B,CAAAvB,EACpF,GAAIgB,EAAU,CACZ,IAAIQ,EAAmBD,EACnB1B,EACF2B,EAAWD,EAAaE,IAAI,GACnB3B,GACT0B,CAAAA,EAAWD,EAAaG,OAAO,CAAC,QAAS,KAE3CV,EAAS,CACPL,UAAWW,EACXP,MAAOS,CACT,EACF,CAAC,EAIGG,EAAa,GAAyC,IAAxC,CAAEZ,MAAOQ,CAAAA,CAA0B,CAAAvB,EACjDgB,GAAYJ,GAAYW,KAAAA,GAC1BP,EAAS,CAAEL,UAAAA,EAAWI,MAAOnB,CAAa,EAE9C,EAGMgC,EAAe,SAAY,CAC3BhB,CAAAA,GAAaG,KAAAA,GAAiBA,IAAUnB,CAAAA,IAC1CM,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBC,EAAAA,EAAiBA,GAEnD,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAC1BrC,QAAAA,EACAsC,KAAM,CAAEjB,MAAAA,CAAM,EACdkB,UAAW,IAAM,CACfxB,EAAsB,CAAEE,UAAAA,EAAWI,MAAAA,EAAOmB,KAAMvC,CAAW,GAC3DO,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBM,EAAAA,EAAcA,EAClD,EACAC,QAAS,GAAqB,CAC5BlC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBQ,EAAAA,EAAYA,CAAE,uBAA+BC,MAAA,CAARC,IACzE,CACF,GACA7B,EAAa8B,WAAWtB,EAAauB,EAAAA,EAAaA,EAG9CxB,GACFA,IAGN,EAEMyB,EAA0BC,IAAW,CACzC,kCAAmC,GACnCC,YAAaxC,CACf,GACA,MACE,GAAAyC,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAWN,YACd,GAAAG,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,+BACb,GAAAH,EAAAI,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGnD,CAAc,CAClBkB,SAAU,IAAI,CACdkC,OAAQxB,EACRX,SAAUK,MAGd,GAAAwB,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,gDACb,GAAAH,EAAAI,GAAA,EAACG,IAAAA,CAAEJ,UAAU,iBACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,0BACb,GAAAH,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,qBAAanC,IAC5B,GAAAgC,EAAAI,GAAA,EAACI,EAAAA,CAAmBA,CAAAA,CAACvC,OAAQA,GAAUb,IACvC,GAAA4C,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,mCACb,GAAAH,EAAAI,GAAA,EAACK,EAAAA,CAAMA,CAAAA,CACLC,KAAK,UACLC,KAAK,QACLR,UAAU,gBACVS,QAAS7B,EACT8B,SAAU,CAACtD,WACZ,qBAQb,CAEAX,CAAAA,EAAoBkE,YAAY,CAAG,CACjChE,WAAY,GACZC,aAAc,EAChB,sJC3HO,IAAMgE,EAAsC,GAW7C,IAX8C,CAClDlE,QAAAA,CAAAA,CACAmE,QAAAA,CAAAA,CACAC,SAAAA,EAAW,EAAK,CAChBnE,WAAAA,EAAa,GACb+D,SAAAA,EAAW,EAAK,CAChB/C,UAAAA,CAAAA,CACAoD,MAAAA,CAAAA,CACAlD,IAAAA,CAAAA,CACAmD,UAAAA,CAAAA,CACAhD,SAAAA,CAAAA,CACD,CAAAhB,EACO,CAACC,EAAcC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,IAAI,EAE9DO,EAAa,IAAI,CAEfJ,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAmBA,EACjD,CAAEC,sBAAAA,CAAAA,CAAuB,CAAGH,GAAoB,CAAC,EAEjDY,EAAc,IAAM,CACxBhB,EAAgB,IAAI,EACpBiB,aAAaT,GACbA,EAAa,IAAI,EAGbW,EAAe,MAAO4C,GAAuB,CACjD,GAAID,EAAW,CACb9D,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBC,EAAAA,EAAiBA,GACnD,IAAMoC,EAAgBJ,EAAW,CAACG,EAAYA,CAAS,OAEjDlC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAC1BrC,QAAAA,EACAsC,KAAM,CAAEjB,MAAOmD,CAAc,EAC7BjC,UAAW,IAAM,CACfxB,EAAsB,CAAEE,UAAAA,EAAWI,MAAOmD,EAAehC,KAAMvC,CAAW,GAC1EO,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBM,EAAAA,EAAcA,EAClD,EACAC,QAAS,GAAqB,CAC5BlC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBQ,EAAAA,EAAYA,CAAE,uBAA+BC,MAAA,CAARC,IACzE,CACF,GACA7B,EAAa8B,WAAWtB,EAAauB,EAAAA,EAAaA,CACpD,CAAC,GAECzB,EAASiD,EAEb,EAEME,EAAUlE,IAAqB,GAArBA,GAAyBA,EAAasD,IAAI,GAAKzB,EAAAA,EAAiBA,CAChF,MACE,GAAAe,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,uDACZe,GACC,GAAAlB,EAAAI,GAAA,EAACF,MAAAA,CAAIC,UAAU,sBACb,GAAAH,EAAAI,GAAA,EAACmB,OAAAA,CAAKpB,UAAU,2BAAmBe,MAIvC,GAAAlB,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,uBACb,GAAAH,EAAAC,IAAA,EAACC,MAAAA,CAAIC,UAAU,wBACb,GAAAH,EAAAI,GAAA,EAACoB,EAAAA,CAAMA,CAAAA,CACLrB,UAAW,gBAA0BV,MAAA,CAAV3B,GAC3BwD,QAASA,EACTnD,SAAUK,EACViD,eAAgBT,EAChBA,QAASA,EACTU,gBAAgB,KAChBC,kBAAkB,MAClBd,SAAUA,IAEZ,GAAAb,EAAAI,GAAA,EAACI,EAAAA,CAAmBA,CAAAA,CAACvC,OAAQb,OAE/B,GAAA4C,EAAAI,GAAA,EAACG,IAAAA,CAAEJ,UAAU,qBAAanC,SAIlC,CAGA+C,CAAAA,EAAaD,YAAY,CAAG,CAC1BjE,QAAS,GACTmE,QAAS,GACTC,SAAU,GACVnE,WAAY,GACZ+D,SAAU,GACVK,MAAO,GACPlD,IAAK,GACLmD,UAAW,GACXhD,SAAU,IAAI,wPCpGhB,GAAM,CAAEyD,MAAAA,CAAAA,CAAO,CAAGC,EAAAA,CAAUA,CAEfC,EAAe,IAAM,CAChC,IAAMrE,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAmBA,EACjD,CAAEoE,aAAAA,CAAAA,CAAcnE,sBAAAA,CAAAA,CAAuB,CAAGH,GAAoB,CAAC,EAC/D,CAAEuE,cAAAA,CAAAA,CAAe,CAAGD,GAAgB,CAAC,EACrC,CAAEE,QAAAA,CAAAA,CAAS,CAAGD,GAAiB,CAAC,EAEhC,CAAEE,QAAAA,CAAAA,CAASC,QAAAA,CAAAA,CAASC,cAAAA,CAAAA,CAAe,CAAGH,GAAW,CAAC,EAElD,CAACI,EAAgBC,EAAkB,CAAGhF,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,CAAC,GACrD,CAACF,EAAcC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,IAAI,EAE5D,CAACiF,EAAkBC,EAAoB,CAAGlF,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,IAElEiB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd+D,EAAkB,CAChBJ,QAAAA,EACAC,QAAAA,EACAC,cAAAA,CACF,EACF,EAAG,CAACJ,EAAeC,EAAQ,EAE3B,IAAMQ,EAAU,IACVN,KAAAA,GAAkBC,KAAAA,EAQlBM,EAAoB,GAAsC,IAArC,CAAE5E,UAAAA,CAAAA,CAAWI,MAAAA,CAAAA,CAAmB,CAAAf,EACzDmF,EAAkB,CAChB,GAAGD,CAAc,CACjB,CAACvE,EAAU,CAAEI,CACf,GAEAsE,EAAoBC,IACtB,EAGMpE,EAAc,IAAM,CACxBhB,EAAgB,IAAI,EAEpBiB,aADa,IAAI,CAEnB,EAEMqE,EAAO,SAAY,CAGvB,MAAMzD,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAC1BrC,QAAS,yBACTsC,KAAM,CAAEjB,MAJQmE,CAIS,EACzBjD,UAAW,IAAM,CACfxB,EAAsB,CACpBE,UAAW,UACXI,MARYmE,EASZhD,KAAM,eACR,GACAhC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBM,EAAAA,EAAcA,CAAE,aACrCK,WAAWtB,EAAauB,EAAAA,EAAaA,CACpD,EACAL,QAAS,GAAqB,CAC5BlC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBQ,EAAAA,EAAYA,CAAEE,IACnCC,WAAWtB,EAAauB,EAAAA,EAAaA,CACpD,CACF,EACF,EAGMgD,EAAqB,GAA4B,CAErDF,EAAkB,CAAE5E,UAAW,UAAWI,MAAO2E,CAAc,EACjE,EAEA,MACE,GAAAC,EAAA7C,IAAA,EAAA6C,EAAAC,QAAA,YACE,GAAAD,EAAA1C,GAAA,EAACwB,EAAAA,UAAM,YACP,GAAAkB,EAAA1C,GAAA,EAACG,IAAAA,CAAEJ,UAAU,uCAA8B,yDAG3C,GAAA2C,EAAA7C,IAAA,EAACM,IAAAA,CAAEJ,UAAU,wCACX,GAAA2C,EAAA1C,GAAA,EAAC4C,IAAAA,CACCC,KAAK,0DACLC,OAAO,SACPC,IAAI,sBACL,qBAEI,IAAI,SACH,GAAAL,EAAA1C,GAAA,EAACgD,IAAAA,UAAE,gCAA+B,oDAG1C,GAAAN,EAAA1C,GAAA,EAACW,EAAAA,CAAYA,CAAAA,CACXlE,QAAQ,GACRiB,UAAU,iBACVoD,MAAM,iBACNF,QAASqB,EAAeH,OAAO,CAC/B/D,SAAUyE,IAEZ,GAAAE,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkD,EAAAA,EAAAA,CAAAA,UAAgC,CACpCxF,SAAQ,GACRG,MAAOmE,EAAeF,OAAO,CAC7BhE,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkD,EAAAA,EAAAA,CAAAA,aAAmC,CACvCxF,SAAQ,GACRG,MAAOmE,EAAeD,aAAa,CACnCjE,SAAUuE,MAId,GAAAI,EAAA1C,GAAA,EAACK,EAAAA,CAAMA,CAAAA,CACLC,KAAK,UACLE,QAAS+B,EACTU,MAAO,CACLC,QAASf,EAAmB,eAAiB,MAAM,CACnDiB,SAAU,WACVC,WAAY,OACZC,MAAO,IACPC,UAAW,MACb,WACD,SAGD,GAAAb,EAAA1C,GAAA,EAACI,EAAAA,CAAmBA,CAAAA,CAACvC,OAAQb,MAGnC,ECrIM,CAAEwE,MAAKA,CAAAA,CAAE,CAAGC,EAAAA,CAAUA,CAEfC,EAAe,IAAM,CAChC,IAAMrE,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAmBA,EACjD,CAAEoE,aAAAA,CAAAA,CAAcnE,sBAAAA,CAAAA,CAAuB,CAAGH,GAAoB,CAAC,EAC/D,CAAEuE,cAAAA,CAAAA,CAAe,CAAGD,GAAgB,CAAC,EACrC,CAAE6B,QAAAA,CAAAA,CAAS,CAAG5B,GAAiB,CAAC,EAEhC,CAAEE,QAAAA,CAAAA,CAASE,cAAAA,CAAAA,CAAe,CAAGwB,GAAW,CAAC,EAEzC,CAACvB,EAAgBC,EAAkB,CAAGhF,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,CAAC,GACrD,CAACF,EAAcC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,IAAI,EAE5D,CAACiF,EAAkBC,EAAoB,CAAGlF,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,IAElEiB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd+D,EAAkB,CAChBJ,QAAAA,EACAE,cAAAA,CACF,EACF,EAAG,CAACJ,EAAe4B,EAAQ,EAE3B,IAAMnB,EAAU,IAAe,GAGzBC,EAAoB,GAAsC,IAArC,CAAE5E,UAAAA,CAAAA,CAAWI,MAAAA,CAAAA,CAAmB,CAAAf,EACzD0G,QAAQC,GAAG,CAAChG,EAAWI,GACvBoE,EAAkB,CAChB,GAAGD,CAAc,CACjB,CAACvE,EAAU,CAAEI,CACf,GAEAsE,EAAoBC,IACtB,EAGMG,EAAqB,GAA4B,CAErDF,EAAkB,CAAE5E,UAAW,UAAWI,MAAO2E,CAAc,EACjE,EAGMxE,EAAc,IAAM,CACxBhB,EAAgB,IAAI,EAEpBiB,aADa,IAAI,CAEnB,EAEMqE,EAAO,SAAY,CAGvB,MAAMzD,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAC1BrC,QAAS,yBACTsC,KAAM,CAAEjB,MAJQmE,CAIS,EACzBjD,UAAW,IAAM,CACfxB,EAAsB,CACpBE,UAAW,UACXI,MARYmE,EASZhD,KAAM,eACR,GACAhC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBM,EAAAA,EAAcA,CAAE,aACrCK,WAAWtB,EAAauB,EAAAA,EAAaA,CACpD,EACAL,QAAS,GAAqB,CAC5BlC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBQ,EAAAA,EAAYA,CAAEE,IACnCC,WAAWtB,EAAauB,EAAAA,EAAaA,CACpD,CACF,EACF,EAEA,MACE,GAAAkD,EAAA7C,IAAA,EAAA6C,EAAAC,QAAA,YACE,GAAAD,EAAA1C,GAAA,EAACwB,EAAKA,UAAC,mBACP,GAAAkB,EAAA1C,GAAA,EAACG,IAAAA,CAAEJ,UAAU,uCAA8B,6EAG3C,GAAA2C,EAAA1C,GAAA,EAACG,IAAAA,CAAEJ,UAAU,uCAA8B,mCAC3C,GAAA2C,EAAA1C,GAAA,EAACW,EAAAA,CAAYA,CAAAA,CACXlE,QAAQ,GACRiB,UAAU,UACVoD,MAAM,+BACN/C,SAAUyE,EACV5B,QAASqB,EAAeH,OAAO,GAEjC,GAAAY,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAG0D,EAAAA,EAAAA,CAAAA,aAAwC,CAC5ChG,SAAQ,GACR2C,KAAMhE,EAAAA,EAAuBA,CAC7BwB,MAAOmE,EAAeD,aAAa,CACnCjE,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACK,EAAAA,CAAMA,CAAAA,CACLC,KAAK,UACL2C,MAAO,CACLC,QAASf,EAAmB,eAAiB,MAAM,CACnDiB,SAAU,WACVC,WAAY,OACZC,MAAO,IACPC,UAAW,MACb,EACA/C,QAAS+B,WACV,SAGD,GAAAG,EAAA1C,GAAA,EAACI,EAAAA,CAAmBA,CAAAA,CAACvC,OAAQb,MAGnC,iBC5GA,GAAM,CAAEwE,MAAKA,CAAAA,CAAE,CAAGC,EAAAA,CAAUA,CAEfC,EAAe,IAAM,CAChC,IAAMrE,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAmBA,EACjD,CAAEoE,aAAAA,CAAAA,CAAcnE,sBAAAA,CAAAA,CAAuB,CAAGH,GAAoB,CAAC,EAC/D,CAAEuE,cAAAA,CAAAA,CAAe,CAAGD,GAAgB,CAAC,EACrC,CAAEiC,QAAAA,CAAAA,CAAS,CAAGhC,GAAiB,CAAC,EAEhC,CAACK,EAAgBC,EAAkB,CAAGhF,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,CAAC,GACrD,CAACF,EAAcC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAsB,IAAI,EAE5D,CAACiF,EAAkBC,EAAoB,CAAGlF,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,IAElEiB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd,GAAM,CACJ2D,QAAAA,CAAAA,CACA+B,OAAAA,CAAAA,CACAC,UAAAA,CAAAA,CACAC,YAAAA,CAAAA,CACAC,kBAAAA,CAAAA,CACAC,YAAAA,CAAAA,CACAjC,cAAAA,CAAAA,CACD,CAAG4B,GAAW,CAAC,EAChB1B,EAAkB,CAChBJ,QAAAA,EACA+B,OAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,kBAAAA,EACAC,YAAAA,EACAjC,cAAAA,CACF,EACF,EAAG,CAAC4B,EAAQ,EAEZ,IAAMvB,EAAU,IAAe,CAC7B,GAAM,CAAEwB,OAAAA,CAAAA,CAAQC,UAAAA,CAAAA,CAAWC,YAAAA,CAAAA,CAAaC,kBAAAA,CAAAA,CAAmBC,YAAAA,CAAAA,CAAajC,cAAAA,CAAAA,CAAe,CACrFC,EAEF,MACE,CAAC,CAAC4B,GACF,CAAC,CAACC,GACF,CAAC,CAACC,GACF,CAAC,CAACC,GACF,CAAC,CAACC,GACF,CAAC,CAACjC,CAEN,EAEA7D,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACdiE,EAAoBC,IACtB,EAAG,CAACJ,EAAe,EAGnB,IAAMK,EAAoB,GAAsC,IAArC,CAAE5E,UAAAA,CAAAA,CAAWI,MAAAA,CAAAA,CAAmB,CAAAf,EACzDmF,EAAkB,CAChB,GAAGD,CAAc,CACjB,CAACvE,EAAU,CAAEI,CACf,EACF,EAGM0E,EAAqB,GAA4B,CACrD,IAAM0B,EAAkBjC,EAAeH,OAAO,CAI9C,OAFAQ,EAAkB,CAAE5E,UAAW,UAAWI,MAAO2E,CAAc,GAExDA,IAAkByB,CAC3B,EAGMjG,EAAc,IAAM,CACxBhB,EAAgB,IAAI,EAEpBiB,aADa,IAAI,EAEjBkE,EAAoB,GACtB,EAEMG,EAAO,SAAY,CAGvB,MAAMzD,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAC1BrC,QAAS,yBACTsC,KAAM,CAAEjB,MAJQmE,CAIS,EACzBjD,UAAW,IAAM,CACfxB,EAAsB,CACpBE,UAAW,UACXI,MARYmE,EASZhD,KAAM,eACR,GACAhC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBM,EAAAA,EAAcA,CAAE,aACrCK,WAAWtB,EAAauB,EAAAA,EAAaA,CACpD,EACAL,QAAS,GAAqB,CAC5BlC,EAAgB2B,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBQ,EAAAA,EAAYA,CAAEE,IACnCC,WAAWtB,EAAauB,EAAAA,EAAaA,CACpD,CACF,EACF,EAEA,MACE,GAAAkD,EAAA7C,IAAA,EAAA6C,EAAAC,QAAA,YACE,GAAAD,EAAA1C,GAAA,EAACwB,EAAKA,UAAC,YACP,GAAAkB,EAAA1C,GAAA,EAACG,IAAAA,CAAEJ,UAAU,uCAA8B,2DAG3C,GAAA2C,EAAA7C,IAAA,EAACC,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,YAC9D,GAAAY,EAAA7C,IAAA,EAACM,IAAAA,CAAEJ,UAAU,wCACX,GAAA2C,EAAA1C,GAAA,EAAC4C,IAAAA,CAAEC,KAAK,4CAA4CC,OAAO,SAASC,IAAI,sBAAa,+CAEhF,IAAI,sCAGX,GAAAL,EAAA7C,IAAA,EAACM,IAAAA,CAAEJ,UAAU,wCACX,GAAA2C,EAAA1C,GAAA,EAAC4C,IAAAA,CACCC,KAAK,oDACLC,OAAO,SACPC,IAAI,sBACL,oDAEI,IAAI,0BAKb,GAAAL,EAAA1C,GAAA,EAACW,EAAAA,CAAYA,CAAAA,CACXlE,QAAQ,GACRiB,UAAU,UACVoD,MAAM,iBACN/C,SAAUyE,EACV5B,QAASqB,EAAeH,OAAO,GAEjC,GAAAY,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkE,EAAAA,EAAAA,CAAAA,MAA4B,CAChCxG,SAAQ,GACRG,MAAOmE,EAAe4B,MAAM,CAC5B9F,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkE,EAAAA,EAAAA,CAAAA,SAA+B,CACnC7D,KAAM8D,EAAAA,EAAuBA,CAC7BzG,SAAQ,GACRG,MAAOmE,EAAe6B,SAAS,CAC/B/F,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkE,EAAAA,EAAAA,CAAAA,WAAiC,CACrCxG,SAAQ,GACRG,MAAOmE,EAAe8B,WAAW,CACjChG,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkE,EAAAA,EAAAA,CAAAA,iBAAuC,CAC3C7D,KAAM8D,EAAAA,EAAuBA,CAC7BzG,SAAQ,GACRG,MAAOmE,EAAe+B,iBAAiB,CACvCjG,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkE,EAAAA,EAAAA,CAAAA,WAAiC,CACrCxG,SAAQ,GACRG,MAAOmE,EAAegC,WAAW,CACjClG,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACF,MAAAA,CAAImD,MAAO,CAAEC,QAASjB,EAAeH,OAAO,CAAG,QAAU,MAAM,WAC9D,GAAAY,EAAA1C,GAAA,EAACC,EAAAA,EAASA,CAAAA,CACP,GAAGkE,EAAAA,EAAAA,CAAAA,aAAmC,CACvC7D,KAAMjE,EAAAA,EAAmBA,CACzBsB,SAAQ,GACRG,MAAOmE,EAAeD,aAAa,CACnCjE,SAAUuE,MAGd,GAAAI,EAAA1C,GAAA,EAACK,EAAAA,CAAMA,CAAAA,CACLC,KAAK,UACLE,QAAS+B,EACTU,MAAO,CACLC,QAASf,EAAmB,eAAiB,MAAM,CACnDiB,SAAU,WACVC,WAAY,OACZC,MAAO,IACPC,UAAW,MACb,WACD,SAGD,GAAAb,EAAA1C,GAAA,EAACI,EAAAA,CAAmBA,CAAAA,CAACvC,OAAQb,MAGnC,ECrNM,CAAEwE,MAAKA,CAAAA,CAAE,CAAGC,EAAAA,CAAUA,CAEfC,EAAe,IAAM,CAChC,IAAMrE,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAmBA,EACjD,CAAEoE,aAAAA,CAAAA,CAAc,CAAGtE,GAAoB,CAAC,EACxC,CAAEgH,WAAAA,CAAAA,CAAY,CAAG1C,GAAgB,CAAC,EAElC,CAAEG,QAAAA,CAAAA,CAAS,CAAGuC,GAAc,CAAC,EAC7B,CAACpC,EAAgBC,EAAkB,CAAGhF,CAAAA,EAAAA,EAAAA,QAAAA,EAAc,CAAC,GAQ3D,MANAiB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd+D,EAAkB,CAChBJ,QAAAA,CACF,EACF,EAAG,CAACA,EAAQ,EAGV,GAAAY,EAAA7C,IAAA,EAAA6C,EAAAC,QAAA,YACE,GAAAD,EAAA1C,GAAA,EAACwB,EAAKA,UAAC,qBACP,GAAAkB,EAAA1C,GAAA,EAACG,IAAAA,CAAEJ,UAAU,uBAAc,gIAI3B,GAAA2C,EAAA7C,IAAA,EAACM,IAAAA,WAAE,6BAC0B,IAC3B,GAAAuC,EAAA1C,GAAA,EAACmB,OAAAA,CAAK8B,MAAO,CAAEqB,MAAOD,EAAWvC,OAAO,CAAG,QAAU,KAAK,WACvDG,EAAeH,OAAO,CAAG,UAAY,UAAU,MAIpD,GAAAY,EAAA1C,GAAA,EAACuE,IAAIA,CAACC,SAAQ,GAAC3B,KAAK,8BAClB,GAAAH,EAAA1C,GAAA,EAACK,EAAAA,CAAMA,CAAAA,CACLC,KAAK,UACL2C,MAAO,CACLG,SAAU,WACVC,WAAY,OACZC,MAAO,IACPC,UAAW,MACb,WACD,kBAMT,iBCjCA,GAAM,CAAE/B,MAAKA,CAAAA,CAAE,CAAGC,EAAAA,CAAUA,CAEb,SAASC,GAAe,CACrC,GAAM,CAACO,EAAgBC,EAAkB,CAAGhF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAAI,EACnDG,EAAmBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAmBA,EACjD,CAAEoE,aAAAA,CAAAA,CAAc,CAAGtE,GAAoB,CAAC,EACxC,CAAEoH,GAAAA,CAAAA,CAAI,CAAG9C,EACT,CAAE+C,YAAAA,CAAAA,CAAa,CAAGD,EAClB,CAACE,EAAUC,EAAY,CAAG1H,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAEzCiB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd+D,EAAkB,CAChBwC,YAAAA,CACF,EACF,EAAG,CAACD,EAAG,EAEP,IAAMI,EAA0B,IAAM,CAC/BF,GAILzC,EAAkB,CAChB,GAAGD,CAAc,CACjBH,QAAS,EACX,EACF,EAEMQ,EAAoB,GAAsC,IAArC,CAAE5E,UAAAA,CAAAA,CAAWI,MAAAA,CAAAA,CAAmB,CAAAf,EACzD6H,EAAYE,CAAAA,EAAAA,EAAAA,EAAAA,EAAWhH,IAEvBoE,EAAkB,CAChB,GAAGD,CAAc,CACjB,CAACvE,EAAU,CAAEI,CACf,EACF,EAEMgE,EAAU4C,KAAAA,EACVK,EAAuB,CAACjD,GAC5B,GAAAY,EAAA7C,IAAA,EAAA6C,EAAAC,QAAA,YACE,GAAAD,EAAA1C,GAAA,EAACgF,EAAAA,CAAKA,CAAAA,CACJ1F,QAAQ,mEACRgB,KAAK,UACL2E,SAAQ,KAEV,GAAAvC,EAAA1C,GAAA,EAACkF,KAAAA,CAAAA,GACD,GAAAxC,EAAA1C,GAAA,EAACxD,EAAAA,EAAmBA,CAAAA,CAClBkB,UAAU,cACT,GAAGyH,EAAAA,EAAuC,CAC3CrH,MAAOmE,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgByC,WAAW,GAAI,GACtC/H,aAAc8H,EAAGC,WAAW,CAC5BpE,KAAM/D,EAAAA,EAAkBA,CACxBwB,SAAUuE,EACVtE,SAAU6G,EACVlH,SAAQ,QAKd,MACE,GAAA+E,EAAA7C,IAAA,EAAA6C,EAAAC,QAAA,YACE,GAAAD,EAAA1C,GAAA,EAACwB,EAAKA,UAAC,kBACP,GAAAkB,EAAA7C,IAAA,EAACM,IAAAA,CAAEJ,UAAU,wBAAc,+FACoE,IAC7F,GAAA2C,EAAA1C,GAAA,EAAC4C,IAAAA,CACCC,KAAK,0DACLC,OAAO,SACPC,IAAI,+BACL,4CAKFgC,EAED,GAAArC,EAAA7C,IAAA,EAACuF,EAAAA,CAAGA,CAAAA,WACF,GAAA1C,EAAA1C,GAAA,EAACqF,EAAAA,CAAGA,CAAAA,CACFlE,KAAM,GACNpB,UAAW,eAAyCV,MAAA,CAA1ByC,EAAU,GAAK,UAAU,EACnDmB,MAAO,CAAEqC,OAAQ,MAAOpC,QAAS,OAAQqC,cAAe,QAAS,WAEjE,GAAA7C,EAAA1C,GAAA,EHgCK0B,EGhCG8D,CAAAA,KAEV,GAAA9C,EAAA1C,GAAA,EAACqF,EAAAA,CAAGA,CAAAA,CACFlE,KAAM,GACNpB,UAAW,eAAyCV,MAAA,CAA1ByC,EAAU,GAAK,UAAU,EACnDmB,MAAO,CAAEqC,OAAQ,MAAOpC,QAAS,OAAQqC,cAAe,QAAS,WAEjE,GAAA7C,EAAA1C,GAAA,EFmHK0B,EEnHG+D,CAAAA,KAGV,GAAA/C,EAAA1C,GAAA,EAACqF,EAAAA,CAAGA,CAAAA,CACFlE,KAAM,GACNpB,UAAW,eAAyCV,MAAA,CAA1ByC,EAAU,GAAK,UAAU,EACnDmB,MAAO,CAAEqC,OAAQ,MAAOpC,QAAS,OAAQqC,cAAe,QAAS,WAEjE,GAAA7C,EAAA1C,GAAA,EJyCK0B,EIzCGgE,CAAAA,KAGV,GAAAhD,EAAA1C,GAAA,EAACqF,EAAAA,CAAGA,CAAAA,CACFlE,KAAM,GACNpB,UAAW,eAAyCV,MAAA,CAA1ByC,EAAU,GAAK,UAAU,EACnDmB,MAAO,CAAEqC,OAAQ,MAAOpC,QAAS,OAAQqC,cAAe,QAAS,WAEjE,GAAA7C,EAAA1C,GAAA,EDrEK0B,ECqEMiE,CAAAA,KAGb,GAAAjD,EAAA7C,IAAA,EAACwF,EAAAA,CAAGA,CAAAA,CACFlE,KAAM,GACNpB,UAAW,eAAyCV,MAAA,CAA1ByC,EAAU,GAAK,UAAU,EACnDmB,MAAO,CAAEqC,OAAQ,MAAOpC,QAAS,OAAQqC,cAAe,QAAS,YAEjE,GAAA7C,EAAA1C,GAAA,EAACwB,EAAKA,UAAC,WACP,GAAAkB,EAAA1C,GAAA,EAACG,IAAAA,CAAEJ,UAAU,uBAAc,2DAE3B,GAAA2C,EAAA1C,GAAA,EAACuE,IAAIA,CAACC,SAAQ,GAAC3B,KAAK,qBAClB,GAAAH,EAAA1C,GAAA,EAACK,EAAAA,CAAMA,CAAAA,CACLC,KAAK,UACL2C,MAAO,CACLG,SAAU,WACVC,WAAY,OACZC,MAAO,IACPC,UAAW,MACb,WACD,qBAQb,kOC3IO,IAAMnE,EAAe,QACfwG,EAAiB,UACjB/G,EAAoB,YACpBK,EAAiB,UACjB2G,EAAiB,UAajBC,EAA4B,CACvC,CAAC5G,EAAe,CAAE,CAChBoB,KAAMpB,EACN6G,KAAM,GAAAnG,EAAAI,GAAA,EAACgG,EAAAA,CAAiBA,CAAAA,CAAC/C,MAAO,CAAEqB,MAAO,OAAQ,IACjDhF,QAAS,UACX,EACA,CAACF,EAAa,CAAE,CACdkB,KAAMlB,EACN2G,KAAM,GAAAnG,EAAAI,GAAA,EAACiG,EAAAA,CAAuBA,CAAAA,CAAChD,MAAO,CAAEqB,MAAO,KAAM,IACrDhF,QAAS,oBACX,EACA,CAACsG,EAAe,CAAE,CAChBtF,KAAMsF,EACNG,KAAM,GAAAnG,EAAAI,GAAA,EAACiG,EAAAA,CAAuBA,CAAAA,CAAChD,MAAO,CAAEqB,MAAO,KAAM,IACrDhF,QAAS,oBACX,EACA,CAACT,EAAkB,CAAE,CACnByB,KAAMzB,EACNkH,KAAM,GAAAnG,EAAAI,GAAA,EAACkG,EAAAA,CAAeA,CAAAA,CAAAA,GACtB5G,QAAS,EACX,EACA,CAACuG,EAAe,CAAE,CAChBvF,KAAMuF,EACNE,KAAM,GAAAnG,EAAAI,GAAA,EAACmG,EAAAA,CAAeA,CAAAA,CAAClD,MAAO,CAAEqB,MAAO,MAAO,IAC9ChF,QAAS,EACX,CACF,EAGO,SAASV,EAAkB0B,CAAsB,CAAEhB,CAAgB,CAAe,QACvF,GAAcwG,CAAY,CAACxF,EAAK,CAG3BhB,EAGE,CACLgB,KAAAA,EACAyF,KAAMD,CAAY,CAACxF,EAAK,CAACyF,IAAI,CAC7BzG,QAAAA,CACF,EANSwG,CAAY,CAACxF,EAAK,CAHlB,IAAI,2IChDR,IAAM8F,EAA0C,CACrDC,WAAY,EAAE,CACdC,cAAe,GACfC,gBAAiB,CACfC,aAAc,GACdC,iBAAkB,GAClBC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,cAAe,EAAE,CACjBC,YAAa,GACbC,QAAS,GACTC,KAAM,EAAE,CACRC,MAAO,GACPC,eAAgB,GAChBC,eAAgB,GAChBC,oBAAqB,CAAC,CACxB,EACAC,WAAY,GACZC,eAAgB,GAChBC,cAAe,GACfC,mBAAoB,IAAI,CACxBC,GAAI,CACFC,UAAW,GACXC,IAAK,GACLC,OAAQ,GACR9F,QAAS,GACT+F,SAAU,GACVC,OAAQ,GACRC,OAAQ,GACRC,gBAAiB,GACjBC,eAAgB,EAClB,EACAxD,GAAI,CACF3C,QAAS,GACT4C,YAAa,EACf,EACAwD,cAAe,CACbC,aAAc,EACdC,cAAe,EACfC,qBAAsB,CAACC,EAAAA,EAAqBA,CAAC,EAE/CjE,WAAY,CACVvC,QAAS,GACTyG,UAAW,GACXC,SAAU,GACVxG,cAAe,GACfyG,eAAgB,GAChBC,eAAgB,EAAE,EAEpB9G,cAAe,CACb4B,QAAS,CAAE1B,QAAS,GAAOE,cAAe,EAAG,EAC7CH,QAAS,CAAEC,QAAS,GAAOC,QAAS,GAAIC,cAAe,EAAG,EAC1D4B,QAAS,CACP9B,QAAS,GACTE,cAAe,GACf6B,OAAQ,GACRC,UAAW,GACXC,YAAa,GACbC,kBAAmB,GACnBC,YAAa,EACf,CACF,EACA0E,gBAAiB,EAAE,CACnBC,gBAAiB,EAAE,CACnBC,WAAY,GACZC,mBAAoB,EAAE,CACtBC,mBAAoB,EAAE,CACtBC,aAAc,GACdC,wBAAyB,GACzBC,wBAAyB,GACzBC,gBAAiB,EACnB,EAEMC,EAA2B,CAC/BC,gBAAiB,GACjBC,YAAa,IAAI,CACjBC,iBAAkB,IAAI,CACtBC,OAAQ,GACRC,YAAa,EACbC,sBAAuB,EACvBC,uBAAwB,EACxBC,uBAAwB,EACxBC,cAAe,QACf/C,YAAa,GACbkC,aAAc,GACdc,OAAQ,CACNC,QAAS,GACTC,iBAAkB,IAClB1K,QAAS,GACT2K,eAAgB,CAClB,CACF,EAEa1M,EAAsB2M,EAAAA,aAAmB,CAAC,CACrD,GAAGd,CAAwB,CAC3BzH,aAAcyE,EAGd5I,sBAAuB,GAAsB,IAAI,GAG7C2M,EAAuB,GAAkB,IAAjB,CAAEC,SAAAA,CAAAA,CAAU,CAAArN,EAClC,CAACc,EAAQwM,EAAU,CAAGnN,CAAAA,EAAAA,EAAAA,QAAAA,EAASkM,GAC/B,CAACkB,EAAQC,EAAU,CAAGrN,CAAAA,EAAAA,EAAAA,QAAAA,EAASkJ,GAE/BoE,EAAY,SAAY,CAC5B,GAAI,CACF,IAAMC,EAAS,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAUC,EAAAA,EAAMA,EACrCN,EAAU,CAAE,GAAGI,CAAM,EACvB,CAAE,MAAOG,EAAO,CAEhB,CACF,EACMC,EAAY,SAAY,CAC5B,GAAI,CACF,IAAMJ,EAAS,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAUI,EAAAA,EAAaA,EAC5CP,EAAUE,EACZ,CAAE,MAAOG,EAAO,CAEhB,CACF,EAEMpN,EAAwB,GAA4C,IAA3C,CAAEE,UAAAA,CAAAA,CAAWI,MAAAA,CAAAA,CAAOmB,KAAAA,CAAAA,CAAkB,CAAAlC,EAC7DgO,EAAgB9L,EAClB,CACE,GAAGqL,CAAM,CACT,CAACrL,EAAK,CAAE,CACN,GAAGqL,CAAM,CAACrL,EAAK,CACf,CAACvB,EAAU,CAAEI,CACf,CACF,EACA,CACE,GAAGwM,CAAM,CACT,CAAC5M,EAAU,CAAEI,CACf,CAAC,CACLyM,EAAUQ,EACZ,EAEA5M,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd,IAAI6M,EAAsB,IAAI,CAQ9B,OANAR,IACAQ,EAAsBC,YAAYT,EAAWU,EAAAA,EAAcA,EAE3DL,IAGO,IAAM,CACXM,cAAcH,EAChB,CACF,EAAG,EAAE,EAGL,IAAMI,EAAgB,CACpB,GAAGvN,CAAM,CACT8D,aAAc2I,EAEd9M,sBAAAA,CACF,EACA,MACE,GAAAoC,EAAAI,GAAA,EAACzC,EAAoB8N,QAAQ,EAACvN,MAAOsN,WAAgBhB,GAEzD,CAEAD,CAAAA,EAAqBmB,SAAS,CAAG,CAC/BlB,SAAUmB,IAAAA,OAAAA,CAAAA,UAAAA,EAGZC,EAAA,GAAerB","sources":["webpack://_N_E/?4f4e","webpack://_N_E/./components/admin/TextFieldWithSubmit.tsx","webpack://_N_E/./components/admin/ToggleSwitch.tsx","webpack://_N_E/./components/admin/notification/discord.tsx","webpack://_N_E/./components/admin/notification/browser.tsx","webpack://_N_E/./components/admin/notification/twitter.tsx","webpack://_N_E/./components/admin/notification/federation.tsx","webpack://_N_E/./pages/admin/config-notify.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config-notify\",\n      function () {\n        return require(\"private-next-pages/admin/config-notify.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config-notify\"])\n      });\n    }\n  ","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField } from '../TextField';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  DISCORD_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { discord } = notifications || {};\n\n  const { enabled, webhook, goLiveMessage } = discord || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      webhook,\n      goLiveMessage,\n    });\n  }, [notifications, discord]);\n\n  const canSave = (): boolean => {\n    if (webhook === '' || goLiveMessage === '') {\n      return false;\n    }\n\n    return true;\n  };\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n\n    setEnableSaveButton(canSave());\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/discord',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'discord',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    // setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n  };\n\n  return (\n    <>\n      <Title>Discord</Title>\n      <p className=\"description reduced-margins\">\n        Let your Discord channel know each time you go live.\n      </p>\n      <p className=\"description reduced-margins\">\n        <a\n          href=\"https://support.discord.com/hc/en-us/articles/228383668\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Create a webhook\n        </a>{' '}\n        under <i>Edit Channel / Integrations</i> on your Discord channel and provide it below.\n      </p>\n\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"discordEnabled\"\n        label=\"Enable Discord\"\n        checked={formDataValues.enabled}\n        onChange={handleSwitchChange}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...DISCORD_CONFIG_FIELDS.webhookUrl}\n          required\n          value={formDataValues.webhook}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...DISCORD_CONFIG_FIELDS.goLiveMessage}\n          required\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n\n      <Button\n        type=\"primary\"\n        onClick={save}\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField, TEXTFIELD_TYPE_TEXTAREA } from '../TextField';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  BROWSER_PUSH_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { browser } = notifications || {};\n\n  const { enabled, goLiveMessage } = browser || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      goLiveMessage,\n    });\n  }, [notifications, browser]);\n\n  const canSave = (): boolean => true;\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    console.log(fieldName, value);\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n\n    setEnableSaveButton(canSave());\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    // setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/browser',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'browser',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Title>Browser Alerts</Title>\n      <p className=\"description reduced-margins\">\n        Viewers can opt into being notified when you go live with their browser.\n      </p>\n      <p className=\"description reduced-margins\">Not all browsers support this.</p>\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"enabled\"\n        label=\"Enable browser notifications\"\n        onChange={handleSwitchChange}\n        checked={formDataValues.enabled}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...BROWSER_PUSH_CONFIG_FIELDS.goLiveMessage}\n          required\n          type={TEXTFIELD_TYPE_TEXTAREA}\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <Button\n        type=\"primary\"\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n        onClick={save}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\nimport { TextField, TEXTFIELD_TYPE_PASSWORD } from '../TextField';\nimport { FormStatusIndicator } from '../FormStatusIndicator';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  TWITTER_CONFIG_FIELDS,\n} from '../../../utils/config-constants';\nimport { ToggleSwitch } from '../ToggleSwitch';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_SUCCESS,\n} from '../../../utils/input-statuses';\nimport { UpdateArgs } from '../../../types/config-section';\nimport { TEXTFIELD_TYPE_TEXT } from '../TextFieldWithSubmit';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { notifications } = serverConfig || {};\n  const { twitter } = notifications || {};\n\n  const [formDataValues, setFormDataValues] = useState<any>({});\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [enableSaveButton, setEnableSaveButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    const {\n      enabled,\n      apiKey,\n      apiSecret,\n      accessToken,\n      accessTokenSecret,\n      bearerToken,\n      goLiveMessage,\n    } = twitter || {};\n    setFormDataValues({\n      enabled,\n      apiKey,\n      apiSecret,\n      accessToken,\n      accessTokenSecret,\n      bearerToken,\n      goLiveMessage,\n    });\n  }, [twitter]);\n\n  const canSave = (): boolean => {\n    const { apiKey, apiSecret, accessToken, accessTokenSecret, bearerToken, goLiveMessage } =\n      formDataValues;\n\n    return (\n      !!apiKey &&\n      !!apiSecret &&\n      !!accessToken &&\n      !!accessTokenSecret &&\n      !!bearerToken &&\n      !!goLiveMessage\n    );\n  };\n\n  useEffect(() => {\n    setEnableSaveButton(canSave());\n  }, [formDataValues]);\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (switchEnabled: boolean) => {\n    const previouslySaved = formDataValues.enabled;\n\n    handleFieldChange({ fieldName: 'enabled', value: switchEnabled });\n\n    return switchEnabled !== previouslySaved;\n  };\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n    setEnableSaveButton(false);\n  };\n\n  const save = async () => {\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: '/notifications/twitter',\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'twitter',\n          value: postValue,\n          path: 'notifications',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Title>Twitter</Title>\n      <p className=\"description reduced-margins\">\n        Let your Twitter followers know each time you go live.\n      </p>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <p className=\"description reduced-margins\">\n          <a href=\"https://owncast.online/docs/notifications\" target=\"_blank\" rel=\"noreferrer\">\n            Read how to configure your Twitter account\n          </a>{' '}\n          to support posting from Owncast.\n        </p>\n        <p className=\"description reduced-margins\">\n          <a\n            href=\"https://developer.twitter.com/en/portal/dashboard\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            And then get your Twitter developer credentials\n          </a>{' '}\n          to fill in below.\n        </p>\n      </div>\n\n      <ToggleSwitch\n        apiPath=\"\"\n        fieldName=\"enabled\"\n        label=\"Enable Twitter\"\n        onChange={handleSwitchChange}\n        checked={formDataValues.enabled}\n      />\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.apiKey}\n          required\n          value={formDataValues.apiKey}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.apiSecret}\n          type={TEXTFIELD_TYPE_PASSWORD}\n          required\n          value={formDataValues.apiSecret}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.accessToken}\n          required\n          value={formDataValues.accessToken}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.accessTokenSecret}\n          type={TEXTFIELD_TYPE_PASSWORD}\n          required\n          value={formDataValues.accessTokenSecret}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.bearerToken}\n          required\n          value={formDataValues.bearerToken}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <div style={{ display: formDataValues.enabled ? 'block' : 'none' }}>\n        <TextField\n          {...TWITTER_CONFIG_FIELDS.goLiveMessage}\n          type={TEXTFIELD_TYPE_TEXT}\n          required\n          value={formDataValues.goLiveMessage}\n          onChange={handleFieldChange}\n        />\n      </div>\n      <Button\n        type=\"primary\"\n        onClick={save}\n        style={{\n          display: enableSaveButton ? 'inline-block' : 'none',\n          position: 'relative',\n          marginLeft: 'auto',\n          right: '0',\n          marginTop: '20px',\n        }}\n      >\n        Save\n      </Button>\n      <FormStatusIndicator status={submitStatus} />\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Button, Typography } from 'antd';\nimport React, { useState, useContext, useEffect } from 'react';\nimport Link from 'next/link';\nimport { ServerStatusContext } from '../../../utils/server-status-context';\n\nconst { Title } = Typography;\n\nexport const ConfigNotify = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n  const { federation } = serverConfig || {};\n\n  const { enabled } = federation || {};\n  const [formDataValues, setFormDataValues] = useState<any>({});\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n    });\n  }, [enabled]);\n\n  return (\n    <>\n      <Title>Fediverse Social</Title>\n      <p className=\"description\">\n        Enabling the Fediverse social features will not just alert people to when you go live, but\n        also enable other functionality.\n      </p>\n      <p>\n        Fediverse social features:{' '}\n        <span style={{ color: federation.enabled ? 'green' : 'red' }}>\n          {formDataValues.enabled ? 'Enabled' : 'Disabled'}\n        </span>\n      </p>\n\n      <Link passHref href=\"/config-federation\">\n        <Button\n          type=\"primary\"\n          style={{\n            position: 'relative',\n            marginLeft: 'auto',\n            right: '0',\n            marginTop: '20px',\n          }}\n        >\n          Configure\n        </Button>\n      </Link>\n    </>\n  );\n};\nexport default ConfigNotify;\n","import { Alert, Button, Col, Row, Typography } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport Link from 'next/link';\n\nimport Discord from '../../components/admin/notification/discord';\nimport Browser from '../../components/admin/notification/browser';\nimport Twitter from '../../components/admin/notification/twitter';\nimport Federation from '../../components/admin/notification/federation';\nimport {\n  TextFieldWithSubmit,\n  TEXTFIELD_TYPE_URL,\n} from '../../components/admin/TextFieldWithSubmit';\nimport { TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { UpdateArgs } from '../../types/config-section';\nimport { isValidUrl } from '../../utils/urls';\n\nconst { Title } = Typography;\n\nexport default function ConfigNotify() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n  const { yp } = serverConfig;\n  const { instanceUrl } = yp;\n  const [urlValid, setUrlValid] = useState(false);\n\n  useEffect(() => {\n    setFormDataValues({\n      instanceUrl,\n    });\n  }, [yp]);\n\n  const handleSubmitInstanceUrl = () => {\n    if (!urlValid) {\n      return;\n    }\n\n    setFormDataValues({\n      ...formDataValues,\n      enabled: false,\n    });\n  };\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setUrlValid(isValidUrl(value));\n\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const enabled = instanceUrl !== '';\n  const configurationWarning = !enabled && (\n    <>\n      <Alert\n        message=\"You must set your server URL before you can enable this feature.\"\n        type=\"warning\"\n        showIcon\n      />\n      <br />\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL}\n        value={formDataValues?.instanceUrl || ''}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n        required\n      />\n    </>\n  );\n\n  return (\n    <>\n      <Title>Notifications</Title>\n      <p className=\"description\">\n        Let your viewers know when you go live by supporting any of the below notification channels.{' '}\n        <a\n          href=\"https://owncast.online/docs/notifications/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more about live notifications.\n        </a>\n      </p>\n\n      {configurationWarning}\n\n      <Row>\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Browser />\n        </Col>\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Twitter />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Discord />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Federation />\n        </Col>\n\n        <Col\n          span={10}\n          className={`form-module ${enabled ? '' : 'disabled'}`}\n          style={{ margin: '5px', display: 'flex', flexDirection: 'column' }}\n        >\n          <Title>Custom</Title>\n          <p className=\"description\">Build your own notifications by using custom webhooks.</p>\n\n          <Link passHref href=\"/webhooks\">\n            <Button\n              type=\"primary\"\n              style={{\n                position: 'relative',\n                marginLeft: 'auto',\n                right: '0',\n                marginTop: '20px',\n              }}\n            >\n              Create\n            </Button>\n          </Link>\n        </Col>\n      </Row>\n    </>\n  );\n}\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","__webpack_require__","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","param","submitStatus","setSubmitStatus","useState","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","fieldName","required","tip","status","value","onChange","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","trim","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","concat","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","TextField","onBlur","p","FormStatusIndicator","Button","type","size","onClick","disabled","defaultProps","ToggleSwitch","checked","reversed","label","useSubmit","isChecked","isCheckedSend","loading","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","Title","Typography","ConfigNotify","serverConfig","notifications","discord","enabled","webhook","goLiveMessage","formDataValues","setFormDataValues","enableSaveButton","setEnableSaveButton","canSave","handleFieldChange","save","handleSwitchChange","switchEnabled","jsx_runtime","Fragment","a","href","target","rel","i","style","display","DISCORD_CONFIG_FIELDS","position","marginLeft","right","marginTop","browser","console","log","BROWSER_PUSH_CONFIG_FIELDS","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","previouslySaved","TWITTER_CONFIG_FIELDS","TEXTFIELD_TYPE_PASSWORD","federation","color","Link","passHref","yp","instanceUrl","urlValid","setUrlValid","handleSubmitInstanceUrl","isValidUrl","configurationWarning","Alert","showIcon","br","TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL","Row","Col","margin","flexDirection","Browser","Twitter","Discord","Federation","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","icon","CheckCircleFilled","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","instanceDetails","customStyles","extraPageContent","logo","name","nsfw","socialHandles","streamTitle","summary","tags","title","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","isPrivate","username","showEngagement","blockedDomains","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","result","fetchData","STATUS","error","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue","Provider","propTypes","PropTypes","__webpack_exports__"],"sourceRoot":""}