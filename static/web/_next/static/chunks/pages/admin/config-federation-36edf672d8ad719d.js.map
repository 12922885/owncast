{"version":3,"file":"static/chunks/pages/admin/config-federation-36edf672d8ad719d.js","mappings":"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","sources":["webpack://_N_E/?28df","webpack://_N_E/./components/config/EditValueArray.tsx","webpack://_N_E/./components/config/TextFieldWithSubmit.tsx","webpack://_N_E/./components/config/ToggleSwitch.tsx","webpack://_N_E/./pages/admin/config-federation.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config-federation\",\n      function () {\n        return require(\"private-next-pages/admin/config-federation.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config-federation\"])\n      });\n    }\n  ","/* eslint-disable react/no-array-index-key */\nimport React, { FC, useState } from 'react';\nimport { Typography, Tag } from 'antd';\n\nimport { TextField } from './TextField';\nimport { UpdateArgs } from '../../types/config-section';\nimport { StatusState } from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const TAG_COLOR = '#5a67d8';\n\nexport type EditStringArrayProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  maxLength?: number;\n  values: string[];\n  submitStatus?: StatusState;\n  continuousStatusMessage?: StatusState;\n  handleDeleteIndex: (index: number) => void;\n  handleCreateString: (arg: string) => void;\n};\n\nexport const EditValueArray: FC<EditStringArrayProps> = ({\n  title,\n  description,\n  placeholder,\n  maxLength,\n  values,\n  handleDeleteIndex,\n  handleCreateString,\n  submitStatus,\n  continuousStatusMessage,\n}) => {\n  const [newStringInput, setNewStringInput] = useState<string>('');\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    setNewStringInput(value);\n  };\n\n  const handleSubmitNewString = () => {\n    const newString = newStringInput.trim();\n    handleCreateString(newString);\n    setNewStringInput('');\n  };\n\n  return (\n    <div className=\"edit-string-array-container\">\n      <Title level={3} className=\"section-title\">\n        {title}\n      </Title>\n      <p className=\"description\">{description}</p>\n\n      <div className=\"edit-current-strings\">\n        {values?.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteIndex(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n      {continuousStatusMessage && (\n        <div className=\"continuous-status-section\">\n          <FormStatusIndicator status={continuousStatusMessage} />\n        </div>\n      )}\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"string-input\"\n          value={newStringInput}\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewString}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nEditValueArray.defaultProps = {\n  maxLength: 50,\n  description: null,\n  submitStatus: null,\n  continuousStatusMessage: null,\n};\n","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","/* eslint-disable react/no-unescaped-entities */\nimport { Typography, Modal, Button, Row, Col, Alert } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TEXTFIELD_TYPE_TEXT,\n  TEXTFIELD_TYPE_TEXTAREA,\n  TEXTFIELD_TYPE_URL,\n} from '../../components/config/TextField';\nimport { TextFieldWithSubmit } from '../../components/config/TextFieldWithSubmit';\nimport { ToggleSwitch } from '../../components/config/ToggleSwitch';\nimport { EditValueArray } from '../../components/config/EditValueArray';\nimport { UpdateArgs } from '../../types/config-section';\nimport {\n  FIELD_PROPS_ENABLE_FEDERATION,\n  TEXTFIELD_PROPS_FEDERATION_LIVE_MESSAGE,\n  TEXTFIELD_PROPS_FEDERATION_DEFAULT_USER,\n  FIELD_PROPS_FEDERATION_IS_PRIVATE,\n  FIELD_PROPS_SHOW_FEDERATION_ENGAGEMENT,\n  TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL,\n  FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS,\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  API_FEDERATION_BLOCKED_DOMAINS,\n  FIELD_PROPS_FEDERATION_NSFW,\n} from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { createInputStatus, STATUS_ERROR, STATUS_SUCCESS } from '../../utils/input-statuses';\n\nconst FederationInfoModal = ({ cancelPressed, okPressed }) => (\n  <Modal\n    width=\"70%\"\n    title=\"Enable Social Features\"\n    visible\n    onCancel={cancelPressed}\n    footer={\n      <div>\n        <Button onClick={cancelPressed}>Do not enable</Button>\n        <Button type=\"primary\" onClick={okPressed}>\n          Enable Social Features\n        </Button>\n      </div>\n    }\n  >\n    <Typography.Title level={3}>How do Owncast's social features work?</Typography.Title>\n    <Typography.Paragraph>\n      Owncast's social features are accomplished by having your server join The{' '}\n      <a href=\"https://en.wikipedia.org/wiki/Fediverse\" rel=\"noopener noreferrer\" target=\"_blank\">\n        Fediverse\n      </a>\n      , a decentralized, open, collection of independent servers, like yours.\n    </Typography.Paragraph>\n    Please{' '}\n    <a href=\"https://owncast.online/docs/social\" rel=\"noopener noreferrer\" target=\"_blank\">\n      read more\n    </a>{' '}\n    about these features, the details behind them, and how they work.\n    <Typography.Paragraph />\n    <Typography.Title level={3}>What do you need to know?</Typography.Title>\n    <ul>\n      <li>\n        These features are brand new. Given the variability of interfacing with the rest of the\n        world, bugs are possible. Please report anything that you think isn't working quite right.\n      </li>\n      <li>You must always host your Owncast server with SSL using a https url.</li>\n      <li>\n        You should not change your server name URL or social username once people begin following\n        you, as your server will be seen as a completely different user on the Fediverse, and the\n        old user will disappear.\n      </li>\n      <li>\n        Turning on <i>Private mode</i> will allow you to manually approve each follower and limit\n        the visibility of your posts to followers only.\n      </li>\n    </ul>\n    <Typography.Title level={3}>Learn more about The Fediverse</Typography.Title>\n    <Typography.Paragraph>\n      If these concepts are new you should discover more about what this functionality has to offer.\n      Visit{' '}\n      <a href=\"https://owncast.online/docs/social\" rel=\"noopener noreferrer\" target=\"_blank\">\n        our documentation\n      </a>{' '}\n      to be pointed at some resources that will help get you started on The Fediverse.\n    </Typography.Paragraph>\n  </Modal>\n);\n\nFederationInfoModal.propTypes = {\n  cancelPressed: PropTypes.func.isRequired,\n  okPressed: PropTypes.func.isRequired,\n};\n\nconst ConfigFederation = () => {\n  const { Title } = Typography;\n  const [formDataValues, setFormDataValues] = useState(null);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const [blockedDomainSaveState, setBlockedDomainSaveState] = useState(null);\n\n  const { federation, yp, instanceDetails } = serverConfig;\n  const { enabled, isPrivate, username, goLiveMessage, showEngagement, blockedDomains } =\n    federation;\n  const { instanceUrl } = yp;\n  const { nsfw } = instanceDetails;\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const handleEnabledSwitchChange = (value: boolean) => {\n    if (!value) {\n      setFormDataValues({\n        ...formDataValues,\n        enabled: false,\n      });\n    } else {\n      setIsInfoModalOpen(true);\n    }\n  };\n\n  // if instanceUrl is empty, we should also turn OFF the `enabled` field of directory.\n  const handleSubmitInstanceUrl = () => {\n    const hasInstanceUrl = formDataValues.instanceUrl !== '';\n    const isInstanceUrlSecure = formDataValues.instanceUrl.startsWith('https://');\n\n    if (!hasInstanceUrl || !isInstanceUrlSecure) {\n      postConfigUpdateToAPI({\n        apiPath: FIELD_PROPS_ENABLE_FEDERATION.apiPath,\n        data: { value: false },\n      });\n      setFormDataValues({\n        ...formDataValues,\n        enabled: false,\n      });\n    }\n  };\n\n  function federationInfoModalCancelPressed() {\n    setIsInfoModalOpen(false);\n    setFormDataValues({\n      ...formDataValues,\n      enabled: false,\n    });\n  }\n\n  function federationInfoModalOkPressed() {\n    setIsInfoModalOpen(false);\n    setFormDataValues({\n      ...formDataValues,\n      enabled: true,\n    });\n  }\n\n  function resetBlockedDomainsSaveState() {\n    setBlockedDomainSaveState(null);\n  }\n\n  function saveBlockedDomains() {\n    try {\n      postConfigUpdateToAPI({\n        apiPath: API_FEDERATION_BLOCKED_DOMAINS,\n        data: { value: formDataValues.blockedDomains },\n        onSuccess: () => {\n          setFieldInConfigState({\n            fieldName: 'forbiddenUsernames',\n            value: formDataValues.forbiddenUsernames,\n          });\n          setBlockedDomainSaveState(STATUS_SUCCESS);\n          setTimeout(resetBlockedDomainsSaveState, RESET_TIMEOUT);\n        },\n        onError: (message: string) => {\n          setBlockedDomainSaveState(createInputStatus(STATUS_ERROR, message));\n          setTimeout(resetBlockedDomainsSaveState, RESET_TIMEOUT);\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      setBlockedDomainSaveState(STATUS_ERROR);\n    }\n  }\n\n  function handleDeleteBlockedDomain(index: number) {\n    formDataValues.blockedDomains.splice(index, 1);\n    saveBlockedDomains();\n  }\n\n  function handleCreateBlockedDomain(domain: string) {\n    let newDomain;\n    try {\n      const u = new URL(domain);\n      newDomain = u.host;\n    } catch (_) {\n      newDomain = domain;\n    }\n\n    formDataValues.blockedDomains.push(newDomain);\n    handleFieldChange({\n      fieldName: 'blockedDomains',\n      value: formDataValues.blockedDomains,\n    });\n    saveBlockedDomains();\n  }\n\n  useEffect(() => {\n    setFormDataValues({\n      enabled,\n      isPrivate,\n      username,\n      goLiveMessage,\n      showEngagement,\n      blockedDomains,\n      nsfw,\n      instanceUrl: yp.instanceUrl,\n    });\n  }, [serverConfig, yp]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  const hasInstanceUrl = instanceUrl !== '';\n  const isInstanceUrlSecure = instanceUrl.startsWith('https://');\n  const configurationWarning = !isInstanceUrlSecure && (\n    <>\n      <Alert\n        message=\"You must set your server URL before you can enable this feature.\"\n        type=\"warning\"\n        showIcon\n      />\n      <br />\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL}\n        value={formDataValues.instanceUrl}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n        required\n      />\n    </>\n  );\n\n  const invalidPortWarning = (\n    <Alert\n      message=\"Only Owncast instances available on the default SSL port 443 support this feature.\"\n      type=\"warning\"\n      showIcon\n    />\n  );\n\n  const hasInvalidPort =\n    instanceUrl && new URL(instanceUrl).port !== '' && new URL(instanceUrl).port !== '443';\n\n  return (\n    <div>\n      <Title>Configure Social Features</Title>\n      <p>\n        Owncast provides the ability for people to follow and engage with your instance. It's a\n        great way to promote alerting, sharing and engagement of your stream.\n      </p>\n      <p>\n        Once enabled you'll alert your followers when you go live as well as gain the ability to\n        compose custom posts to share any information you like.\n      </p>\n      <p>\n        <a href=\"https://owncast.online/docs/social\" rel=\"noopener noreferrer\" target=\"_blank\">\n          Read more about the specifics of these social features.\n        </a>\n      </p>\n      <Row>\n        <Col span={15} className=\"form-module\" style={{ marginRight: '15px' }}>\n          {configurationWarning}\n          {hasInvalidPort && invalidPortWarning}\n          <ToggleSwitch\n            fieldName=\"enabled\"\n            onChange={handleEnabledSwitchChange}\n            {...FIELD_PROPS_ENABLE_FEDERATION}\n            checked={formDataValues.enabled}\n            disabled={hasInvalidPort || !hasInstanceUrl || !isInstanceUrlSecure}\n          />\n          <ToggleSwitch\n            fieldName=\"isPrivate\"\n            {...FIELD_PROPS_FEDERATION_IS_PRIVATE}\n            checked={formDataValues.isPrivate}\n            disabled={!enabled}\n          />\n          <ToggleSwitch\n            fieldName=\"nsfw\"\n            useSubmit\n            {...FIELD_PROPS_FEDERATION_NSFW}\n            checked={formDataValues.nsfw}\n            disabled={hasInvalidPort || !hasInstanceUrl}\n          />\n          <TextFieldWithSubmit\n            required\n            fieldName=\"username\"\n            type={TEXTFIELD_TYPE_TEXT}\n            {...TEXTFIELD_PROPS_FEDERATION_DEFAULT_USER}\n            value={formDataValues.username}\n            initialValue={username}\n            onChange={handleFieldChange}\n            disabled={!enabled}\n          />\n          <TextFieldWithSubmit\n            fieldName=\"goLiveMessage\"\n            {...TEXTFIELD_PROPS_FEDERATION_LIVE_MESSAGE}\n            type={TEXTFIELD_TYPE_TEXTAREA}\n            value={formDataValues.goLiveMessage}\n            initialValue={goLiveMessage}\n            onChange={handleFieldChange}\n            disabled={!enabled}\n          />\n          <ToggleSwitch\n            fieldName=\"showEngagement\"\n            {...FIELD_PROPS_SHOW_FEDERATION_ENGAGEMENT}\n            checked={formDataValues.showEngagement}\n            disabled={!enabled}\n          />\n        </Col>\n        <Col span={8} className=\"form-module\">\n          <EditValueArray\n            title={FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS.label}\n            placeholder={FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS.placeholder}\n            description={FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS.tip}\n            values={formDataValues.blockedDomains}\n            handleDeleteIndex={handleDeleteBlockedDomain}\n            handleCreateString={handleCreateBlockedDomain}\n            submitStatus={createInputStatus(blockedDomainSaveState)}\n          />\n        </Col>\n      </Row>\n      {isInfoModalOpen && (\n        <FederationInfoModal\n          cancelPressed={federationInfoModalCancelPressed}\n          okPressed={federationInfoModalOkPressed}\n        />\n      )}\n    </div>\n  );\n};\nexport default ConfigFederation;\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["window","__NEXT_P","push","__webpack_require__","Title","Typography","TAG_COLOR","EditValueArray","title","description","placeholder","maxLength","values","handleDeleteIndex","handleCreateString","submitStatus","continuousStatusMessage","param","newStringInput","setNewStringInput","useState","handleInputChange","value","handleSubmitNewString","newString","trim","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","level","p","map","tag","index","handleClose","Tag","closable","onClose","color","concat","FormStatusIndicator","status","TextField","fieldName","onChange","onPressEnter","defaultProps","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","setSubmitStatus","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","required","tip","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","onBlur","Button","type","size","onClick","disabled","ToggleSwitch","checked","reversed","label","useSubmit","isChecked","isCheckedSend","loading","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","FederationInfoModal","cancelPressed","okPressed","Modal","width","visible","onCancel","footer","a","href","rel","target","ul","li","i","propTypes","PropTypes","ConfigFederation","formDataValues","setFormDataValues","isInfoModalOpen","setIsInfoModalOpen","serverConfig","blockedDomainSaveState","setBlockedDomainSaveState","federation","yp","instanceDetails","enabled","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","instanceUrl","nsfw","handleFieldChange","handleEnabledSwitchChange","handleSubmitInstanceUrl","hasInstanceUrl","isInstanceUrlSecure","startsWith","FIELD_PROPS_ENABLE_FEDERATION","resetBlockedDomainsSaveState","saveBlockedDomains","API_FEDERATION_BLOCKED_DOMAINS","forbiddenUsernames","e","console","error","configurationWarning","Fragment","Alert","showIcon","br","TEXTFIELD_PROPS_FEDERATION_INSTANCE_URL","invalidPortWarning","hasInvalidPort","URL","port","Row","Col","style","marginRight","FIELD_PROPS_FEDERATION_IS_PRIVATE","FIELD_PROPS_FEDERATION_NSFW","TEXTFIELD_PROPS_FEDERATION_DEFAULT_USER","TEXTFIELD_PROPS_FEDERATION_LIVE_MESSAGE","FIELD_PROPS_SHOW_FEDERATION_ENGAGEMENT","FIELD_PROPS_FEDERATION_BLOCKED_DOMAINS","splice","domain","newDomain","u","host","_","__webpack_exports__","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","icon","CheckCircleFilled","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","customStyles","extraPageContent","logo","name","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","result","fetchData","STATUS","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue","Provider"],"sourceRoot":""}