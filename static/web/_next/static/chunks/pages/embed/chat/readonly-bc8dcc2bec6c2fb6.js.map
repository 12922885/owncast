{"version":3,"file":"static/chunks/pages/embed/chat/readonly-bc8dcc2bec6c2fb6.js","mappings":"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","sources":["webpack://_N_E/./node_modules/lodash/debounce.js","webpack://_N_E/./node_modules/lodash/now.js","webpack://_N_E/?c995","webpack://_N_E/./pages/embed/chat/readonly/index.tsx","webpack://_N_E/<anon>"],"sourcesContent":["var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/embed/chat/readonly\",\n      function () {\n        return require(\"private-next-pages/embed/chat/readonly/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/embed/chat/readonly\"])\n      });\n    }\n  ","import { useRecoilValue } from 'recoil';\nimport { ChatMessage } from '../../../../interfaces/chat-message.model';\nimport { ChatContainer } from '../../../../components/chat/ChatContainer/ChatContainer';\nimport {\n  ClientConfigStore,\n  currentUserAtom,\n  visibleChatMessagesSelector,\n} from '../../../../components/stores/ClientConfigStore';\n\nexport default function ReadOnlyChatEmbed() {\n  const currentUser = useRecoilValue(currentUserAtom);\n  const messages = useRecoilValue<ChatMessage[]>(visibleChatMessagesSelector);\n  if (!currentUser) {\n    return null;\n  }\n  const { id, displayName } = currentUser;\n  return (\n    <div>\n      <ClientConfigStore />\n      <ChatContainer\n        messages={messages}\n        usernameToHighlight={displayName}\n        chatUserId={id}\n        isModerator={false}\n        showInput={false}\n        height=\"100vh\"\n      />\n    </div>\n  );\n}\n"],"names":["isObject","__webpack_require__","now","toNumber","nativeMax","Math","max","nativeMin","min","module","exports","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","args","thisArg","undefined","apply","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","timerExpired","timeWaiting","trailingEdge","setTimeout","debounced","isInvoking","arguments","clearTimeout","cancel","flush","root","Date","window","__NEXT_P","push","ReadOnlyChatEmbed","currentUser","useRecoilValue","currentUserAtom","messages","visibleChatMessagesSelector","id","displayName","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","jsx","ClientConfigStore","ChatContainer","usernameToHighlight","chatUserId","isModerator","showInput","height"],"sourceRoot":""}