{"version":3,"file":"static/chunks/pages/embed/video-85c0e96df52fe8de.js","mappings":"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","sources":["webpack://_N_E/?117d","webpack://_N_E/./components/ui/OfflineBanner/OfflineBanner.tsx","webpack://_N_E/./components/ui/Statusbar/Statusbar.tsx","webpack://_N_E/./pages/embed/video/index.tsx","webpack://_N_E/./components/ui/OfflineBanner/OfflineBanner.module.scss","webpack://_N_E/./components/ui/Statusbar/Statusbar.module.scss","webpack://_N_E/./node_modules/next/router.js","webpack://_N_E/./node_modules/@babel/runtime/helpers/extends.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/embed/video\",\n      function () {\n        return require(\"private-next-pages/embed/video/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/embed/video\"])\n      });\n    }\n  ","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport { Divider } from 'antd';\nimport { ClockCircleOutlined } from '@ant-design/icons';\nimport { FC } from 'react';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport styles from './OfflineBanner.module.scss';\n\nexport type OfflineBannerProps = {\n  streamName: string;\n  customText?: string;\n  lastLive?: Date;\n  notificationsEnabled: boolean;\n  fediverseAccount?: string;\n  onNotifyClick?: () => void;\n  onFollowClick?: () => void;\n};\n\nexport const OfflineBanner: FC<OfflineBannerProps> = ({\n  streamName,\n  customText,\n  lastLive,\n  notificationsEnabled,\n  fediverseAccount,\n  onNotifyClick,\n  onFollowClick,\n}) => {\n  let text;\n  if (customText) {\n    text = customText;\n  } else if (!customText && notificationsEnabled && fediverseAccount) {\n    text = (\n      <span>\n        This stream is offline. You can{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onNotifyClick}>\n          be notified\n        </span>{' '}\n        the next time {streamName} goes live or{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onFollowClick}>\n          follow\n        </span>{' '}\n        {fediverseAccount} on the Fediverse.\n      </span>\n    );\n  } else if (!customText && notificationsEnabled) {\n    text = (\n      <span>\n        This stream is offline.{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onNotifyClick}>\n          Be notified\n        </span>{' '}\n        the next time {streamName} goes live.\n      </span>\n    );\n  } else if (!customText && fediverseAccount) {\n    text = (\n      <span>\n        This stream is offline.{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onFollowClick}>\n          Follow\n        </span>{' '}\n        {fediverseAccount} on the Fediverse to see the next time {streamName} goes live.\n      </span>\n    );\n  } else {\n    text = `This stream is offline. Check back soon!`;\n  }\n\n  return (\n    <div id=\"offline-banner\" className={styles.outerContainer}>\n      <div className={styles.innerContainer}>\n        <div className={styles.header}>{streamName}</div>\n        <Divider className={styles.separator} />\n        <div className={styles.bodyText}>{text}</div>\n        {lastLive && (\n          <div className={styles.lastLiveDate}>\n            <ClockCircleOutlined className={styles.clockIcon} />\n            {`Last live ${formatDistanceToNow(new Date(lastLive))} ago.`}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport intervalToDuration from 'date-fns/intervalToDuration';\nimport { FC, useEffect, useState } from 'react';\nimport { EyeFilled } from '@ant-design/icons';\nimport styles from './Statusbar.module.scss';\n\nexport type StatusbarProps = {\n  online: Boolean;\n  lastConnectTime?: Date;\n  lastDisconnectTime?: Date;\n  viewerCount: number;\n};\n\nfunction makeDurationString(lastConnectTime: Date): string {\n  const diff = intervalToDuration({ start: lastConnectTime, end: new Date() });\n  if (diff.days > 1) {\n    return `${diff.days} days ${diff.hours} hours`;\n  }\n  if (diff.hours >= 1) {\n    return `${diff.hours} hours ${diff.minutes} minutes`;\n  }\n\n  return `${diff.minutes} minutes ${diff.seconds} seconds`;\n}\n\nexport const Statusbar: FC<StatusbarProps> = ({\n  online,\n  lastConnectTime,\n  lastDisconnectTime,\n  viewerCount,\n}) => {\n  const [, setNow] = useState(new Date());\n\n  // Set a timer to update the status bar.\n  useEffect(() => {\n    const interval = setInterval(() => setNow(new Date()), 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  let onlineMessage = '';\n  let rightSideMessage: any;\n  if (online && lastConnectTime) {\n    const duration = makeDurationString(new Date(lastConnectTime));\n    onlineMessage = online ? `Live for  ${duration}` : 'Offline';\n    rightSideMessage = viewerCount > 0 && (\n      <div className={styles.right}>\n        <span>\n          <EyeFilled />\n        </span>\n        <span>{` ${viewerCount}`}</span>\n      </div>\n    );\n  } else if (!online) {\n    onlineMessage = 'Offline';\n    if (lastDisconnectTime) {\n      rightSideMessage = `Last live ${formatDistanceToNow(new Date(lastDisconnectTime))} ago.`;\n    }\n  }\n\n  return (\n    <div className={styles.statusbar}>\n      <div>{onlineMessage}</div>\n      <div>{rightSideMessage}</div>\n    </div>\n  );\n};\nexport default Statusbar;\n\nStatusbar.defaultProps = {\n  lastConnectTime: null,\n  lastDisconnectTime: null,\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { useRouter } from 'next/router';\nimport {\n  clientConfigStateAtom,\n  ClientConfigStore,\n  isOnlineSelector,\n  serverStatusState,\n} from '../../../components/stores/ClientConfigStore';\nimport { OfflineBanner } from '../../../components/ui/OfflineBanner/OfflineBanner';\nimport { Statusbar } from '../../../components/ui/Statusbar/Statusbar';\nimport { OwncastPlayer } from '../../../components/video/OwncastPlayer/OwncastPlayer';\nimport { ClientConfig } from '../../../interfaces/client-config.model';\nimport { ServerStatus } from '../../../interfaces/server-status.model';\n\nexport default function VideoEmbed() {\n  const status = useRecoilValue<ServerStatus>(serverStatusState);\n  const clientConfig = useRecoilValue<ClientConfig>(clientConfigStateAtom);\n\n  const { name } = clientConfig;\n\n  const { offlineMessage } = clientConfig;\n  const { viewerCount, lastConnectTime, lastDisconnectTime } = status;\n  const online = useRecoilValue<boolean>(isOnlineSelector);\n\n  const router = useRouter();\n\n  /**\n   * router.query isn't initialized until hydration\n   * (see https://github.com/vercel/next.js/discussions/11484)\n   * but router.asPath is initialized earlier, so we parse the\n   * query parameters ourselves\n   */\n  const path = router.asPath.split('?')[1] ?? '';\n  const query = path.split('&').reduce((currQuery, part) => {\n    const [key, value] = part.split('=');\n    return { ...currQuery, [key]: value };\n  }, {} as Record<string, string>);\n\n  const initiallyMuted = query.initiallyMuted === 'true';\n\n  return (\n    <>\n      <ClientConfigStore />\n      <div className=\"video-embed\">\n        {online && (\n          <OwncastPlayer\n            source=\"/hls/stream.m3u8\"\n            online={online}\n            initiallyMuted={initiallyMuted}\n          />\n        )}\n        {!online && (\n          <OfflineBanner\n            streamName={name}\n            customText={offlineMessage}\n            notificationsEnabled={false}\n          />\n        )}\n        {online && (\n          <Statusbar\n            online={online}\n            lastConnectTime={lastConnectTime}\n            lastDisconnectTime={lastDisconnectTime}\n            viewerCount={viewerCount}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"OfflineBanner_outerContainer__3AbsB\",\"innerContainer\":\"OfflineBanner_innerContainer__zTm13\",\"bodyText\":\"OfflineBanner_bodyText__nNNy0\",\"separator\":\"OfflineBanner_separator___j_Ss\",\"lastLiveDate\":\"OfflineBanner_lastLiveDate___UZdO\",\"clockIcon\":\"OfflineBanner_clockIcon__s0DB_\",\"header\":\"OfflineBanner_header__Vu20o\",\"footer\":\"OfflineBanner_footer__o3Zl5\",\"actionLink\":\"OfflineBanner_actionLink__b4Mwa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusbar\":\"Statusbar_statusbar__AtVnB\"};","module.exports = require('./dist/client/router')\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["window","__NEXT_P","push","OfflineBanner","text","streamName","customText","lastLive","notificationsEnabled","fediverseAccount","onNotifyClick","onFollowClick","span","role","tabIndex","className","styles","onClick","div","id","Divider","ClockCircleOutlined","formatDistanceToNow","Date","Statusbar","online","lastConnectTime","lastDisconnectTime","viewerCount","setNow","useState","useEffect","interval","setInterval","clearInterval","rightSideMessage","onlineMessage","duration","diff","intervalToDuration","start","end","days","hours","minutes","seconds","makeDurationString","EyeFilled","defaultProps","VideoEmbed","status","useRecoilValue","serverStatusState","clientConfig","clientConfigStateAtom","name","offlineMessage","isOnlineSelector","router","initiallyMuted","useRouter","asPath","split","reduce","currQuery","part","key","value","ClientConfigStore","OwncastPlayer","source","module","exports","_extends","Object","assign","bind","target","i","arguments","length","prototype","hasOwnProperty","call","__esModule","apply","this"],"sourceRoot":""}