{"version":3,"file":"static/chunks/pages/embed/video-c9623464411d2e86.js","mappings":"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","sources":["webpack://_N_E/?117d","webpack://_N_E/./components/ui/OfflineBanner/OfflineBanner.tsx","webpack://_N_E/./components/ui/Statusbar/Statusbar.tsx","webpack://_N_E/./pages/embed/video/index.tsx","webpack://_N_E/./components/ui/OfflineBanner/OfflineBanner.module.scss","webpack://_N_E/./components/ui/Statusbar/Statusbar.module.scss","webpack://_N_E/./node_modules/next/router.js","webpack://_N_E/./node_modules/@babel/runtime/helpers/extends.js","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/embed/video\",\n      function () {\n        return require(\"private-next-pages/embed/video/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/embed/video\"])\n      });\n    }\n  ","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport { Divider } from 'antd';\nimport { ClockCircleOutlined } from '@ant-design/icons';\nimport { FC } from 'react';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport styles from './OfflineBanner.module.scss';\n\nexport type OfflineBannerProps = {\n  streamName: string;\n  customText?: string;\n  lastLive?: Date;\n  notificationsEnabled: boolean;\n  fediverseAccount?: string;\n  onNotifyClick?: () => void;\n  onFollowClick?: () => void;\n};\n\nexport const OfflineBanner: FC<OfflineBannerProps> = ({\n  streamName,\n  customText,\n  lastLive,\n  notificationsEnabled,\n  fediverseAccount,\n  onNotifyClick,\n  onFollowClick,\n}) => {\n  let text;\n  if (customText) {\n    text = customText;\n  } else if (!customText && notificationsEnabled && fediverseAccount) {\n    text = (\n      <span>\n        This stream is offline. You can{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onNotifyClick}>\n          be notified\n        </span>{' '}\n        the next time {streamName} goes live or{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onFollowClick}>\n          follow\n        </span>{' '}\n        {fediverseAccount} on the Fediverse.\n      </span>\n    );\n  } else if (!customText && notificationsEnabled) {\n    text = (\n      <span>\n        This stream is offline.{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onNotifyClick}>\n          Be notified\n        </span>{' '}\n        the next time {streamName} goes live.\n      </span>\n    );\n  } else if (!customText && fediverseAccount) {\n    text = (\n      <span>\n        This stream is offline.{' '}\n        <span role=\"link\" tabIndex={0} className={styles.actionLink} onClick={onFollowClick}>\n          Follow\n        </span>{' '}\n        {fediverseAccount} on the Fediverse to see the next time {streamName} goes live.\n      </span>\n    );\n  } else {\n    text = `This stream is offline. Check back soon!`;\n  }\n\n  return (\n    <div id=\"offline-banner\" className={styles.outerContainer}>\n      <div className={styles.innerContainer}>\n        <div className={styles.header}>{streamName}</div>\n        <Divider className={styles.separator} />\n        <div className={styles.bodyText}>{text}</div>\n        {lastLive && (\n          <div className={styles.lastLiveDate}>\n            <ClockCircleOutlined className={styles.clockIcon} />\n            {`Last live ${formatDistanceToNow(new Date(lastLive))} ago.`}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport intervalToDuration from 'date-fns/intervalToDuration';\nimport { FC, useEffect, useState } from 'react';\nimport { EyeFilled } from '@ant-design/icons';\nimport styles from './Statusbar.module.scss';\n\nexport type StatusbarProps = {\n  online: Boolean;\n  lastConnectTime?: Date;\n  lastDisconnectTime?: Date;\n  viewerCount: number;\n};\n\nfunction makeDurationString(lastConnectTime: Date): string {\n  const diff = intervalToDuration({ start: lastConnectTime, end: new Date() });\n  if (diff.days > 1) {\n    return `${diff.days} days ${diff.hours} hours`;\n  }\n  if (diff.hours >= 1) {\n    return `${diff.hours} hours ${diff.minutes} minutes`;\n  }\n\n  return `${diff.minutes} minutes ${diff.seconds} seconds`;\n}\n\nexport const Statusbar: FC<StatusbarProps> = ({\n  online,\n  lastConnectTime,\n  lastDisconnectTime,\n  viewerCount,\n}) => {\n  const [, setNow] = useState(new Date());\n\n  // Set a timer to update the status bar.\n  useEffect(() => {\n    const interval = setInterval(() => setNow(new Date()), 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  let onlineMessage = '';\n  let rightSideMessage: any;\n  if (online && lastConnectTime) {\n    const duration = makeDurationString(new Date(lastConnectTime));\n    onlineMessage = online ? `Live for  ${duration}` : 'Offline';\n    rightSideMessage = viewerCount > 0 && (\n      <div className={styles.right}>\n        <span>\n          <EyeFilled />\n        </span>\n        <span>{` ${viewerCount}`}</span>\n      </div>\n    );\n  } else if (!online) {\n    onlineMessage = 'Offline';\n    if (lastDisconnectTime) {\n      rightSideMessage = `Last live ${formatDistanceToNow(new Date(lastDisconnectTime))} ago.`;\n    }\n  }\n\n  return (\n    <div className={styles.statusbar}>\n      <div>{onlineMessage}</div>\n      <div>{rightSideMessage}</div>\n    </div>\n  );\n};\nexport default Statusbar;\n\nStatusbar.defaultProps = {\n  lastConnectTime: null,\n  lastDisconnectTime: null,\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { useRouter } from 'next/router';\nimport {\n  clientConfigStateAtom,\n  ClientConfigStore,\n  isOnlineSelector,\n  serverStatusState,\n} from '../../../components/stores/ClientConfigStore';\nimport { OfflineBanner } from '../../../components/ui/OfflineBanner/OfflineBanner';\nimport { Statusbar } from '../../../components/ui/Statusbar/Statusbar';\nimport { OwncastPlayer } from '../../../components/video/OwncastPlayer/OwncastPlayer';\nimport { ClientConfig } from '../../../interfaces/client-config.model';\nimport { ServerStatus } from '../../../interfaces/server-status.model';\n\nexport default function VideoEmbed() {\n  const status = useRecoilValue<ServerStatus>(serverStatusState);\n  const clientConfig = useRecoilValue<ClientConfig>(clientConfigStateAtom);\n\n  const { name } = clientConfig;\n\n  const { offlineMessage } = clientConfig;\n  const { viewerCount, lastConnectTime, lastDisconnectTime } = status;\n  const online = useRecoilValue<boolean>(isOnlineSelector);\n\n  const router = useRouter();\n\n  /**\n   * router.query isn't initialized until hydration\n   * (see https://github.com/vercel/next.js/discussions/11484)\n   * but router.asPath is initialized earlier, so we parse the\n   * query parameters ourselves\n   */\n  const path = router.asPath.split('?')[1] ?? '';\n  const query = path.split('&').reduce((currQuery, part) => {\n    const [key, value] = part.split('=');\n    return { ...currQuery, [key]: value };\n  }, {} as Record<string, string>);\n\n  const initiallyMuted = query.initiallyMuted === 'true';\n\n  return (\n    <>\n      <ClientConfigStore />\n      <div className=\"video-embed\">\n        {online && (\n          <OwncastPlayer\n            source=\"/hls/stream.m3u8\"\n            online={online}\n            initiallyMuted={initiallyMuted}\n          />\n        )}\n        {!online && (\n          <OfflineBanner\n            streamName={name}\n            customText={offlineMessage}\n            notificationsEnabled={false}\n          />\n        )}\n        {online && (\n          <Statusbar\n            online={online}\n            lastConnectTime={lastConnectTime}\n            lastDisconnectTime={lastDisconnectTime}\n            viewerCount={viewerCount}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"OfflineBanner_outerContainer__3AbsB\",\"innerContainer\":\"OfflineBanner_innerContainer__zTm13\",\"bodyText\":\"OfflineBanner_bodyText__nNNy0\",\"separator\":\"OfflineBanner_separator___j_Ss\",\"lastLiveDate\":\"OfflineBanner_lastLiveDate___UZdO\",\"clockIcon\":\"OfflineBanner_clockIcon__s0DB_\",\"header\":\"OfflineBanner_header__Vu20o\",\"footer\":\"OfflineBanner_footer__o3Zl5\",\"actionLink\":\"OfflineBanner_actionLink__b4Mwa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusbar\":\"Statusbar_statusbar__AtVnB\"};","module.exports = require('./dist/client/router')\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["window","__NEXT_P","push","__webpack_require__","OfflineBanner","text","streamName","customText","lastLive","notificationsEnabled","fediverseAccount","onNotifyClick","onFollowClick","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","span","jsx","role","tabIndex","className","styles","onClick","div","id","Divider","ClockCircleOutlined","concat","formatDistanceToNow","Date","Statusbar","rightSideMessage","online","lastConnectTime","lastDisconnectTime","viewerCount","setNow","useState","useEffect","interval","setInterval","clearInterval","onlineMessage","duration","makeDurationString","diff","intervalToDuration","start","end","days","hours","minutes","seconds","EyeFilled","defaultProps","VideoEmbed","router","status","useRecoilValue","serverStatusState","clientConfig","clientConfigStateAtom","name","offlineMessage","isOnlineSelector","useRouter","path","asPath","split","query","reduce","currQuery","part","key","value","initiallyMuted","Fragment","ClientConfigStore","OwncastPlayer","source","module","exports","_extends","Object","assign","bind","target","i","arguments","length","prototype","hasOwnProperty","call","__esModule","apply"],"sourceRoot":""}