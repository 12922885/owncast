{"version":3,"file":"static/chunks/1424.438542aebf6af653.js","mappings":"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","sources":["webpack://_N_E/./services/notifications-service.ts","webpack://_N_E/./components/modals/BrowserNotifyModal/BrowserNotifyModal.tsx","webpack://_N_E/./components/modals/BrowserNotifyModal/BrowserNotifyModal.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["export async function saveNotificationRegistration(channel, destination, accessToken) {\n  const URL_REGISTER_NOTIFICATION = `/api/notifications/register`;\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ channel, destination }),\n  };\n\n  try {\n    await fetch(`${URL_REGISTER_NOTIFICATION}?accessToken=${accessToken}`, options);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function isPushNotificationSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nfunction urlBase64ToUint8Array(base64String: string) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nexport async function registerWebPushNotifications(vapidPublicKey) {\n  const registration = await navigator.serviceWorker.ready;\n  let subscription = await registration.pushManager.getSubscription();\n\n  if (!subscription) {\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidPublicKey),\n    });\n  }\n\n  return JSON.stringify(subscription);\n}\n","import { Row, Spin, Typography, Button } from 'antd';\nimport React, { FC, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { accessTokenAtom, clientConfigStateAtom } from '../../stores/ClientConfigStore';\nimport {\n  registerWebPushNotifications,\n  saveNotificationRegistration,\n} from '../../../services/notifications-service';\nimport styles from './BrowserNotifyModal.module.scss';\nimport isPushNotificationSupported from '../../../utils/browserPushNotifications';\n\nconst { Title } = Typography;\n\nconst NotificationsNotSupported = () => (\n  <div>Browser notifications are not supported in your browser.</div>\n);\n\nexport type PermissionPopupPreviewProps = {\n  start: () => void;\n};\n\nconst PermissionPopupPreview: FC<PermissionPopupPreviewProps> = ({ start }) => (\n  <div id=\"browser-push-preview-box\" className={styles.pushPreview}>\n    <div className={styles.inner}>\n      <div className={styles.title}>{window.location.toString()} wants to</div>\n      <div className={styles.permissionLine}>\n        <svg\n          className={styles.bell}\n          width=\"16\"\n          height=\"16\"\n          viewBox=\"0 0 16 16\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M14 12.3333V13H2V12.3333L3.33333 11V7C3.33333 4.93333 4.68667 3.11333 6.66667 2.52667C6.66667 2.46 6.66667 2.4 6.66667 2.33333C6.66667 1.97971 6.80714 1.64057 7.05719 1.39052C7.30724 1.14048 7.64638 1 8 1C8.35362 1 8.69276 1.14048 8.94281 1.39052C9.19286 1.64057 9.33333 1.97971 9.33333 2.33333C9.33333 2.4 9.33333 2.46 9.33333 2.52667C11.3133 3.11333 12.6667 4.93333 12.6667 7V11L14 12.3333ZM9.33333 13.6667C9.33333 14.0203 9.19286 14.3594 8.94281 14.6095C8.69276 14.8595 8.35362 15 8 15C7.64638 15 7.30724 14.8595 7.05719 14.6095C6.80714 14.3594 6.66667 14.0203 6.66667 13.6667\"\n            fill=\"#676670\"\n          />\n        </svg>\n        <span className={styles.showNotificationsText}>Show notifications</span>\n      </div>\n      <div className={styles.buttonRow}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            start();\n          }}\n        >\n          Allow\n        </Button>\n        <button type=\"button\" className={styles.disabled}>\n          Block\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nconst NotificationsEnabled = () => (\n  <div>\n    <Title>Notifications are enabled</Title>\n    To disable push notifications from {window.location.hostname.toString()} access your browser\n    permissions for this site and turn off notifications.\n    <a href=\"https://owncast.online/docs/notifications\"> Learn more.</a>\n  </div>\n);\n\nexport const BrowserNotifyModal = () => {\n  const [error, setError] = useState<string>(null);\n  const accessToken = useRecoilValue(accessTokenAtom);\n  const config = useRecoilValue(clientConfigStateAtom);\n  const [browserPushPermissionsPending, setBrowserPushPermissionsPending] =\n    useState<boolean>(false);\n  const notificationsPermitted =\n    isPushNotificationSupported() && Notification.permission !== 'default';\n\n  const { notifications } = config;\n  const { browser } = notifications;\n  const { publicKey } = browser;\n\n  const browserPushSupported = browser.enabled && isPushNotificationSupported();\n\n  // If notification permissions are granted, show user info how to disable them\n  if (notificationsPermitted) {\n    return <NotificationsEnabled />;\n  }\n\n  const startBrowserPushRegistration = async () => {\n    // If notification permissions are already denied or granted, don't do anything.\n    if (isPushNotificationSupported() && Notification.permission !== 'default') {\n      return;\n    }\n\n    setBrowserPushPermissionsPending(true);\n    try {\n      const subscription = await registerWebPushNotifications(publicKey);\n      saveNotificationRegistration('BROWSER_PUSH_NOTIFICATION', subscription, accessToken);\n      setError(null);\n    } catch (e) {\n      setError(\n        `Error registering for live notifications: ${e.message}. Make sure you're not inside a private browser environment or have previously disabled notifications for this stream.`,\n      );\n    }\n    setBrowserPushPermissionsPending(false);\n  };\n\n  if (!browserPushSupported) {\n    return <NotificationsNotSupported />;\n  }\n\n  return (\n    <Spin spinning={browserPushPermissionsPending}>\n      <Row className={styles.description}>\n        Get notified right in the browser each time this stream goes live.\n        <a href=\"https://owncast.online/docs/notifications/#browser-notifications\">Learn more</a>\n        &nbsp; about Owncast browser notifications.\n      </Row>\n      <Row>{error}</Row>\n      <PermissionPopupPreview start={() => startBrowserPushRegistration()} />\n    </Spin>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"BrowserNotifyModal_description__tMKKq\",\"pushPreview\":\"BrowserNotifyModal_pushPreview__4Og4q\",\"inner\":\"BrowserNotifyModal_inner__uhFDw\",\"title\":\"BrowserNotifyModal_title__dd_Lh\",\"permissionLine\":\"BrowserNotifyModal_permissionLine__K8nyJ\",\"bell\":\"BrowserNotifyModal_bell__9mIeI\",\"buttonRow\":\"BrowserNotifyModal_buttonRow__oxJUg\",\"disabled\":\"BrowserNotifyModal_disabled__v88lb\"};"],"names":["saveNotificationRegistration","channel","destination","accessToken","options","method","headers","body","JSON","stringify","fetch","concat","e","console","error","registerWebPushNotifications","vapidPublicKey","registration","navigator","serviceWorker","ready","subscription","pushManager","getSubscription","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","Title","Typography","NotificationsNotSupported","jsx_runtime","jsx","div","PermissionPopupPreview","start","param","id","className","styles","jsxs","location","toString","svg","width","height","viewBox","fill","xmlns","path","d","span","Button","type","onClick","button","NotificationsEnabled","hostname","a","href","BrowserNotifyModal","setError","useState","useRecoilValue","accessTokenAtom","config","clientConfigStateAtom","browserPushPermissionsPending","setBrowserPushPermissionsPending","notificationsPermitted","isPushNotificationSupported","Notification","permission","notifications","browser","publicKey","browserPushSupported","enabled","startBrowserPushRegistration","message","Spin","spinning","Row","module","exports"],"sourceRoot":""}