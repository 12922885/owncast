{"version":3,"file":"static/chunks/2524-c207238b5cd5f865.js","mappings":"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","sources":["webpack://_N_E/./components/admin/EditValueArray.tsx","webpack://_N_E/./components/admin/TextFieldWithSubmit.tsx","webpack://_N_E/./components/admin/ToggleSwitch.tsx","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React, { FC, useState } from 'react';\nimport { Typography, Tag } from 'antd';\n\nimport { TextField } from './TextField';\nimport { UpdateArgs } from '../../types/config-section';\nimport { StatusState } from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const TAG_COLOR = '#5a67d8';\n\nexport type EditStringArrayProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  maxLength?: number;\n  values: string[];\n  submitStatus?: StatusState;\n  continuousStatusMessage?: StatusState;\n  handleDeleteIndex: (index: number) => void;\n  handleCreateString: (arg: string) => void;\n};\n\nexport const EditValueArray: FC<EditStringArrayProps> = ({\n  title,\n  description,\n  placeholder,\n  maxLength,\n  values,\n  handleDeleteIndex,\n  handleCreateString,\n  submitStatus,\n  continuousStatusMessage,\n}) => {\n  const [newStringInput, setNewStringInput] = useState<string>('');\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    setNewStringInput(value);\n  };\n\n  const handleSubmitNewString = () => {\n    const newString = newStringInput.trim();\n    handleCreateString(newString);\n    setNewStringInput('');\n  };\n\n  return (\n    <div className=\"edit-string-array-container\">\n      <Title level={3} className=\"section-title\">\n        {title}\n      </Title>\n      <p className=\"description\">{description}</p>\n\n      <div className=\"edit-current-strings\">\n        {values?.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteIndex(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n      {continuousStatusMessage && (\n        <div className=\"continuous-status-section\">\n          <FormStatusIndicator status={continuousStatusMessage} />\n        </div>\n      )}\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"string-input\"\n          value={newStringInput}\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewString}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nEditValueArray.defaultProps = {\n  maxLength: 50,\n  description: null,\n  submitStatus: null,\n  continuousStatusMessage: null,\n};\n","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["Title","Typography","TAG_COLOR","EditValueArray","title","description","placeholder","maxLength","values","handleDeleteIndex","handleCreateString","submitStatus","continuousStatusMessage","newStringInput","setNewStringInput","useState","div","className","level","p","map","tag","index","Tag","closable","onClose","color","FormStatusIndicator","status","TextField","fieldName","value","onChange","onPressEnter","newString","trim","defaultProps","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","setSubmitStatus","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","required","tip","onSubmit","resetStates","clearTimeout","useEffect","textfieldContainerClass","classNames","submittable","onBlur","changedValue","changedFieldName","newValue","replace","Button","type","size","onClick","async","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","message","STATUS_ERROR","setTimeout","RESET_TIMEOUT","disabled","ToggleSwitch","checked","reversed","label","useSubmit","loading","span","Switch","isChecked","isCheckedSend","defaultChecked","checkedChildren","unCheckedChildren","STATUS_INVALID","STATUS_WARNING","INPUT_STATES","icon","CheckCircleFilled","style","ExclamationCircleFilled","LoadingOutlined","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","instanceDetails","customStyles","extraPageContent","logo","name","nsfw","socialHandles","streamTitle","summary","tags","welcomeMessage","offlineMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","enabled","endpoint","region","secret","servingEndpoint","forcePathStyle","yp","instanceUrl","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","twitter","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","hideViewerCount","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","serverConfig","args","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","result","fetchData","STATUS","error","getStatusIntervalId","setInterval","FETCH_INTERVAL","SERVER_CONFIG","getConfig","clearInterval","providerValue","updatedConfig","Provider","propTypes","PropTypes"],"sourceRoot":""}