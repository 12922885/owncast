{"version":3,"file":"static/chunks/ee8b1517-376967baca4964f9.js","mappings":"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","sources":["webpack://_N_E/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.1.2\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing'\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height1 = chartArea.h * weight;\n            const width1 = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n            }\n            stack.start = x;\n            stack.placed += height1;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    active = false;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n    let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID1 = Object.keys(position)[0];\n            const value1 = position[positionAxisID1];\n            titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = this.ticks.length;\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; ++i){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel = label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret1 = this._getYAxisLabelAlignment(tl);\n            textAlign = ret1.textAlign;\n            x = ret1.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i1 = 0; i1 < local.length; i1++){\n        const plugin = local[i1];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, scaleOptions) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n    id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n    if (id) {\n        return id;\n    }\n    throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.1.2\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getDatasetArea(meta) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: xScale.left,\n            right: xScale.right,\n            top: yScale.top,\n            bottom: yScale.bottom\n        };\n    }\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1){\n            this._updateDataset(i1, isFunction(mode) ? mode({\n                datasetIndex: i1\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta) || this.chartArea;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = this.options.spacing / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { options: { elements  } , data: { datasets  }  } = chart.config;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox1 of hitboxes){\n                if (hitbox1.col !== col) {\n                    col = hitbox1.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox1.top = top;\n                hitbox1.left += this.left + padding;\n                hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n                top += hitbox1.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColors = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.fillStyle = labelColors.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.setLineDash(labelColors.borderDash || []);\n            ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n            const borderRadius = toTRBLCorners(labelColors.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        ticks.push({\n            value: Math.round((niceMin + j * spacing) * factor) / factor\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const extra = getTickBackdropHeight(opts) / 2;\n    const outerDistance = scale.drawingArea;\n    const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n        const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n        const size = labelSizes[i];\n        const y = yForAngle(pointLabelPosition.y, size.h, angle);\n        const textAlign = getTextAlignForAngle(angle);\n        const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n        items.push({\n            x: pointLabelPosition.x,\n            y,\n            textAlign,\n            left,\n            top: y,\n            right: left + size.w,\n            bottom: y + size.h\n        });\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign , left , top , right , bottom  } = scale._pointLabelItems[i];\n        const { backdropColor  } = optsAtIndex;\n        if (!isNullOrUndef(backdropColor)) {\n            const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n            const padding = toPadding(optsAtIndex.backdropPadding);\n            ctx.fillStyle = backdropColor;\n            const backdropLeft = left - padding.left;\n            const backdropTop = top - padding.top;\n            const backdropWidth = right - left + padding.width;\n            const backdropHeight = bottom - top + padding.height;\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: backdropLeft,\n                    y: backdropTop,\n                    w: backdropWidth,\n                    h: backdropHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n            }\n        }\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort((a, b)=>a - b).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["Animator","constructor","this","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","r","window","_update","Date","now","remaining","running","items","length","item","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","e","easing","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","d","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","$shared","assign","$animations","resolveTargetOptions","animations","_createAnimations","anim","all","awaitAll","then","props","charAt","value","animation","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","s","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","id","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","fill","isPluginEnabled","console","warn","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","v","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","adata","Array","convertObjectDataToArray","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","t","b","top","right","bottom","left","disabled","toClip","clip","defaultClip","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","parent","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","computeMinSampleSize","_cache","$bar","visibleMetas","concat","_","sort","a","getAllScaleValues","curr","_length","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","parseValue","entry","startValue","endValue","barStart","barEnd","_custom","parseFloatBar","parseArrayOrPrimitive","isFloatBar","custom","setBorderSkipped","edge","borderSkipped","horizontal","base","borderProps","enableBorderRadius","parseEdge","orig","v1","v2","startEnd","setInflateAmount","inflateAmount","ratio","DoughnutController","animateRotate","animateScale","numbers","cutout","rotation","circumference","radius","spacing","_scriptable","name","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","getDataVisibility","onClick","legendItem","toggleDataVisibility","super","innerRadius","outerRadius","offsetX","offsetY","getter","_getRotation","_getCircumference","_getRotationExtents","T","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","width","height","chartWeight","_getRingWeight","ratioX","ratioY","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","calcMin","maxX","maxY","H","minX","P","minY","getRatioAndOffset","maxWidth","maxHeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","isNaN","locale","borderAlign","hoverBorderWidth","offset","hoverOffset","ringWeightOffset","weight","PolarAreaController","angleLines","display","beginAtZero","grid","circular","pointLabels","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","controllers","__proto__","BarController","categoryPercentage","barPercentage","grouped","_index_","_value_","iAxisKey","vAxisKey","obj","bars","getBasePixel","isHorizontal","ruler","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","_getStacks","last","skipNull","val","indexOf","_getStackCount","_getStackIndex","pixels","barThickness","_startPixel","_endPixel","stackCount","baseValue","minBarLength","actualBase","floating","barSign","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","next","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","rects","BubbleController","points","point","iPixel","vPixel","skip","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_datasetIndex","_decimated","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","members","prototype","init","formats","format","diff","startOf","endOf","adapters","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getDistanceMetricForAxis","minDistance","getCenterPoint","distance","getNearestItems","getProps","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","setLayoutDims","layouts","params","wrap","stackWeight","includes","_stack","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","getMargins","marginForPositions","positions","margin","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","height1","width1","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","passive","removeListener","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","proxy","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","tickLength","_tickSize","maxScale","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","result","getMajorIndices","numMajorIndices","first","newTicks","ceil","skipMajors","evenMajorSpacing","len","getEvenSpacing","factors","calculateSpacing","avgMajorSpacing","round","majorStart","majorEnd","offsetFromEdge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","lineHeight","titleAlign","align","reverseAlign","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","title","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","gcLen","garbageCollect","valueAt","idx","pixel","decimal","getDecimalForPixel","getBaseValue","createTickContext","optionTicks","rot","autoSkipPadding","_computeGridLineItems","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","positionAxisID1","value1","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","ret1","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","backdrop","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","call","register","proto","getPrototypeOf","parentScope","isIChartComponent","itemDefaults","defaults","defaultRoutes","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","routeDefaults","descriptors","registerDefaults","overrides","unregister","Registry","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","local","i1","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","determineAxis","scaleOptions","toLowerCase","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","isScriptable","isIndexable","hasFunction","needContext","subResolver","descriptorDefaults","resolverCache","p","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","ilen1","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","lastEvent","determineLastEvent","onHover","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","pixelMargin","innerR","spacingOffset","alpha","avNogSpacingRadius","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","pCenter1","PI","innerMidAdjustedAngle","pCenter2","p8","pCenter3","outerStartX","outerStartY","outerEndX","outerEndY","closePath","fullCircles","borderJoinStyle","inner","lineJoin","angleMargin","clipArc","setStyle","lineCap","borderCapStyle","previous","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","getLineMethod","fastPathSegment","prevX","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","usePath2D","Path2D","path","_path","strokePathWithCache","segments","segmentMethod","strokePathDirect","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","interpolate","_interpolate","_getInterpolationMethod","interpolated","inRange$1","hitRadius","getBarBounds","bar","half","skipOrLimit","boundingRects","bounds","maxW","maxH","parseBorderWidth","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","parseBorderRadius","outer","skipX","skipY","addNormalRectPath","rect","inflateRect","amount","refRect","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","translate","radiusOffset","drawArc","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","BarElement","addRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","getColorizer","colorizeDoughnutDataset","colorizePolarAreaDataset","colorizeDefaultDataset","containsColorsDefinitions","k","plugin_colors","forceOverride","_args","colorizer","cleanDecimatedDataset","defineProperty","cleanDecimatedData","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","pointCount","getStartAndCountOfVisiblePointsSimplified","threshold","decimated","configurable","enumerable","samples","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","lttbDecimation","minIndex","maxIndex","startIndex","xMin","dx","lastIndex","intermediateIndex1","intermediateIndex2","minMaxDecimation","_getBounds","_findSegmentEnd","_getEdge","_createBoundaryLine","boundary","linePoints","_pointsFromSegments","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","fillOption","parseFillOption","parseFloat","firstCh","decodeTargetIndex","addPointsBelow","sourcePoint","linesBelow","postponed","findPoint","unshift","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","sourcePoints","below","getLinesBelow","_buildStackLine","_getTargetValue","computeCircularBoundary","_getTargetPixel","computeLinearBoundary","computeBoundary","_drawfill","lineOpts","above","clipVertical","doFill","clipY","lineLoop","tpoints","targetSegments","tgt","subBounds","fillSources","fillSource","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","hitbox1","_draw","defaultColor","halfFontSize","cursor","textDirection","textWidth","setWidth","lineDash","drawOptions","SQRT2","xPlus","yBoxTop","xBoxLeft","drawLegendBox","strikethrough","fillText","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","sameItem","plugin_legend","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","lines","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","Colors","Decimation","Filler","SubTitle","findOrAddLabel","addedLabels","addIfString","lastIndexOf","_getLabelForValue","relativeLabelSize","minSpacing","rad","LinearScaleBase","_startValue","_endValue","_valueRange","isFinite","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","decimalPlaces","generateTicks$1","LinearScale","log10Floor","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","generateTicks","minExp","exp","startExp","significand","lastTick","LogarithmicScale","_zero","getTickBackdropHeight","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","updateLimits","setCenterPoint","_pointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","buildPointLabelItems","hLimits","vLimits","pathRadiusLine","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","createPointLabelContext","distanceFromCenter","getBasePosition","getPointLabelPosition","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","gridLineOpts","drawRadiusLine","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","addTick","time","timestamps","ticksFromTimestamps","majorUnit","setMajorTicks","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","CategoryScale","_addedLabels","added","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sourceRoot":""}