{"version":3,"file":"static/chunks/8645-c37f30a6f611f9e7.js","mappings":"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","sources":["webpack://_N_E/./components/config/EditValueArray.tsx","webpack://_N_E/./components/config/TextFieldWithSubmit.tsx","webpack://_N_E/./components/config/ToggleSwitch.tsx","webpack://_N_E/./components/config/EditLogo.tsx","webpack://_N_E/./pages/admin/config/general/EditInstanceDetails.tsx","webpack://_N_E/./pages/admin/config/general/EditInstanceTags.tsx","webpack://_N_E/./pages/admin/config/general/EditPageContent.tsx","webpack://_N_E/./components/config/SocialDropdown.tsx","webpack://_N_E/./pages/admin/config/general/EditSocialLinks.tsx","webpack://_N_E/./pages/admin/config/general/GeneralConfig.tsx","webpack://_N_E/./utils/images.ts","webpack://_N_E/./utils/input-statuses.tsx","webpack://_N_E/./utils/server-status-context.tsx","webpack://_N_E/<anon>"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React, { FC, useState } from 'react';\nimport { Typography, Tag } from 'antd';\n\nimport { TextField } from './TextField';\nimport { UpdateArgs } from '../../types/config-section';\nimport { StatusState } from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport const TAG_COLOR = '#5a67d8';\n\nexport type EditStringArrayProps = {\n  title: string;\n  description?: string;\n  placeholder: string;\n  maxLength?: number;\n  values: string[];\n  submitStatus?: StatusState;\n  continuousStatusMessage?: StatusState;\n  handleDeleteIndex: (index: number) => void;\n  handleCreateString: (arg: string) => void;\n};\n\nexport const EditValueArray: FC<EditStringArrayProps> = ({\n  title,\n  description,\n  placeholder,\n  maxLength,\n  values,\n  handleDeleteIndex,\n  handleCreateString,\n  submitStatus,\n  continuousStatusMessage,\n}) => {\n  const [newStringInput, setNewStringInput] = useState<string>('');\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    setNewStringInput(value);\n  };\n\n  const handleSubmitNewString = () => {\n    const newString = newStringInput.trim();\n    handleCreateString(newString);\n    setNewStringInput('');\n  };\n\n  return (\n    <div className=\"edit-string-array-container\">\n      <Title level={3} className=\"section-title\">\n        {title}\n      </Title>\n      <p className=\"description\">{description}</p>\n\n      <div className=\"edit-current-strings\">\n        {values?.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteIndex(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n      {continuousStatusMessage && (\n        <div className=\"continuous-status-section\">\n          <FormStatusIndicator status={continuousStatusMessage} />\n        </div>\n      )}\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"string-input\"\n          value={newStringInput}\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewString}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nEditValueArray.defaultProps = {\n  maxLength: 50,\n  description: null,\n  submitStatus: null,\n  continuousStatusMessage: null,\n};\n","import { Button } from 'antd';\nimport classNames from 'classnames';\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport { UpdateArgs } from '../../types/config-section';\nimport { postConfigUpdateToAPI, RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { TextField, TextFieldProps } from './TextField';\n\nexport const TEXTFIELD_TYPE_TEXT = 'default';\nexport const TEXTFIELD_TYPE_PASSWORD = 'password'; // Input.Password\nexport const TEXTFIELD_TYPE_NUMBER = 'numeric';\nexport const TEXTFIELD_TYPE_TEXTAREA = 'textarea';\nexport const TEXTFIELD_TYPE_URL = 'url';\n\nexport type TextFieldWithSubmitProps = TextFieldProps & {\n  apiPath: string;\n  configPath?: string;\n  initialValue?: string;\n};\n\nexport const TextFieldWithSubmit: FC<TextFieldWithSubmitProps> = ({\n  apiPath,\n  configPath = '',\n  initialValue,\n  useTrim,\n  useTrimLead,\n  ...textFieldProps // rest of props\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  let resetTimer = null;\n\n  const { fieldName, required, tip, status, value, onChange, onSubmit } = textFieldProps;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  useEffect(() => {\n    // TODO: Add native validity checks here, somehow\n    // https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n    // const hasValidity = (type !== TEXTFIELD_TYPE_NUMBER && e.target.validity.valid) || type === TEXTFIELD_TYPE_NUMBER ;\n    if ((required && (value === '' || value === null)) || value === initialValue) {\n      setHasChanged(false);\n    } else {\n      // show submit button\n      resetStates();\n      setHasChanged(true);\n    }\n  }, [value]);\n\n  // if field is required but value is empty, or equals initial value, then don't show submit/update button. otherwise clear out any result messaging and display button.\n  const handleChange = ({ fieldName: changedFieldName, value: changedValue }: UpdateArgs) => {\n    if (onChange) {\n      let newValue: string = changedValue;\n      if (useTrim) {\n        newValue = changedValue.trim();\n      } else if (useTrimLead) {\n        newValue = changedValue.replace(/^\\s+/g, '');\n      }\n      onChange({\n        fieldName: changedFieldName,\n        value: newValue,\n      });\n    }\n  };\n\n  // if you blur a required field with an empty value, restore its original value in state (parent's state), if an onChange from parent is available.\n  const handleBlur = ({ value: changedValue }: UpdateArgs) => {\n    if (onChange && required && changedValue === '') {\n      onChange({ fieldName, value: initialValue });\n    }\n  };\n\n  // how to get current value of input\n  const handleSubmit = async () => {\n    if ((required && value !== '') || value !== initialValue) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n\n      // if an extra onSubmit handler was sent in as a prop, let's run that too.\n      if (onSubmit) {\n        onSubmit();\n      }\n    }\n  };\n\n  const textfieldContainerClass = classNames({\n    'textfield-with-submit-container': true,\n    submittable: hasChanged,\n  });\n  return (\n    <div className={textfieldContainerClass}>\n      <div className=\"textfield-component\">\n        <TextField\n          {...textFieldProps}\n          onSubmit={null}\n          onBlur={handleBlur}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"formfield-container lower-container\">\n        <p className=\"label-spacer\" />\n        <div className=\"lower-content\">\n          <div className=\"field-tip\">{tip}</div>\n          <FormStatusIndicator status={status || submitStatus} />\n          <div className=\"update-button-container\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"submit-button\"\n              onClick={handleSubmit}\n              disabled={!hasChanged}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTextFieldWithSubmit.defaultProps = {\n  configPath: '',\n  initialValue: '',\n};\n","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import { Button, Upload } from 'antd';\nimport { RcFile } from 'antd/lib/upload/interface';\nimport { LoadingOutlined, UploadOutlined } from '@ant-design/icons';\nimport React, { useState, useContext, FC } from 'react';\nimport { FormStatusIndicator } from './FormStatusIndicator';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  TEXTFIELD_PROPS_LOGO,\n} from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { NEXT_PUBLIC_API_HOST } from '../../utils/apis';\n\nimport {\n  ACCEPTED_IMAGE_TYPES,\n  getBase64,\n  MAX_IMAGE_FILESIZE,\n  readableBytes,\n} from '../../utils/images';\n\nexport const EditLogo: FC = () => {\n  const [logoUrl, setlogoUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [logoCachedbuster, setLogoCacheBuster] = useState(0);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState, serverConfig } = serverStatusData || {};\n  const currentLogo = serverConfig?.instanceDetails?.logo;\n\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n  let resetTimer = null;\n\n  const { apiPath, tip } = TEXTFIELD_PROPS_LOGO;\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  // validate file type and create base64 encoded img\n  const beforeUpload = (file: RcFile) => {\n    setLoading(true);\n\n    // eslint-disable-next-line consistent-return\n    return new Promise<void>((res, rej) => {\n      if (file.size > MAX_IMAGE_FILESIZE) {\n        const msg = `File size is too big: ${readableBytes(file.size)}`;\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setLoading(false);\n        // eslint-disable-next-line no-promise-executor-return\n        return rej();\n      }\n      if (!ACCEPTED_IMAGE_TYPES.includes(file.type)) {\n        const msg = `File type is not supported: ${file.type}`;\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setLoading(false);\n        // eslint-disable-next-line no-promise-executor-return\n        return rej();\n      }\n\n      getBase64(file, (url: string) => {\n        setlogoUrl(url);\n        setTimeout(() => res(), 100);\n      });\n    });\n  };\n\n  // Post new logo to api\n  const handleLogoUpdate = async () => {\n    if (logoUrl !== currentLogo) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: logoUrl },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName: 'logo', value: logoUrl, path: '' });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n          setLoading(false);\n          setLogoCacheBuster(Math.floor(Math.random() * 100)); // Force logo to re-load\n        },\n        onError: (msg: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${msg}`));\n          setLoading(false);\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  const logoDisplayUrl = `${NEXT_PUBLIC_API_HOST}logo?random=${logoCachedbuster}`;\n\n  return (\n    <div className=\"formfield-container logo-upload-container\">\n      <div className=\"label-side\">\n        <span className=\"formfield-label\">Logo</span>\n      </div>\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <img src={logoDisplayUrl} alt=\"avatar\" className=\"logo-preview\" />\n          <Upload\n            name=\"logo\"\n            listType=\"picture\"\n            className=\"avatar-uploader\"\n            showUploadList={false}\n            accept={ACCEPTED_IMAGE_TYPES.join(',')}\n            beforeUpload={beforeUpload}\n            customRequest={handleLogoUpdate}\n            disabled={loading}\n          >\n            {loading ? (\n              <LoadingOutlined style={{ color: 'white' }} />\n            ) : (\n              <Button icon={<UploadOutlined />} />\n            )}\n          </Upload>\n        </div>\n        <FormStatusIndicator status={submitStatus} />\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Typography } from 'antd';\nimport {\n  TextFieldWithSubmit,\n  TEXTFIELD_TYPE_TEXTAREA,\n  TEXTFIELD_TYPE_URL,\n} from '../../../../components/config/TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  TEXTFIELD_PROPS_INSTANCE_URL,\n  TEXTFIELD_PROPS_SERVER_NAME,\n  TEXTFIELD_PROPS_SERVER_SUMMARY,\n  TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE,\n  API_YP_SWITCH,\n  FIELD_PROPS_YP,\n  FIELD_PROPS_NSFW,\n  FIELD_PROPS_HIDE_VIEWER_COUNT,\n} from '../../../../utils/config-constants';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport { ToggleSwitch } from '../../../../components/config/ToggleSwitch';\nimport { EditLogo } from '../../../../components/config/EditLogo';\n\nconst { Title } = Typography;\n\nexport default function EditInstanceDetails() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig } = serverStatusData || {};\n\n  const { instanceDetails, yp } = serverConfig;\n  const { instanceUrl } = yp;\n\n  useEffect(() => {\n    setFormDataValues({\n      ...instanceDetails,\n      ...yp,\n    });\n  }, [instanceDetails, yp]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  // if instanceUrl is empty, we should also turn OFF the `enabled` field of directory.\n  const handleSubmitInstanceUrl = () => {\n    if (formDataValues.instanceUrl === '') {\n      if (yp.enabled === true) {\n        postConfigUpdateToAPI({\n          apiPath: API_YP_SWITCH,\n          data: { value: false },\n        });\n      }\n    }\n  };\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  function handleHideViewerCountChange(enabled: boolean) {\n    handleFieldChange({ fieldName: 'hideViewerCount', value: enabled });\n  }\n\n  const hasInstanceUrl = instanceUrl !== '';\n\n  return (\n    <div className=\"edit-general-settings\">\n      <Title level={3} className=\"section-title\">\n        Configure Instance Details\n      </Title>\n      <br />\n\n      <TextFieldWithSubmit\n        fieldName=\"name\"\n        {...TEXTFIELD_PROPS_SERVER_NAME}\n        value={formDataValues.name}\n        initialValue={instanceDetails.name}\n        onChange={handleFieldChange}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"instanceUrl\"\n        {...TEXTFIELD_PROPS_INSTANCE_URL}\n        value={formDataValues.instanceUrl}\n        initialValue={yp.instanceUrl}\n        type={TEXTFIELD_TYPE_URL}\n        onChange={handleFieldChange}\n        onSubmit={handleSubmitInstanceUrl}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"summary\"\n        {...TEXTFIELD_PROPS_SERVER_SUMMARY}\n        type={TEXTFIELD_TYPE_TEXTAREA}\n        value={formDataValues.summary}\n        initialValue={instanceDetails.summary}\n        onChange={handleFieldChange}\n      />\n\n      <TextFieldWithSubmit\n        fieldName=\"offlineMessage\"\n        {...TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE}\n        type={TEXTFIELD_TYPE_TEXTAREA}\n        value={formDataValues.offlineMessage}\n        initialValue={instanceDetails.offlineMessage}\n        onChange={handleFieldChange}\n      />\n\n      {/* Logo section */}\n      <EditLogo />\n\n      <ToggleSwitch\n        fieldName=\"hideViewerCount\"\n        useSubmit\n        {...FIELD_PROPS_HIDE_VIEWER_COUNT}\n        checked={formDataValues.hideViewerCount}\n        onChange={handleHideViewerCountChange}\n      />\n\n      <br />\n      <p className=\"description\">\n        Increase your audience by appearing in the{' '}\n        <a href=\"https://directory.owncast.online\" target=\"_blank\" rel=\"noreferrer\">\n          <strong>Owncast Directory</strong>\n        </a>\n        . This is an external service run by the Owncast project.{' '}\n        <a\n          href=\"https://owncast.online/docs/directory/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more\n        </a>\n        .\n      </p>\n      {!yp.instanceUrl && (\n        <p className=\"description\">\n          You must set your <strong>Server URL</strong> above to enable the directory.\n        </p>\n      )}\n\n      <div className=\"config-yp-container\">\n        <ToggleSwitch\n          fieldName=\"enabled\"\n          useSubmit\n          {...FIELD_PROPS_YP}\n          checked={formDataValues.enabled}\n          disabled={!hasInstanceUrl}\n        />\n        <ToggleSwitch\n          fieldName=\"nsfw\"\n          useSubmit\n          {...FIELD_PROPS_NSFW}\n          checked={formDataValues.nsfw}\n          disabled={!hasInstanceUrl}\n        />\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable react/no-array-index-key */\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Typography, Tag } from 'antd';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  FIELD_PROPS_TAGS,\n  RESET_TIMEOUT,\n  postConfigUpdateToAPI,\n} from '../../../../utils/config-constants';\nimport { TextField } from '../../../../components/config/TextField';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n  STATUS_WARNING,\n} from '../../../../utils/input-statuses';\nimport { TAG_COLOR } from '../../../../components/config/EditValueArray';\n\nconst { Title } = Typography;\n\nexport default function EditInstanceTags() {\n  const [newTagInput, setNewTagInput] = useState<string>('');\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { tags = [] } = instanceDetails;\n\n  const { apiPath, maxLength, placeholder, configPath } = FIELD_PROPS_TAGS;\n\n  let resetTimer = null;\n\n  useEffect(\n    () => () => {\n      clearTimeout(resetTimer);\n    },\n    [],\n  );\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  // posts all the tags at once as an array obj\n  const postUpdateToAPI = async (postValue: any) => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n\n    await postConfigUpdateToAPI({\n      apiPath,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({ fieldName: 'tags', value: postValue, path: configPath });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Tags updated.'));\n        setNewTagInput('');\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  const handleInputChange = ({ value }: UpdateArgs) => {\n    if (!submitStatus) {\n      setSubmitStatus(null);\n    }\n    setNewTagInput(value);\n  };\n\n  // send to api and do stuff\n  const handleSubmitNewTag = () => {\n    resetStates();\n    const newTag = newTagInput.trim();\n    if (newTag === '') {\n      setSubmitStatus(createInputStatus(STATUS_WARNING, 'Please enter a tag'));\n      return;\n    }\n    if (tags.some(tag => tag.toLowerCase() === newTag.toLowerCase())) {\n      setSubmitStatus(createInputStatus(STATUS_WARNING, 'This tag is already used!'));\n      return;\n    }\n\n    const updatedTags = [...tags, newTag];\n    postUpdateToAPI(updatedTags);\n  };\n\n  const handleDeleteTag = index => {\n    resetStates();\n    const updatedTags = [...tags];\n    updatedTags.splice(index, 1);\n    postUpdateToAPI(updatedTags);\n  };\n\n  return (\n    <div className=\"tag-editor-container\">\n      <Title level={3} className=\"section-title\">\n        Add Tags\n      </Title>\n      <p className=\"description\">\n        This is a great way to categorize your Owncast server on the Directory!\n      </p>\n\n      <div className=\"edit-current-strings\">\n        {tags.map((tag, index) => {\n          const handleClose = () => {\n            handleDeleteTag(index);\n          };\n          return (\n            <Tag closable onClose={handleClose} color={TAG_COLOR} key={`tag-${tag}-${index}`}>\n              {tag}\n            </Tag>\n          );\n        })}\n      </div>\n\n      <div className=\"add-new-string-section\">\n        <TextField\n          fieldName=\"tag-input\"\n          value={newTagInput}\n          className=\"new-tag-input\"\n          onChange={handleInputChange}\n          onPressEnter={handleSubmitNewTag}\n          maxLength={maxLength}\n          placeholder={placeholder}\n          status={submitStatus}\n        />\n      </div>\n    </div>\n  );\n}\n","// EDIT CUSTOM DETAILS ON YOUR PAGE\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Typography, Button } from 'antd';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { bbedit } from '@uiw/codemirror-theme-bbedit';\nimport { markdown, markdownLanguage } from '@codemirror/lang-markdown';\nimport { languages } from '@codemirror/language-data';\n\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  API_CUSTOM_CONTENT,\n} from '../../../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../../../utils/input-statuses';\nimport { FormStatusIndicator } from '../../../../components/config/FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport default function EditPageContent() {\n  const [content, setContent] = useState('');\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { extraPageContent: initialContent } = instanceDetails;\n\n  let resetTimer = null;\n\n  function handleEditorChange(text) {\n    setContent(text);\n    if (text !== initialContent && !hasChanged) {\n      setHasChanged(true);\n    } else if (text === initialContent && hasChanged) {\n      setHasChanged(false);\n    }\n  }\n\n  // Clear out any validation states and messaging\n  const resetStates = () => {\n    setSubmitStatus(null);\n    setHasChanged(false);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  // posts all the tags at once as an array obj\n  async function handleSave() {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    await postConfigUpdateToAPI({\n      apiPath: API_CUSTOM_CONTENT,\n      data: { value: content },\n      onSuccess: (message: string) => {\n        setFieldInConfigState({\n          fieldName: 'extraPageContent',\n          value: content,\n          path: 'instanceDetails',\n        });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, message));\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n      },\n    });\n    resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n  }\n\n  useEffect(() => {\n    setContent(initialContent);\n  }, [instanceDetails]);\n\n  return (\n    <div className=\"edit-page-content\">\n      <Title level={3} className=\"section-title\">\n        Custom Page Content\n      </Title>\n\n      <p className=\"description\">\n        Edit the content of your page by using simple{' '}\n        <a\n          href=\"https://www.markdownguide.org/basic-syntax/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Markdown syntax\n        </a>\n        .\n      </p>\n\n      <CodeMirror\n        value={content}\n        placeholder=\"Enter your custom page content here...\"\n        theme={bbedit}\n        onChange={handleEditorChange}\n        extensions={[markdown({ base: markdownLanguage, codeLanguages: languages })]}\n      />\n\n      <br />\n      <div className=\"page-content-actions\">\n        {hasChanged && (\n          <Button type=\"primary\" onClick={handleSave}>\n            Save\n          </Button>\n        )}\n        <FormStatusIndicator status={submitStatus} />\n      </div>\n    </div>\n  );\n}\n","import React, { FC } from 'react';\nimport { Select } from 'antd';\nimport { SocialHandleDropdownItem } from '../../types/config-section';\nimport { OTHER_SOCIAL_HANDLE_OPTION } from '../../utils/config-constants';\n\nexport type DropdownProps = {\n  iconList: SocialHandleDropdownItem[];\n  selectedOption: string;\n  onSelected: any;\n};\n\nexport const SocialDropdown: FC<DropdownProps> = ({ iconList, selectedOption, onSelected }) => {\n  const handleSelected = (value: string) => {\n    if (onSelected) {\n      onSelected(value);\n    }\n  };\n  const inititalSelected = selectedOption === '' ? null : selectedOption;\n  return (\n    <div className=\"social-dropdown-container\">\n      <p className=\"description\">\n        If you are looking for a platform name not on this list, please select Other and type in\n        your own name. A logo will not be provided.\n      </p>\n\n      <div className=\"formfield-container\">\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">Social Platform</span>\n        </div>\n        <div className=\"input-side\">\n          <Select\n            style={{ width: 240 }}\n            className=\"social-dropdown\"\n            placeholder=\"Social platform...\"\n            defaultValue={inititalSelected}\n            value={inititalSelected}\n            onSelect={handleSelected}\n          >\n            {iconList.map(item => {\n              const { platform, icon, key } = item;\n\n              return (\n                <Select.Option className=\"social-option\" key={`platform-${key}`} value={key}>\n                  <span className=\"option-icon\">\n                    <img src={icon} alt=\"\" className=\"option-icon\" />\n                  </span>\n                  <span className=\"option-label\">{platform}</span>\n                </Select.Option>\n              );\n            })}\n            <Select.Option\n              className=\"social-option\"\n              key={`platform-${OTHER_SOCIAL_HANDLE_OPTION}`}\n              value={OTHER_SOCIAL_HANDLE_OPTION}\n            >\n              Other...\n            </Select.Option>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Typography, Table, Button, Modal, Input } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { CaretDownOutlined, CaretUpOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { SocialDropdown } from '../../../../components/config/SocialDropdown';\nimport { fetchData, SOCIAL_PLATFORMS_LIST } from '../../../../utils/apis';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport {\n  API_SOCIAL_HANDLES,\n  postConfigUpdateToAPI,\n  RESET_TIMEOUT,\n  DEFAULT_SOCIAL_HANDLE,\n  OTHER_SOCIAL_HANDLE_OPTION,\n} from '../../../../utils/config-constants';\nimport { SocialHandle, UpdateArgs } from '../../../../types/config-section';\nimport {\n  isValidMatrixAccount,\n  isValidAccount,\n  isValidUrl,\n  DEFAULT_TEXTFIELD_URL_PATTERN,\n} from '../../../../utils/urls';\nimport { TextField } from '../../../../components/config/TextField';\nimport { createInputStatus, STATUS_ERROR, STATUS_SUCCESS } from '../../../../utils/input-statuses';\nimport { FormStatusIndicator } from '../../../../components/config/FormStatusIndicator';\n\nconst { Title } = Typography;\n\nexport default function EditSocialLinks() {\n  const [availableIconsList, setAvailableIconsList] = useState([]);\n  const [currentSocialHandles, setCurrentSocialHandles] = useState([]);\n\n  const [displayModal, setDisplayModal] = useState(false);\n  const [displayOther, setDisplayOther] = useState(false);\n  const [modalProcessing, setModalProcessing] = useState(false);\n  const [editId, setEditId] = useState(-1);\n\n  // current data inside modal\n  const [modalDataState, setModalDataState] = useState(DEFAULT_SOCIAL_HANDLE);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { instanceDetails } = serverConfig;\n  const { socialHandles: initialSocialHandles } = instanceDetails;\n\n  let resetTimer = null;\n\n  const PLACEHOLDERS = {\n    mastodon: 'https://mastodon.social/@username',\n    twitter: 'https://twitter.com/username',\n  };\n\n  const getAvailableIcons = async () => {\n    try {\n      const result = await fetchData(SOCIAL_PLATFORMS_LIST, { auth: false });\n      const list = Object.keys(result).map(item => ({\n        key: item,\n        ...result[item],\n      }));\n      setAvailableIconsList(list);\n    } catch (error) {\n      console.log(error);\n      //  do nothing\n    }\n  };\n\n  const isPredefinedSocial = (platform: string) =>\n    availableIconsList.find(item => item.key === platform) || false;\n\n  const selectedOther =\n    modalDataState.platform !== '' &&\n    !availableIconsList.find(item => item.key === modalDataState.platform);\n\n  useEffect(() => {\n    getAvailableIcons();\n  }, []);\n\n  useEffect(() => {\n    if (instanceDetails.socialHandles) {\n      setCurrentSocialHandles(initialSocialHandles);\n    }\n  }, [instanceDetails]);\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n  const resetModal = () => {\n    setDisplayModal(false);\n    setEditId(-1);\n    setDisplayOther(false);\n    setModalProcessing(false);\n    setModalDataState({ ...DEFAULT_SOCIAL_HANDLE });\n  };\n\n  const handleModalCancel = () => {\n    resetModal();\n  };\n\n  const updateModalState = (fieldName: string, value: string) => {\n    setModalDataState({\n      ...modalDataState,\n      [fieldName]: value,\n    });\n  };\n  const handleDropdownSelect = (value: string) => {\n    if (value === OTHER_SOCIAL_HANDLE_OPTION) {\n      setDisplayOther(true);\n      updateModalState('platform', '');\n    } else {\n      setDisplayOther(false);\n      updateModalState('platform', value);\n    }\n  };\n  const handleOtherNameChange = event => {\n    const { value } = event.target;\n    updateModalState('platform', value);\n  };\n\n  const handleUrlChange = ({ value }: UpdateArgs) => {\n    updateModalState('url', value);\n  };\n\n  // posts all the variants at once as an array obj\n  const postUpdateToAPI = async (postValue: any) => {\n    await postConfigUpdateToAPI({\n      apiPath: API_SOCIAL_HANDLES,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({\n          fieldName: 'socialHandles',\n          value: postValue,\n          path: 'instanceDetails',\n        });\n\n        // close modal\n        setModalProcessing(false);\n        handleModalCancel();\n\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        setModalProcessing(false);\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // on Ok, send all of dataState to api\n  // show loading\n  // close modal when api is done\n  const handleModalOk = () => {\n    setModalProcessing(true);\n    const postData = currentSocialHandles.length ? [...currentSocialHandles] : [];\n    if (editId === -1) {\n      postData.push(modalDataState);\n    } else {\n      postData.splice(editId, 1, modalDataState);\n    }\n    postUpdateToAPI(postData);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const postData = [...currentSocialHandles];\n    postData.splice(index, 1);\n    postUpdateToAPI(postData);\n  };\n\n  const handleMoveItemUp = (index: number) => {\n    if (index <= 0 || index >= currentSocialHandles.length) {\n      return;\n    }\n    const postData = [...currentSocialHandles];\n    const tmp = postData[index - 1];\n    postData[index - 1] = postData[index];\n    postData[index] = tmp;\n    postUpdateToAPI(postData);\n  };\n\n  const handleMoveItemDown = (index: number) => {\n    if (index < 0 || index >= currentSocialHandles.length - 1) {\n      return;\n    }\n    const postData = [...currentSocialHandles];\n    const tmp = postData[index + 1];\n    postData[index + 1] = postData[index];\n    postData[index] = tmp;\n    postUpdateToAPI(postData);\n  };\n\n  const socialHandlesColumns: ColumnsType<SocialHandle> = [\n    {\n      title: 'Social Link',\n      dataIndex: '',\n      key: 'combo',\n      render: (data, record) => {\n        const { platform, url } = record;\n        const platformInfo = isPredefinedSocial(platform);\n\n        // custom platform case\n        if (!platformInfo) {\n          return (\n            <div className=\"social-handle-cell\">\n              <p className=\"option-label\">\n                <strong>{platform}</strong>\n                <span className=\"handle-url\" title={url}>\n                  {url}\n                </span>\n              </p>\n            </div>\n          );\n        }\n        const { icon, platform: platformName } = platformInfo;\n        return (\n          <div className=\"social-handle-cell\">\n            <span className=\"option-icon\">\n              <img src={icon} alt=\"\" className=\"option-icon\" />\n            </span>\n            <p className=\"option-label\">\n              <strong>{platformName}</strong>\n              <span className=\"handle-url\" title={url}>\n                {url}\n              </span>\n            </p>\n          </div>\n        );\n      },\n    },\n    {\n      title: '',\n      dataIndex: '',\n      key: 'edit',\n      render: (data, record, index) => (\n        <div className=\"actions\">\n          <Button\n            size=\"small\"\n            onClick={() => {\n              const platformInfo = currentSocialHandles[index];\n              setEditId(index);\n              setModalDataState({ ...platformInfo });\n              setDisplayModal(true);\n              if (!isPredefinedSocial(platformInfo.platform)) {\n                setDisplayOther(true);\n              }\n            }}\n          >\n            Edit\n          </Button>\n          <Button\n            icon={<CaretUpOutlined />}\n            size=\"small\"\n            hidden={index === 0}\n            onClick={() => handleMoveItemUp(index)}\n          />\n          <Button\n            icon={<CaretDownOutlined />}\n            size=\"small\"\n            hidden={index === currentSocialHandles.length - 1}\n            onClick={() => handleMoveItemDown(index)}\n          />\n          <Button\n            className=\"delete-button\"\n            icon={<DeleteOutlined />}\n            size=\"small\"\n            onClick={() => handleDeleteItem(index)}\n          />\n        </div>\n      ),\n    },\n  ];\n\n  const isValid = (url: string, platform: string) => {\n    if (platform === 'xmpp') {\n      return isValidAccount(url, 'xmpp');\n    }\n    if (platform === 'matrix') {\n      return isValidMatrixAccount(url);\n    }\n\n    return isValidUrl(url);\n  };\n\n  const okButtonProps = {\n    disabled: !isValid(modalDataState.url, modalDataState.platform),\n  };\n\n  const otherField = (\n    <div className=\"other-field-container formfield-container\">\n      <div className=\"label-side\" />\n      <div className=\"input-side\">\n        <Input\n          placeholder=\"Other platform name\"\n          defaultValue={modalDataState.platform}\n          onChange={handleOtherNameChange}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"social-links-edit-container\">\n      <Title level={3} className=\"section-title\">\n        Your Social Handles\n      </Title>\n      <p className=\"description\">\n        Add all your social media handles and links to your other profiles here.\n      </p>\n\n      <FormStatusIndicator status={submitStatus} />\n\n      <Table\n        className=\"social-handles-table\"\n        pagination={false}\n        size=\"small\"\n        rowKey={record => `${record.platform}-${record.url}`}\n        columns={socialHandlesColumns}\n        dataSource={currentSocialHandles}\n      />\n\n      <Modal\n        title=\"Edit Social Handle\"\n        open={displayModal}\n        onOk={handleModalOk}\n        onCancel={handleModalCancel}\n        confirmLoading={modalProcessing}\n        okButtonProps={okButtonProps}\n      >\n        <div className=\"social-handle-modal-content\">\n          <SocialDropdown\n            iconList={availableIconsList}\n            selectedOption={selectedOther ? OTHER_SOCIAL_HANDLE_OPTION : modalDataState.platform}\n            onSelected={handleDropdownSelect}\n          />\n          {displayOther && otherField}\n          <br />\n          <TextField\n            fieldName=\"social-url\"\n            label=\"URL\"\n            placeholder={PLACEHOLDERS[modalDataState.platform] || 'Url to page'}\n            value={modalDataState.url}\n            onChange={handleUrlChange}\n            useTrim\n            type=\"url\"\n            pattern={DEFAULT_TEXTFIELD_URL_PATTERN}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n      </Modal>\n      <br />\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          resetModal();\n          setDisplayModal(true);\n        }}\n      >\n        Add a new social link\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport EditInstanceDetails from './EditInstanceDetails';\nimport EditInstanceTags from './EditInstanceTags';\nimport EditSocialLinks from './EditSocialLinks';\nimport EditPageContent from './EditPageContent';\n\nexport default function PublicFacingDetails() {\n  return (\n    <div className=\"config-public-details-page\">\n      <p className=\"description\">\n        The following are displayed on your site to describe your stream and its content.{' '}\n        <a\n          href=\"https://owncast.online/docs/website/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn more.\n        </a>\n      </p>\n\n      <div className=\"top-container\">\n        <div className=\"form-module instance-details-container\">\n          <EditInstanceDetails />\n        </div>\n\n        <div className=\"form-module social-items-container \">\n          <div className=\"form-module tags-module\">\n            <EditInstanceTags />\n          </div>\n\n          <div className=\"form-module social-handles-container\">\n            <EditSocialLinks />\n          </div>\n        </div>\n      </div>\n      <div className=\"form-module page-content-module\">\n        <EditPageContent />\n      </div>\n    </div>\n  );\n}\n","export const MAX_IMAGE_FILESIZE = 2097152;\nexport const ACCEPTED_IMAGE_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\n\nexport function getBase64(img: File | Blob, callback: (imageUrl: string | ArrayBuffer) => void) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nexport function readableBytes(bytes: number): string {\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  const SIZE_UNITS = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const size = Number((bytes / Math.pow(1024, index)).toFixed(2)) * 1;\n\n  return `${size} ${SIZE_UNITS[index]}`;\n}\n","import {\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n  LoadingOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\n\nexport const STATUS_RESET_TIMEOUT = 3000;\n\nexport const STATUS_ERROR = 'error';\nexport const STATUS_INVALID = 'invalid';\nexport const STATUS_PROCESSING = 'proessing';\nexport const STATUS_SUCCESS = 'success';\nexport const STATUS_WARNING = 'warning';\n\nexport type InputStatusTypes = 'error' | 'invalid' | 'proessing' | 'success' | 'warning';\n\nexport interface StatusState {\n  type: InputStatusTypes;\n  icon: any; // Element type of sorts?\n  message: string;\n}\ninterface InputStates {\n  [key: string]: StatusState;\n}\n\nexport const INPUT_STATES: InputStates = {\n  [STATUS_SUCCESS]: {\n    type: STATUS_SUCCESS,\n    icon: <CheckCircleFilled style={{ color: 'green' }} />,\n    message: 'Success!',\n  },\n  [STATUS_ERROR]: {\n    type: STATUS_ERROR,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_INVALID]: {\n    type: STATUS_INVALID,\n    icon: <ExclamationCircleFilled style={{ color: 'red' }} />,\n    message: 'An error occurred.',\n  },\n  [STATUS_PROCESSING]: {\n    type: STATUS_PROCESSING,\n    icon: <LoadingOutlined />,\n    message: '',\n  },\n  [STATUS_WARNING]: {\n    type: STATUS_WARNING,\n    icon: <WarningOutlined style={{ color: '#fc0' }} />,\n    message: '',\n  },\n};\n\n// Don't like any of the default messages in INPUT_STATES? Create a state with custom message by providing an icon style with your message.\nexport function createInputStatus(type: InputStatusTypes, message?: string): StatusState {\n  if (!type || !INPUT_STATES[type]) {\n    return null;\n  }\n  if (!message) {\n    return INPUT_STATES[type];\n  }\n  return {\n    type,\n    icon: INPUT_STATES[type].icon,\n    message,\n  };\n}\n","// TODO: add a notication after updating info that changes will take place either on a new stream or server restart. may be different for each field.\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { STATUS, fetchData, FETCH_INTERVAL, SERVER_CONFIG } from './apis';\nimport { ConfigDetails, UpdateArgs } from '../types/config-section';\nimport { DEFAULT_VARIANT_STATE } from './config-constants';\n\nexport const initialServerConfigState: ConfigDetails = {\n  streamKeys: [],\n  adminPassword: '',\n  instanceDetails: {\n    customStyles: '',\n    extraPageContent: '',\n    logo: '',\n    name: '',\n    nsfw: false,\n    socialHandles: [],\n    streamTitle: '',\n    summary: '',\n    tags: [],\n    title: '',\n    welcomeMessage: '',\n    offlineMessage: '',\n    appearanceVariables: {},\n  },\n  ffmpegPath: '',\n  rtmpServerPort: '',\n  webServerPort: '',\n  socketHostOverride: null,\n  s3: {\n    accessKey: '',\n    acl: '',\n    bucket: '',\n    enabled: false,\n    endpoint: '',\n    region: '',\n    secret: '',\n    servingEndpoint: '',\n    forcePathStyle: false,\n  },\n  yp: {\n    enabled: false,\n    instanceUrl: '',\n  },\n  videoSettings: {\n    latencyLevel: 4,\n    cpuUsageLevel: 3,\n    videoQualityVariants: [DEFAULT_VARIANT_STATE],\n  },\n  federation: {\n    enabled: false,\n    isPrivate: false,\n    username: '',\n    goLiveMessage: '',\n    showEngagement: true,\n    blockedDomains: [],\n  },\n  notifications: {\n    browser: { enabled: false, goLiveMessage: '' },\n    discord: { enabled: false, webhook: '', goLiveMessage: '' },\n    twitter: {\n      enabled: false,\n      goLiveMessage: '',\n      apiKey: '',\n      apiSecret: '',\n      accessToken: '',\n      accessTokenSecret: '',\n      bearerToken: '',\n    },\n  },\n  externalActions: [],\n  supportedCodecs: [],\n  videoCodec: '',\n  forbiddenUsernames: [],\n  suggestedUsernames: [],\n  chatDisabled: false,\n  chatJoinMessagesEnabled: true,\n  chatEstablishedUserMode: false,\n  hideViewerCount: false,\n};\n\nconst initialServerStatusState = {\n  broadcastActive: false,\n  broadcaster: null,\n  currentBroadcast: null,\n  online: false,\n  viewerCount: 0,\n  sessionMaxViewerCount: 0,\n  sessionPeakViewerCount: 0,\n  overallPeakViewerCount: 0,\n  versionNumber: '0.0.0',\n  streamTitle: '',\n  chatDisabled: false,\n  health: {\n    healthy: true,\n    healthPercentage: 100,\n    message: '',\n    representation: 0,\n  },\n};\n\nexport const ServerStatusContext = React.createContext({\n  ...initialServerStatusState,\n  serverConfig: initialServerConfigState,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setFieldInConfigState: (args: UpdateArgs) => null,\n});\n\nconst ServerStatusProvider = ({ children }) => {\n  const [status, setStatus] = useState(initialServerStatusState);\n  const [config, setConfig] = useState(initialServerConfigState);\n\n  const getStatus = async () => {\n    try {\n      const result = await fetchData(STATUS);\n      setStatus({ ...result });\n    } catch (error) {\n      // todo\n    }\n  };\n  const getConfig = async () => {\n    try {\n      const result = await fetchData(SERVER_CONFIG);\n      setConfig(result);\n    } catch (error) {\n      // todo\n    }\n  };\n\n  const setFieldInConfigState = ({ fieldName, value, path }: UpdateArgs) => {\n    const updatedConfig = path\n      ? {\n          ...config,\n          [path]: {\n            ...config[path],\n            [fieldName]: value,\n          },\n        }\n      : {\n          ...config,\n          [fieldName]: value,\n        };\n    setConfig(updatedConfig);\n  };\n\n  useEffect(() => {\n    let getStatusIntervalId = null;\n\n    getStatus();\n    getStatusIntervalId = setInterval(getStatus, FETCH_INTERVAL);\n\n    getConfig();\n\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(getStatusIntervalId);\n    };\n  }, []);\n\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  const providerValue = {\n    ...status,\n    serverConfig: config,\n\n    setFieldInConfigState,\n  };\n  return (\n    <ServerStatusContext.Provider value={providerValue}>{children}</ServerStatusContext.Provider>\n  );\n};\n\nServerStatusProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default ServerStatusProvider;\n"],"names":["Title","Typography","TAG_COLOR","EditValueArray","title","description","placeholder","maxLength","values","handleDeleteIndex","handleCreateString","submitStatus","continuousStatusMessage","param","newStringInput","setNewStringInput","useState","handleInputChange","value","handleSubmitNewString","newString","trim","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","level","p","map","tag","index","handleClose","Tag","closable","onClose","color","concat","FormStatusIndicator","status","TextField","fieldName","onChange","onPressEnter","defaultProps","TEXTFIELD_TYPE_TEXT","TEXTFIELD_TYPE_TEXTAREA","TEXTFIELD_TYPE_URL","TextFieldWithSubmit","apiPath","configPath","initialValue","useTrim","useTrimLead","textFieldProps","setSubmitStatus","hasChanged","setHasChanged","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetTimer","required","tip","onSubmit","resetStates","clearTimeout","useEffect","handleChange","changedFieldName","changedValue","newValue","replace","handleBlur","handleSubmit","createInputStatus","STATUS_PROCESSING","postConfigUpdateToAPI","data","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","message","setTimeout","RESET_TIMEOUT","textfieldContainerClass","classNames","submittable","onBlur","Button","type","size","onClick","disabled","ToggleSwitch","checked","reversed","label","useSubmit","isChecked","isCheckedSend","loading","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","EditLogo","serverConfig","logoUrl","setlogoUrl","setLoading","logoCachedbuster","setLogoCacheBuster","currentLogo","instanceDetails","logo","TEXTFIELD_PROPS_LOGO","beforeUpload","Promise","res","rej","file","MAX_IMAGE_FILESIZE","msg","readableBytes","ACCEPTED_IMAGE_TYPES","getBase64","url","handleLogoUpdate","Math","floor","random","logoDisplayUrl","NEXT_PUBLIC_API_HOST","jsx_runtime","img","src","alt","Upload","name","listType","showUploadList","accept","customRequest","LoadingOutlined","style","icon","UploadOutlined","EditInstanceDetails","formDataValues","setFormDataValues","yp","instanceUrl","handleSubmitInstanceUrl","enabled","API_YP_SWITCH","handleFieldChange","hasInstanceUrl","br","TEXTFIELD_PROPS_SERVER_NAME","TEXTFIELD_PROPS_INSTANCE_URL","TEXTFIELD_PROPS_SERVER_SUMMARY","summary","TEXTFIELD_PROPS_SERVER_OFFLINE_MESSAGE","offlineMessage","FIELD_PROPS_HIDE_VIEWER_COUNT","hideViewerCount","a","href","target","rel","strong","FIELD_PROPS_YP","FIELD_PROPS_NSFW","nsfw","EditInstanceTags","newTagInput","setNewTagInput","tags","FIELD_PROPS_TAGS","postUpdateToAPI","postValue","handleSubmitNewTag","newTag","STATUS_WARNING","some","toLowerCase","updatedTags","handleDeleteTag","splice","EditPageContent","content","setContent","extraPageContent","initialContent","handleSave","API_CUSTOM_CONTENT","CodeMirror","theme","bbedit","text","extensions","markdown","base","markdownLanguage","codeLanguages","languages","SocialDropdown","iconList","selectedOption","onSelected","handleSelected","inititalSelected","Select","width","defaultValue","onSelect","item","platform","key","OTHER_SOCIAL_HANDLE_OPTION","EditSocialLinks","availableIconsList","setAvailableIconsList","currentSocialHandles","setCurrentSocialHandles","displayModal","setDisplayModal","displayOther","setDisplayOther","modalProcessing","setModalProcessing","editId","setEditId","modalDataState","setModalDataState","DEFAULT_SOCIAL_HANDLE","socialHandles","initialSocialHandles","getAvailableIcons","result","fetchData","SOCIAL_PLATFORMS_LIST","auth","list","Object","keys","error","console","log","isPredefinedSocial","find","selectedOther","resetModal","handleModalCancel","updateModalState","handleDropdownSelect","handleOtherNameChange","event","handleUrlChange","API_SOCIAL_HANDLES","handleModalOk","postData","length","push","handleDeleteItem","handleMoveItemUp","tmp","handleMoveItemDown","okButtonProps","isValidAccount","isValidMatrixAccount","isValidUrl","otherField","Input","Table","pagination","rowKey","record","columns","dataIndex","render","platformInfo","platformName","CaretUpOutlined","hidden","CaretDownOutlined","DeleteOutlined","dataSource","Modal","open","onOk","onCancel","confirmLoading","PLACEHOLDERS","mastodon","twitter","pattern","DEFAULT_TEXTFIELD_URL_PATTERN","PublicFacingDetails","callback","reader","FileReader","addEventListener","readAsDataURL","bytes","Number","pow","toFixed","SIZE_UNITS","STATUS_INVALID","INPUT_STATES","CheckCircleFilled","ExclamationCircleFilled","WarningOutlined","initialServerConfigState","streamKeys","adminPassword","customStyles","streamTitle","welcomeMessage","appearanceVariables","ffmpegPath","rtmpServerPort","webServerPort","socketHostOverride","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","videoSettings","latencyLevel","cpuUsageLevel","videoQualityVariants","DEFAULT_VARIANT_STATE","federation","isPrivate","username","goLiveMessage","showEngagement","blockedDomains","notifications","browser","discord","webhook","apiKey","apiSecret","accessToken","accessTokenSecret","bearerToken","externalActions","supportedCodecs","videoCodec","forbiddenUsernames","suggestedUsernames","chatDisabled","chatJoinMessagesEnabled","chatEstablishedUserMode","initialServerStatusState","broadcastActive","broadcaster","currentBroadcast","online","viewerCount","sessionMaxViewerCount","sessionPeakViewerCount","overallPeakViewerCount","versionNumber","health","healthy","healthPercentage","representation","React","ServerStatusProvider","children","setStatus","config","setConfig","getStatus","STATUS","getConfig","SERVER_CONFIG","updatedConfig","getStatusIntervalId","setInterval","FETCH_INTERVAL","clearInterval","providerValue","Provider","propTypes","PropTypes","__webpack_exports__"],"sourceRoot":""}