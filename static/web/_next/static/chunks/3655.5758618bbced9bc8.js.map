{"version":3,"file":"static/chunks/3655.5758618bbced9bc8.js","mappings":"0LAeO,IAAMA,EAAwC,GAAc,IAAb,CAAEC,KAAAA,CAAAA,CAAM,CAAAC,EACtDC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAAeC,EAAAA,EAAgBA,EAC9CC,EAAeF,CAAAA,EAAAA,EAAAA,EAAAA,EAAeG,EAAAA,EAAiBA,EAE/C,CAACC,EAAcC,EAAgB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAE3C,CAAEC,OAAAA,CAAAA,CAAQ,CAAGL,EAEbM,EAAW,GAAmB,CAClCC,SAASC,KAAK,CAAGA,CACnB,EAEMC,EAAS,IAAM,CACnBN,EAAgB,GAClB,EAEMO,EAAU,IAAM,CACpBP,EAAgB,IAChBG,EAASX,EACX,EAEMgB,EAAkB,IAAM,CAE5BC,OAAOC,gBAAgB,CAAC,OAAQJ,GAChCG,OAAOC,gBAAgB,CAAC,QAASH,EACnC,EAEMI,EAAe,IAAM,CACzBF,OAAOG,mBAAmB,CAAC,OAAQN,GACnCG,OAAOG,mBAAmB,CAAC,QAASL,EACtC,EAoCA,MAlCAM,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACRL,IAEO,IAAM,CACXG,GACF,GACC,CAACnB,EAAK,EAETqB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd,GAAI,CAACd,GAAgB,CAACG,EACpB,MACD,CAGD,IAAMY,EAAcpB,CAAY,CAACA,EAAaqB,MAAM,CAAG,EAAE,CAChC,SAArBD,EAAYE,IAAI,EAIpBb,EAAS,mBAAcc,MAAA,CAALzB,GACpB,EAAG,CAACE,EAAcF,EAAK,EAEvBqB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACTd,IAIDG,EACFC,EAAS,oBAAec,MAAA,CAALzB,IACTU,GACVC,EAAS,oBAAec,MAAA,CAALzB,IAEvB,EAAG,CAACU,EAAQV,EAAK,EAEV,IAAI,AACb","sources":["webpack://_N_E/./components/TitleNotifier/TitleNotifier.tsx","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * This component is responsible for updating the title of the page when\n * different state changes occur.\n * If the stream live state changes, or chat messages come in while the\n * page is backgrounded, this component will update the title to reflect it. *\n * @component\n */\nimport { FC, useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { serverStatusState, chatMessagesAtom } from '../stores/ClientConfigStore';\n\nexport type TitleNotifierProps = {\n  name: string;\n};\n\nexport const TitleNotifier: FC<TitleNotifierProps> = ({ name }) => {\n  const chatMessages = useRecoilValue(chatMessagesAtom);\n  const serverStatus = useRecoilValue(serverStatusState);\n\n  const [backgrounded, setBackgrounded] = useState(false);\n\n  const { online } = serverStatus;\n\n  const setTitle = (title: string) => {\n    document.title = title;\n  };\n\n  const onBlur = () => {\n    setBackgrounded(true);\n  };\n\n  const onFocus = () => {\n    setBackgrounded(false);\n    setTitle(name);\n  };\n\n  const listenForEvents = () => {\n    // Listen for events that should update the title\n    window.addEventListener('blur', onBlur);\n    window.addEventListener('focus', onFocus);\n  };\n\n  const removeEvents = () => {\n    window.removeEventListener('blur', onBlur);\n    window.removeEventListener('focus', onFocus);\n  };\n\n  useEffect(() => {\n    listenForEvents();\n\n    return () => {\n      removeEvents();\n    };\n  }, [name]);\n\n  useEffect(() => {\n    if (!backgrounded || !online) {\n      return;\n    }\n\n    // Only alert on real chat messages from people.\n    const lastMessage = chatMessages[chatMessages.length - 1];\n    if (lastMessage.type !== 'CHAT') {\n      return;\n    }\n\n    setTitle(`ðŸ’¬ :: ${name}`);\n  }, [chatMessages, name]);\n\n  useEffect(() => {\n    if (!backgrounded) {\n      return;\n    }\n\n    if (online) {\n      setTitle(` ðŸŸ¢ :: ${name}`);\n    } else if (!online) {\n      setTitle(` ðŸ”´ :: ${name}`);\n    }\n  }, [online, name]);\n\n  return null;\n};\n"],"names":["TitleNotifier","name","param","chatMessages","useRecoilValue","chatMessagesAtom","serverStatus","serverStatusState","backgrounded","setBackgrounded","useState","online","setTitle","document","title","onBlur","onFocus","listenForEvents","window","addEventListener","removeEvents","removeEventListener","useEffect","lastMessage","length","type","concat"],"sourceRoot":""}